<dec f='opencv/modules/legacy/include/opencv2/legacy/legacy.hpp' l='2498' type='void cv::OneWayDescriptorBase::GeneratePCA(const char * img_path, const char * images_list, int pose_count = 500)'/>
<doc f='opencv/modules/legacy/include/opencv2/legacy/legacy.hpp' l='2495'>// GeneratePCA: calculate and save PCA components and descriptors
    // - img_path: path to training PCA images directory
    // - images_list: filename with filenames of training PCA images</doc>
<use f='opencv/modules/legacy/src/oneway.cpp' l='1334' u='c' c='_ZN2cv20OneWayDescriptorBaseC1E6CvSizeiRKSsS3_S3_fffiii'/>
<def f='opencv/modules/legacy/src/oneway.cpp' l='1856' ll='1877' type='void cv::OneWayDescriptorBase::GeneratePCA(const char * img_path, const char * images_list, int pose_count = 500)'/>
<doc f='opencv/modules/legacy/src/oneway.cpp' l='1827'>/*
    void generatePCAFeatures(const FileNode &amp;fn, const char* postfix,
                             CvSize patch_size, CvMat** avg, CvMat** eigenvectors)
    {
        vector&lt;IplImage*&gt; patches;
        loadPCAFeatures(fn, patches, patch_size);
        calcPCAFeatures(patches, fs, postfix, avg, eigenvectors);
    }


    void OneWayDescriptorBase::GeneratePCA(const FileNode &amp;fn, int pose_count)
    {
        generatePCAFeatures(fn, &quot;hr&quot;, m_patch_size, &amp;m_pca_hr_avg, &amp;m_pca_hr_eigenvectors);
        generatePCAFeatures(fn, &quot;lr&quot;, cvSize(m_patch_size.width / 2, m_patch_size.height / 2),
                            &amp;m_pca_avg, &amp;m_pca_eigenvectors);


        OneWayDescriptorBase descriptors(m_patch_size, pose_count);
        descriptors.SetPCAHigh(m_pca_hr_avg, m_pca_hr_eigenvectors);
        descriptors.SetPCALow(m_pca_avg, m_pca_eigenvectors);

        printf(&quot;Calculating %d PCA descriptors (you can grab a coffee, this will take a while)...\n&quot;,
               descriptors.GetPCADimHigh());
        descriptors.InitializePoseTransforms();
        descriptors.CreatePCADescriptors();
        descriptors.SavePCADescriptors(*fs);
    }
*/</doc>
