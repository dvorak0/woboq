<dec f='opencv/modules/legacy/include/opencv2/legacy/legacy.hpp' l='84' type='void cvCalcEigenObjects(int nObjects, void * input, void * output, int ioFlags, int ioBufSize, void * userData, CvTermCriteria * calcLimit, IplImage * avg, float * eigVals)'/>
<doc f='opencv/modules/legacy/include/opencv2/legacy/legacy.hpp' l='82'>/* Calculates eigen values and vectors of covariation matrix of a set of
   arrays */</doc>
<def f='opencv/modules/legacy/src/eigenobjects.cpp' l='1307' ll='1514' type='void cvCalcEigenObjects(int nObjects, void * input, void * output, int ioFlags, int ioBufSize, void * userData, CvTermCriteria * calcLimit, IplImage * avg, float * eigVals)'/>
<doc f='opencv/modules/legacy/src/eigenobjects.cpp' l='1262'>/*F///////////////////////////////////////////////////////////////////////////////////////
//    Name: cvCalcEigenObjects
//    Purpose: The function calculates an orthonormal eigen basis and a mean (averaged)
//             object for a group of input objects (images, vectors, etc.).
//    Context:
//    Parameters: nObjects  - number of source objects
//                input     - pointer either to array of input objects
//                            or to read callback function (depending on ioFlags)
//                output    - pointer either to output eigen objects
//                            or to write callback function (depending on ioFlags)
//                ioFlags   - input/output flags (see Notes)
//                ioBufSize - input/output buffer size
//                userData  - pointer to the structure which contains all necessary
//                            data for the callback functions
//                calcLimit - determines the calculation finish conditions
//                avg       - averaged object (has the same size as ROI)
//                eigVals   - pointer to corresponding eigen values (array of &lt;nObjects&gt;
//                            elements in descending order)
//
//    Notes: 1. input/output data (that is, input objects and eigen ones) may either
//              be allocated in the RAM or be read from/written to the HDD (or any
//              other device) by read/write callback functions. It depends on the
//              value of ioFlags paramater, which may be the following:
//                  CV_EIGOBJ_NO_CALLBACK, or 0;
//                  CV_EIGOBJ_INPUT_CALLBACK;
//                  CV_EIGOBJ_OUTPUT_CALLBACK;
//                  CV_EIGOBJ_BOTH_CALLBACK, or
//                            CV_EIGOBJ_INPUT_CALLBACK | CV_EIGOBJ_OUTPUT_CALLBACK.
//              The callback functions as well as the user data structure must be
//              developed by the user.
//
//           2. If ioBufSize = 0, or it&apos;s too large, the function dermines buffer size
//              itself.
//
//           3. Depending on calcLimit parameter, calculations are finished either if
//              eigenfaces number comes up to certain value or the relation of the
//              current eigenvalue and the largest one comes down to certain value
//              (or any of the above conditions takes place). The calcLimit-&gt;type value
//              must be CV_TERMCRIT_NUMB, CV_TERMCRIT_EPS or
//              CV_TERMCRIT_NUMB | CV_TERMCRIT_EPS. The function returns the real
//              values calcLimit-&gt;max_iter and calcLimit-&gt;epsilon.
//
//           4. eigVals may be equal to NULL (if you don&apos;t need eigen values in further).
//
//F*/</doc>
