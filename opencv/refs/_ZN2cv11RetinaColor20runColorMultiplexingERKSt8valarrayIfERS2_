<use f='opencv/modules/contrib/src/retinacolor.hpp' l='127' u='c' c='_ZN2cv11RetinaColor20runColorMultiplexingERKSt8valarrayIfE'/>
<dec f='opencv/modules/contrib/src/retinacolor.hpp' l='134' type='void cv::RetinaColor::runColorMultiplexing(const std::valarray&lt;float&gt; &amp; demultiplexedInputFrame, std::valarray&lt;float&gt; &amp; multiplexedFrame)'/>
<doc f='opencv/modules/contrib/src/retinacolor.hpp' l='129'>/**
        * color multiplexing function: a demultipleed RGB frame of size M*N*3 is transformed into a multiplexed M*N*1 pixels frame where each pixel is either Red, or Green or Blue if using RGB images
        * @param demultiplexedInputFrame: the demultiplexed input frame to be processed of size M*N*3
        * @param multiplexedFrame: the resulting multiplexed frame
        */</doc>
<use f='opencv/modules/contrib/src/retinacolor.cpp' l='313' u='c' c='_ZN2cv11RetinaColor22runColorDemultiplexingERKSt8valarrayIfEbf'/>
<use f='opencv/modules/contrib/src/retinacolor.cpp' l='366' u='c' c='_ZN2cv11RetinaColor22runColorDemultiplexingERKSt8valarrayIfEbf'/>
<def f='opencv/modules/contrib/src/retinacolor.cpp' l='408' ll='415' type='void cv::RetinaColor::runColorMultiplexing(const std::valarray&lt;float&gt; &amp; demultiplexedInputFrame, std::valarray&lt;float&gt; &amp; multiplexedFrame)'/>
<doc f='opencv/modules/contrib/src/retinacolor.cpp' l='407'>// color multiplexing: input frame size=_NBrows*_filterOutput.getNBcolumns()*3, multiplexedFrame output size=_NBrows*_filterOutput.getNBcolumns()</doc>
