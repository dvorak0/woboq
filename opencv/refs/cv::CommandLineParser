<def f='opencv/modules/core/include/opencv2/core/core.hpp' l='4789' ll='4832'/>
<size>48</size>
<doc f='opencv/modules/core/include/opencv2/core/core.hpp' l='4748'>/*!
&quot;\nThe CommandLineParser class is designed for command line arguments parsing\n&quot;
           &quot;Keys map: \n&quot;
           &quot;Before you start to work with CommandLineParser you have to create a map for keys.\n&quot;
           &quot;    It will look like this\n&quot;
           &quot;    const char* keys =\n&quot;
           &quot;    {\n&quot;
           &quot;        {    s|  string|  123asd |string parameter}\n&quot;
           &quot;        {    d|  digit |  100    |digit parameter }\n&quot;
           &quot;        {    c|noCamera|false    |without camera  }\n&quot;
           &quot;        {    1|        |some text|help            }\n&quot;
           &quot;        {    2|        |333      |another help    }\n&quot;
           &quot;    };\n&quot;
           &quot;Usage syntax: \n&quot;
           &quot;    \&quot;{\&quot; - start of parameter string.\n&quot;
           &quot;    \&quot;}\&quot; - end of parameter string\n&quot;
           &quot;    \&quot;|\&quot; - separator between short name, full name, default value and help\n&quot;
           &quot;Supported syntax: \n&quot;
           &quot;    --key1=arg1  &lt;If a key with &apos;--&apos; must has an argument\n&quot;
           &quot;                  you have to assign it through &apos;=&apos; sign.&gt; \n&quot;
           &quot;&lt;If the key with &apos;--&apos; doesn&apos;t have any argument, it means that it is a bool key&gt;\n&quot;
           &quot;    -key2=arg2   &lt;If a key with &apos;-&apos; must has an argument \n&quot;
           &quot;                  you have to assign it through &apos;=&apos; sign.&gt; \n&quot;
           &quot;If the key with &apos;-&apos; doesn&apos;t have any argument, it means that it is a bool key\n&quot;
           &quot;    key3                 &lt;This key can&apos;t has any parameter&gt; \n&quot;
           &quot;Usage: \n&quot;
           &quot;      Imagine that the input parameters are next:\n&quot;
           &quot;                -s=string_value --digit=250 --noCamera lena.jpg 10000\n&quot;
           &quot;    CommandLineParser parser(argc, argv, keys) - create a parser object\n&quot;
           &quot;    parser.get&lt;string&gt;(\&quot;s\&quot; or \&quot;string\&quot;) will return you first parameter value\n&quot;
           &quot;    parser.get&lt;string&gt;(\&quot;s\&quot;, false or \&quot;string\&quot;, false) will return you first parameter value\n&quot;
           &quot;                                                                without spaces in end and begin\n&quot;
           &quot;    parser.get&lt;int&gt;(\&quot;d\&quot; or \&quot;digit\&quot;) will return you second parameter value.\n&quot;
           &quot;                    It also works with &apos;unsigned int&apos;, &apos;double&apos;, and &apos;float&apos; types&gt;\n&quot;
           &quot;    parser.get&lt;bool&gt;(\&quot;c\&quot; or \&quot;noCamera\&quot;) will return you true .\n&quot;
           &quot;                                If you enter this key in commandline&gt;\n&quot;
           &quot;                                It return you false otherwise.\n&quot;
           &quot;    parser.get&lt;string&gt;(\&quot;1\&quot;) will return you the first argument without parameter (lena.jpg) \n&quot;
           &quot;    parser.get&lt;int&gt;(\&quot;2\&quot;) will return you the second argument without parameter (10000)\n&quot;
           &quot;                          It also works with &apos;unsigned int&apos;, &apos;double&apos;, and &apos;float&apos; types \n&quot;
*/</doc>
<fun r='_ZN2cv17CommandLineParserC1EiPKPKcS2_'/>
<fun r='_ZN2cv17CommandLineParser3getERKSsb'/>
<fun r='_ZN2cv17CommandLineParser11printParamsEv'/>
<mbr r='cv::CommandLineParser::data' o='0' t='std::map&lt;std::string, std::vector&lt;std::string&gt; &gt;'/>
<fun r='_ZN2cv17CommandLineParser9getStringERKSs'/>
<fun r='_ZN2cv17CommandLineParser3hasERKSs'/>
<fun r='_ZN2cv17CommandLineParser12analyzeValueERKSsb'/>
<fun r='_ZN2cv17CommandLineParser7getDataERKSs'/>
<fun r='_ZN2cv17CommandLineParser16fromStringNumberERKSs'/>
<fun r='_ZN2cv17CommandLineParser3getERKSsb'/>
<fun r='_ZN2cv17CommandLineParser12analyzeValueERKSsb'/>
<fun r='_ZN2cv17CommandLineParser12analyzeValueERKSsb'/>
<fun r='_ZN2cv17CommandLineParser12analyzeValueERKSsb'/>
<fun r='_ZN2cv17CommandLineParser12analyzeValueERKSsb'/>
<fun r='_ZN2cv17CommandLineParser12analyzeValueERKSsb'/>
<fun r='_ZN2cv17CommandLineParser12analyzeValueERKSsb'/>
