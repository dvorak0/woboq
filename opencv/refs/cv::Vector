<def f='opencv/modules/core/include/opencv2/core/operations.hpp' l='2271' ll='2462'/>
<doc f='opencv/modules/core/include/opencv2/core/operations.hpp' l='2264'>//////////////////////////////// Vector ////////////////////////////////

// template vector class. It is similar to STL&apos;s vector,
// with a few important differences:
//   1) it can be created on top of user-allocated data w/o copying it
//   2) vector b = a means copying the header,
//      not the underlying data (use clone() to make a deep copy)</doc>
<fun r='_ZN2cv6VectorC1Ev'/>
<fun r='_ZN2cv6VectorC1Em'/>
<fun r='_ZN2cv6VectorC1EmRKT_'/>
<fun r='_ZN2cv6VectorC1EPT_mb'/>
<fun r='_ZN2cv6VectorC1ERKNS_3VecIT_XT_EEE'/>
<fun r='_ZN2cv6VectorC1ERKSt6vectorIT_SaIS2_EEb'/>
<fun r='_ZN2cv6VectorC1ERKNS_6VectorIT_EE'/>
<fun r='_ZN2cv6VectorC1ERKNS_6VectorIT_EERKNS_5RangeE'/>
<fun r='_ZN2cv6VectoraSERKNS_6VectorIT_EE'/>
<fun r='_ZN2cv6VectorD1Ev'/>
<fun r='_ZNK2cv6Vector5cloneEv'/>
<fun r='_ZNK2cv6Vector6copyToERNS_6VectorIT_EE'/>
<fun r='_ZNK2cv6Vector6copyToERSt6vectorIT_SaIS2_EE'/>
<fun r='_ZNK2cv6Vectorcv5CvMatEv'/>
<fun r='_ZN2cv6VectorixEm'/>
<fun r='_ZNK2cv6VectorixEm'/>
<fun r='_ZNK2cv6VectorclERKNS_5RangeE'/>
<fun r='_ZN2cv6Vector4backEv'/>
<fun r='_ZNK2cv6Vector4backEv'/>
<fun r='_ZN2cv6Vector5frontEv'/>
<fun r='_ZNK2cv6Vector5frontEv'/>
<fun r='_ZN2cv6Vector5beginEv'/>
<fun r='_ZN2cv6Vector3endEv'/>
<fun r='_ZNK2cv6Vector5beginEv'/>
<fun r='_ZNK2cv6Vector3endEv'/>
<fun r='_ZN2cv6Vector6addrefEv'/>
<fun r='_ZN2cv6Vector7releaseEv'/>
<fun r='_ZN2cv6Vector3setEPT_mb'/>
<fun r='_ZN2cv6Vector7reserveEm'/>
<fun r='_ZN2cv6Vector6resizeEm'/>
<fun r='_ZN2cv6Vector9push_backERKT_'/>
<fun r='_ZN2cv6Vector8pop_backEv'/>
<fun r='_ZNK2cv6Vector4sizeEv'/>
<fun r='_ZNK2cv6Vector8capacityEv'/>
<fun r='_ZNK2cv6Vector5emptyEv'/>
<fun r='_ZN2cv6Vector5clearEv'/>
<fun r='_ZNK2cv6Vector4typeEv'/>
<mbr r='cv::Vector::hdr' t='cv::Vector::Hdr'/>
