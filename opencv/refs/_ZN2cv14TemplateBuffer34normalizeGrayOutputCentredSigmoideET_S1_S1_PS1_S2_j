<dec f='opencv/modules/contrib/src/templatebuffer.hpp' l='286' type='static void cv::TemplateBuffer::normalizeGrayOutputCentredSigmoide(const type meanValue, const type sensitivity, const type maxOutputValue, type * inputPicture, type * outputBuffer, const unsigned int nbPixels)'/>
<def f='opencv/modules/contrib/src/templatebuffer.hpp' l='473' ll='492' type='static void cv::TemplateBuffer::normalizeGrayOutputCentredSigmoide(const type meanValue, const type sensitivity, const type maxOutputValue, type * inputBuffer, type * outputBuffer, const unsigned int nbPixels)'/>
<doc f='opencv/modules/contrib/src/templatebuffer.hpp' l='278'>/**
        * sigmoide image normalization function (saturates min and max values)
        * @param meanValue: specifies the mean value of th pixels to be processed
        * @param sensitivity: strenght of the sigmoide
        * @param inputPicture: the image to be normalized if no parameter, then, the built in buffer reachable by getOutput() function is normalized
        * @param outputBuffer: the ouput buffer on which the result is writed, if no parameter, then, the built in buffer reachable by getOutput() function is normalized
        * @param maxOutputValue: the maximum output value
        */</doc>
<doc f='opencv/modules/contrib/src/templatebuffer.hpp' l='472'>// normalize and adjust luminance with a centered to 128 sigmode</doc>
<use f='opencv/modules/contrib/src/retinacolor.cpp' l='401' u='c' c='_ZN2cv11RetinaColor22runColorDemultiplexingERKSt8valarrayIfEbf'/>
<use f='opencv/modules/contrib/src/retinacolor.cpp' l='402' u='c' c='_ZN2cv11RetinaColor22runColorDemultiplexingERKSt8valarrayIfEbf'/>
<use f='opencv/modules/contrib/src/retinacolor.cpp' l='403' u='c' c='_ZN2cv11RetinaColor22runColorDemultiplexingERKSt8valarrayIfEbf'/>
