<dec f='opencv/modules/contrib/include/opencv2/contrib/retina.hpp' l='164' type='void cv::Retina::Retina(Size inputSize, const bool colorMode, cv::RETINA_COLORSAMPLINGMETHOD colorSamplingMethod = RETINA_COLOR_BAYER, const bool useRetinaLogSampling = false, const double reductionFactor = 1., const double samplingStrenght = 10.)'/>
<doc f='opencv/modules/contrib/include/opencv2/contrib/retina.hpp' l='155'>/**
     * Complete Retina filter constructor which allows all basic structural parameters definition
         * @param inputSize : the input frame size
     * @param colorMode : the chosen processing mode : with or without color processing
     * @param colorSamplingMethod: specifies which kind of color sampling will be used
     * @param useRetinaLogSampling: activate retina log sampling, if true, the 2 following parameters can be used
     * @param reductionFactor: only usefull if param useRetinaLogSampling=true, specifies the reduction factor of the output frame (as the center (fovea) is high resolution and corners can be underscaled, then a reduction of the output is allowed without precision leak
     * @param samplingStrenght: only usefull if param useRetinaLogSampling=true, specifies the strenght of the log scale that is applied
     */</doc>
<def f='opencv/modules/contrib/src/retina.cpp' l='84' ll='88' type='void cv::Retina::Retina(const cv::Size inputSz, const bool colorMode, cv::RETINA_COLORSAMPLINGMETHOD colorSamplingMethod = RETINA_COLOR_BAYER, const bool useRetinaLogSampling = false, const double reductionFactor = 1., const double samplingStrenght = 10.)'/>
