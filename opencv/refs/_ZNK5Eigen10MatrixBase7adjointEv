<dec f='include/eigen3/Eigen/src/Core/MatrixBase.h' l='213' type='const AdjointReturnType Eigen::MatrixBase::adjoint() const'/>
<def f='include/eigen3/Eigen/src/Core/Transpose.h' l='235' ll='241' type='const typename MatrixBase&lt;Derived&gt;::AdjointReturnType Eigen::MatrixBase::adjoint() const'/>
<use f='include/eigen3/Eigen/src/Core/Transpose.h' l='323' u='c' c='_ZN5Eigen10MatrixBase14adjointInPlaceEv'/>
<doc f='include/eigen3/Eigen/src/Core/Transpose.h' l='216'>/** \returns an expression of the adjoint (i.e. conjugate transpose) of *this.
  *
  * Example: \include MatrixBase_adjoint.cpp
  * Output: \verbinclude MatrixBase_adjoint.out
  *
  * \warning If you want to replace a matrix by its own adjoint, do \b NOT do this:
  * \code
  * m = m.adjoint(); // bug!!! caused by aliasing effect
  * \endcode
  * Instead, use the adjointInPlace() method:
  * \code
  * m.adjointInPlace();
  * \endcode
  * which gives Eigen good opportunities for optimization, or alternatively you can also do:
  * \code
  * m = m.adjoint().eval();
  * \endcode
  *
  * \sa adjointInPlace(), transpose(), conjugate(), class Transpose, class internal::scalar_conjugate_op */</doc>
