<dec f='opencv/modules/contrib/src/imagelogpolprojection.hpp' l='121' type='void cv::ImageLogPolProjection::ImageLogPolProjection(const unsigned int nbRows, const unsigned int nbColumns, const cv::ImageLogPolProjection::PROJECTIONTYPE projection, const bool colorMode = false)'/>
<def f='opencv/modules/contrib/src/imagelogpolprojection.cpp' l='77' ll='102' type='void cv::ImageLogPolProjection::ImageLogPolProjection(const unsigned int nbRows, const unsigned int nbColumns, const cv::ImageLogPolProjection::PROJECTIONTYPE projection, const bool colorModeCapable = false)'/>
<doc f='opencv/modules/contrib/src/imagelogpolprojection.cpp' l='76'>// constructor</doc>
<doc f='opencv/modules/contrib/src/imagelogpolprojection.hpp' l='113'>/**
    * constructor, just specifies the image input size and the projection type, no projection initialisation is done
    * -&gt; use initLogRetinaSampling() or initLogPolarCortexSampling() for that
    * @param nbRows: number of rows of the input image
    * @param nbColumns: number of columns of the input image
    * @param projection: the type of projection, RETINALOGPROJECTION or CORTEXLOGPOLARPROJECTION
    * @param colorMode: specifies if the projection is applied on a grayscale image (false) or color images (3 layers) (true)
    */</doc>
<use f='opencv/modules/contrib/src/retinafilter.cpp' l='94' u='c' c='_ZN2cv12RetinaFilterC1EjjbNS_26RETINA_COLORSAMPLINGMETHODEbdd'/>
