<dec f='include/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h' l='159' type='DynMatrixType Eigen::MatrixFunction&lt;type-parameter-0-0, type-parameter-0-1, 1&gt;::solveTriangularSylvester(const DynMatrixType &amp; A, const DynMatrixType &amp; B, const DynMatrixType &amp; C)'/>
<use f='include/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h' l='404' u='c' c='_ZN5Eigen14MatrixFunctionIT_T0_Li1EE18computeOffDiagonalEv'/>
<def f='include/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h' l='432' ll='474' type='typename MatrixFunction&lt;MatrixType, AtomicType, 1&gt;::DynMatrixType Eigen::MatrixFunction&lt;type-parameter-0-0, type-parameter-0-1, 1&gt;::solveTriangularSylvester(const DynMatrixType &amp; A, const DynMatrixType &amp; B, const DynMatrixType &amp; C)'/>
<doc f='include/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h' l='409'>/** \brief Solve a triangular Sylvester equation AX + XB = C 
  *
  * \param[in]  A  the matrix A; should be square and upper triangular
  * \param[in]  B  the matrix B; should be square and upper triangular
  * \param[in]  C  the matrix C; should have correct size.
  *
  * \returns the solution X.
  *
  * If A is m-by-m and B is n-by-n, then both C and X are m-by-n. 
  * The (i,j)-th component of the Sylvester equation is
  * \f[ 
  *     \sum_{k=i}^m A_{ik} X_{kj} + \sum_{k=1}^j X_{ik} B_{kj} = C_{ij}. 
  * \f]
  * This can be re-arranged to yield:
  * \f[ 
  *     X_{ij} = \frac{1}{A_{ii} + B_{jj}} \Bigl( C_{ij}
  *     - \sum_{k=i+1}^m A_{ik} X_{kj} - \sum_{k=1}^{j-1} X_{ik} B_{kj} \Bigr).
  * \f]
  * It is assumed that A and B are such that the numerator is never
  * zero (otherwise the Sylvester equation does not have a unique
  * solution). In that case, these equations can be evaluated in the
  * order \f$ i=m,\ldots,1 \f$ and \f$ j=1,\ldots,n \f$.
  */</doc>
