<dec f='opencv/modules/core/include/opencv2/core/internal.hpp' l='527'/>
<doc f='opencv/modules/core/include/opencv2/core/internal.hpp' l='465'>/****************************************************************************************\

  Generic implementation of QuickSort algorithm.
  ----------------------------------------------
  Using this macro user can declare customized sort function that can be much faster
  than built-in qsort function because of lower overhead on elements
  comparison and exchange. The macro takes less_than (or LT) argument - a macro or function
  that takes 2 arguments returns non-zero if the first argument should be before the second
  one in the sorted sequence and zero otherwise.

  Example:

    Suppose that the task is to sort points by ascending of y coordinates and if
    y&apos;s are equal x&apos;s should ascend.

    The code is:
    ------------------------------------------------------------------------------
           #define cmp_pts( pt1, pt2 ) \
               ((pt1).y &lt; (pt2).y || ((pt1).y &lt; (pt2).y &amp;&amp; (pt1).x &lt; (pt2).x))

           [static] CV_IMPLEMENT_QSORT( icvSortPoints, CvPoint, cmp_pts )
    ------------------------------------------------------------------------------

    After that the function &quot;void icvSortPoints( CvPoint* array, size_t total, int aux );&quot;
    is available to user.

  aux is an additional parameter, which can be used when comparing elements.
  The current implementation was derived from *BSD system qsort():

    * Copyright (c) 1992, 1993
    *  The Regents of the University of California.  All rights reserved.
    *
    * Redistribution and use in source and binary forms, with or without
    * modification, are permitted provided that the following conditions
    * are met:
    * 1. Redistributions of source code must retain the above copyright
    *    notice, this list of conditions and the following disclaimer.
    * 2. Redistributions in binary form must reproduce the above copyright
    *    notice, this list of conditions and the following disclaimer in the
    *    documentation and/or other materials provided with the distribution.
    * 3. All advertising materials mentioning features or use of this software
    *    must display the following acknowledgement:
    *  This product includes software developed by the University of
    *  California, Berkeley and its contributors.
    * 4. Neither the name of the University nor the names of its contributors
    *    may be used to endorse or promote products derived from this software
    *    without specific prior written permission.
    *
    * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS&apos;&apos; AND
    * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
    * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
    * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
    * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
    * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
    * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
    * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    * SUCH DAMAGE.

\****************************************************************************************/</doc>
<use f='opencv/apps/haartraining/cvboost.cpp' l='83' u='c'/>
<use f='opencv/apps/haartraining/cvboost.cpp' l='85' u='c'/>
<use f='opencv/apps/haartraining/cvboost.cpp' l='87' u='c'/>
<use f='opencv/apps/traincascade/boost.cpp' l='35' u='c'/>
<use f='opencv/apps/traincascade/boost.cpp' l='38' u='c'/>
<use f='opencv/apps/traincascade/boost.cpp' l='39' u='c'/>
<use f='opencv/modules/gpu/src/generalized_hough.cpp' l='290' u='c'/>
<use f='opencv/modules/imgproc/src/generalized_hough.cpp' l='162' u='c'/>
<use f='opencv/modules/imgproc/src/hough.cpp' l='73' u='c'/>
<use f='opencv/modules/ml/src/boost.cpp' l='356' u='c'/>
<use f='opencv/modules/ml/src/boost.cpp' l='1423' u='c'/>
<use f='opencv/modules/ml/src/ertrees.cpp' l='48' u='c'/>
<use f='opencv/modules/ml/src/ertrees.cpp' l='51' u='c'/>
<use f='opencv/modules/ml/src/gbt.cpp' l='12' u='c'/>
<use f='opencv/modules/ml/src/gbt.cpp' l='14' u='c'/>
<use f='opencv/modules/ml/src/tree.cpp' l='124' u='c'/>
<use f='opencv/modules/ml/src/tree.cpp' l='125' u='c'/>
<use f='opencv/modules/ml/src/tree.cpp' l='128' u='c'/>
<use f='opencv/modules/ml/src/tree.cpp' l='129' u='c'/>
<use f='opencv/modules/ml/src/tree.cpp' l='132' u='c'/>
