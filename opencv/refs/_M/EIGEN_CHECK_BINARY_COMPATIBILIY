<dec f='include/eigen3/Eigen/src/Core/CwiseBinaryOp.h' l='96'/>
<use f='include/eigen3/Eigen/src/Core/CwiseBinaryOp.h' l='128' u='c'/>
<use f='include/eigen3/Eigen/src/Core/SelfCwiseBinaryOp.h' l='131' u='c'/>
<use f='include/eigen3/Eigen/src/Core/Dot.h' l='69' u='c'/>
<use f='include/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h' l='394' u='c'/>
<doc f='include/eigen3/Eigen/src/Core/CwiseBinaryOp.h' l='89'>// we require Lhs and Rhs to have the same scalar type. Currently there is no example of a binary functor
// that would take two operands of different types. If there were such an example, then this check should be
// moved to the BinaryOp functors, on a per-case basis. This would however require a change in the BinaryOp functors, as
// currently they take only one typename Scalar template parameter.
// It is tempting to always allow mixing different types but remember that this is often impossible in the vectorized paths.
// So allowing mixing different types gives very unexpected errors when enabling vectorization, when the user tries to
// add together a float matrix and a double matrix.</doc>
