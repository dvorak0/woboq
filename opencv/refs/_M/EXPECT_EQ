<dec f='opencv/modules/ts/include/opencv2/ts/ts_gtest.h' l='19811'/>
<doc f='opencv/modules/ts/include/opencv2/ts/ts_gtest.h' l='19765'>// Macros for testing equalities and inequalities.
//
//    * {ASSERT|EXPECT}_EQ(expected, actual): Tests that expected == actual
//    * {ASSERT|EXPECT}_NE(v1, v2):           Tests that v1 != v2
//    * {ASSERT|EXPECT}_LT(v1, v2):           Tests that v1 &lt; v2
//    * {ASSERT|EXPECT}_LE(v1, v2):           Tests that v1 &lt;= v2
//    * {ASSERT|EXPECT}_GT(v1, v2):           Tests that v1 &gt; v2
//    * {ASSERT|EXPECT}_GE(v1, v2):           Tests that v1 &gt;= v2
//
// When they are not, Google Test prints both the tested expressions and
// their actual values.  The values must be compatible built-in types,
// or you will get a compiler error.  By &quot;compatible&quot; we mean that the
// values can be compared by the respective operator.
//
// Note:
//
//   1. It is possible to make a user-defined type work with
//   {ASSERT|EXPECT}_??(), but that requires overloading the
//   comparison operators and is thus discouraged by the Google C++
//   Usage Guide.  Therefore, you are advised to use the
//   {ASSERT|EXPECT}_TRUE() macro to assert that two objects are
//   equal.
//
//   2. The {ASSERT|EXPECT}_??() macros do pointer comparisons on
//   pointers (in particular, C strings).  Therefore, if you use it
//   with two C strings, you are testing how their locations in memory
//   are related, not how their content is related.  To compare two C
//   strings by content, use {ASSERT|EXPECT}_STR*().
//
//   3. {ASSERT|EXPECT}_EQ(expected, actual) is preferred to
//   {ASSERT|EXPECT}_TRUE(expected == actual), as the former tells you
//   what the actual value is when it fails, and similarly for the
//   other comparisons.
//
//   4. Do not depend on the order in which {ASSERT|EXPECT}_??()
//   evaluate their arguments, which is undefined.
//
//   5. These macros evaluate their arguments exactly once.
//
// Examples:
//
//   EXPECT_NE(5, Foo());
//   EXPECT_EQ(NULL, a_pointer);
//   ASSERT_LT(i, array_size);
//   ASSERT_GT(records.size(), 0) &lt;&lt; &quot;There is no record left.&quot;;</doc>
<use f='opencv/modules/core/test/test_mat.cpp' l='875' u='c'/>
<use f='opencv/modules/core/test/test_mat.cpp' l='876' u='c'/>
<use f='opencv/modules/core/test/test_math.cpp' l='2386' u='c'/>
<use f='opencv/modules/core/test/test_math.cpp' l='2402' u='c'/>
<use f='opencv/modules/gpu/test/test_core.cpp' l='3371' u='c'/>
<use f='opencv/modules/gpu/test/test_gpumat.cpp' l='346' u='c'/>
<use f='opencv/modules/gpu/test/test_gpumat.cpp' l='347' u='c'/>
<use f='opencv/modules/gpu/test/test_gpumat.cpp' l='348' u='c'/>
<use f='opencv/modules/gpu/test/test_gpumat.cpp' l='349' u='c'/>
<use f='opencv/modules/gpu/test/test_gpumat.cpp' l='353' u='c'/>
<use f='opencv/modules/gpu/test/test_gpumat.cpp' l='354' u='c'/>
<use f='opencv/modules/gpu/test/test_gpumat.cpp' l='355' u='c'/>
<use f='opencv/modules/gpu/test/test_gpumat.cpp' l='356' u='c'/>
<use f='opencv/modules/highgui/test/test_ffmpeg.cpp' l='328' u='c'/>
<use f='opencv/modules/highgui/test/test_ffmpeg.cpp' l='329' u='c'/>
<use f='opencv/modules/highgui/test/test_ffmpeg.cpp' l='330' u='c'/>
<use f='opencv/modules/highgui/test/test_ffmpeg.cpp' l='331' u='c'/>
<use f='opencv/modules/highgui/test/test_ffmpeg.cpp' l='347' u='c'/>
<use f='opencv/modules/highgui/test/test_fourcc.cpp' l='113' u='c'/>
<use f='opencv/modules/highgui/test/test_grfmt.cpp' l='466' u='c'/>
<use f='opencv/modules/highgui/test/test_grfmt.cpp' l='467' u='c'/>
<use f='opencv/modules/highgui/test/test_grfmt.cpp' l='468' u='c'/>
<use f='opencv/modules/highgui/test/test_grfmt.cpp' l='469' u='c'/>
<use f='opencv/modules/highgui/test/test_grfmt.cpp' l='470' u='c'/>
<use f='opencv/modules/highgui/test/test_grfmt.cpp' l='471' u='c'/>
<use f='opencv/modules/highgui/test/test_grfmt.cpp' l='472' u='c'/>
<use f='opencv/modules/imgproc/test/test_color.cpp' l='1696' u='c'/>
<use f='opencv/modules/imgproc/test/test_color.cpp' l='1697' u='c'/>
<use f='opencv/modules/imgproc/test/test_color.cpp' l='1698' u='c'/>
<use f='opencv/modules/imgproc/test/test_color.cpp' l='1703' u='c'/>
<use f='opencv/modules/imgproc/test/test_color.cpp' l='1723' u='c'/>
<use f='opencv/modules/imgproc/test/test_color.cpp' l='1724' u='c'/>
<use f='opencv/modules/imgproc/test/test_color.cpp' l='1725' u='c'/>
<use f='opencv/modules/imgproc/test/test_color.cpp' l='1730' u='c'/>
<use f='opencv/modules/imgproc/test/test_cvtyuv.cpp' l='662' u='c'/>
<use f='opencv/modules/imgproc/test/test_cvtyuv.cpp' l='709' u='c'/>
<use f='opencv/modules/imgproc/test/test_filter.cpp' l='1901' u='c'/>
<use f='opencv/modules/imgproc/test/test_filter.cpp' l='1905' u='c'/>
<use f='opencv/modules/imgproc/test/test_filter.cpp' l='1917' u='c'/>
<use f='opencv/modules/imgproc/test/test_filter.cpp' l='1918' u='c'/>
<use f='opencv/modules/imgproc/test/test_grabcut.cpp' l='169' u='c'/>
<use f='opencv/modules/imgproc/test/test_grabcut.cpp' l='170' u='c'/>
<use f='opencv/modules/imgproc/test/test_grabcut.cpp' l='171' u='c'/>
<use f='opencv/modules/ocl/test/test_arithm.cpp' l='1166' u='c'/>
<use f='opencv/modules/ocl/test/test_kmeans.cpp' l='207' u='c'/>
<use f='opencv/modules/ocl/test/test_kmeans.cpp' l='223' u='c'/>
