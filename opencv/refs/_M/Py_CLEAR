<dec f='include/python2.7/object.h' l='812'/>
<doc f='include/python2.7/object.h' l='778'>/* Safely decref `op` and set `op` to NULL, especially useful in tp_clear
 * and tp_dealloc implementatons.
 *
 * Note that &quot;the obvious&quot; code can be deadly:
 *
 *     Py_XDECREF(op);
 *     op = NULL;
 *
 * Typically, `op` is something like self-&gt;containee, and `self` is done
 * using its `containee` member.  In the code sequence above, suppose
 * `containee` is non-NULL with a refcount of 1.  Its refcount falls to
 * 0 on the first line, which can trigger an arbitrary amount of code,
 * possibly including finalizers (like __del__ methods or weakref callbacks)
 * coded in Python, which in turn can release the GIL and allow other threads
 * to run, etc.  Such code may even invoke methods of `self` again, or cause
 * cyclic gc to trigger, but-- oops! --self-&gt;containee still points to the
 * object being torn down, and it may be in an insane state while being torn
 * down.  This has in fact been a rich historic source of miserable (rare &amp;
 * hard-to-diagnose) segfaulting (and other) bugs.
 *
 * The safe way is:
 *
 *      Py_CLEAR(op);
 *
 * That arranges to set `op` to NULL _before_ decref&apos;ing, so that any code
 * triggered as a side-effect of `op` getting torn down no longer believes
 * `op` points to a valid object.
 *
 * There are cases where it&apos;s safe to use the naive code, but they&apos;re brittle.
 * For example, if `op` points to a Python integer, you know that destroying
 * one of those can&apos;t cause problems -- but in part that relies on that
 * Python integers aren&apos;t currently weakly referencable.  Best practice is
 * to use Py_CLEAR() even if you can&apos;t think of a reason for why you need to.
 */</doc>
