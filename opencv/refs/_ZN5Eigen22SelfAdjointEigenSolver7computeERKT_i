<use f='include/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h' l='159' u='c' c='_ZN5Eigen22SelfAdjointEigenSolverC1ERKT_i'/>
<dec f='include/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h' l='192' type='SelfAdjointEigenSolver&lt;_MatrixType&gt; &amp; Eigen::SelfAdjointEigenSolver::compute(const MatrixType &amp; matrix, int options = ComputeEigenvectors)'/>
<def f='include/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h' l='383' ll='477' type='SelfAdjointEigenSolver&lt;MatrixType&gt; &amp; Eigen::SelfAdjointEigenSolver::compute(const MatrixType &amp; matrix, int options = ComputeEigenvectors)'/>
<doc f='include/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h' l='162'>/** \brief Computes eigendecomposition of given matrix.
      *
      * \param[in]  matrix  Selfadjoint matrix whose eigendecomposition is to
      *    be computed. Only the lower triangular part of the matrix is referenced.
      * \param[in]  options Can be #ComputeEigenvectors (default) or #EigenvaluesOnly.
      * \returns    Reference to \c *this
      *
      * This function computes the eigenvalues of \p matrix.  The eigenvalues()
      * function can be used to retrieve them.  If \p options equals #ComputeEigenvectors,
      * then the eigenvectors are also computed and can be retrieved by
      * calling eigenvectors().
      *
      * This implementation uses a symmetric QR algorithm. The matrix is first
      * reduced to tridiagonal form using the Tridiagonalization class. The
      * tridiagonal matrix is then brought to diagonal form with implicit
      * symmetric QR steps with Wilkinson shift. Details can be found in
      * Section 8.3 of Golub \&amp; Van Loan, &lt;i&gt;%Matrix Computations&lt;/i&gt;.
      *
      * The cost of the computation is about \f$ 9n^3 \f$ if the eigenvectors
      * are required and \f$ 4n^3/3 \f$ if they are not required.
      *
      * This method reuses the memory in the SelfAdjointEigenSolver object that
      * was allocated when the object was constructed, if the size of the
      * matrix does not change.
      *
      * Example: \include SelfAdjointEigenSolver_compute_MatrixType.cpp
      * Output: \verbinclude SelfAdjointEigenSolver_compute_MatrixType.out
      *
      * \sa SelfAdjointEigenSolver(const MatrixType&amp;, int)
      */</doc>
