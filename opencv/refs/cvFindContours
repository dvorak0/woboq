<dec f='opencv/modules/imgproc/include/opencv2/imgproc/imgproc_c.h' l='301' type='int cvFindContours(CvArr * image, CvMemStorage * storage, CvSeq ** first_contour, int header_size = sizeof(CvContour), int mode = CV_RETR_LIST, int method = CV_CHAIN_APPROX_SIMPLE, CvPoint offset = cvPoint(0, 0))'/>
<doc f='opencv/modules/imgproc/include/opencv2/imgproc/imgproc_c.h' l='299'>/* Retrieves outer and optionally inner boundaries of white (non-zero) connected
   components in the black (zero) background */</doc>
<use f='opencv/modules/calib3d/src/checkchessboard.cpp' l='149' u='c' c='cvCheckChessboard'/>
<use f='opencv/modules/calib3d/src/checkchessboard.cpp' l='159' u='c' c='cvCheckChessboard'/>
<use f='opencv/modules/gpu/src/fgd_bgfg.cpp' l='551' u='c' c='_ZN12_GLOBAL__N_121findForegroundRegionsERN2cv3gpu6GpuMatERNS0_3MatERSt6vectorIS6_INS0_6Point_IiEESaIS8_EESaISA_EEP12CvMemStorageRKNS1_12FGDStatModel6ParamsE'/>
<def f='opencv/modules/imgproc/src/contours.cpp' l='1659' ll='1706' type='int cvFindContours(void * img, CvMemStorage * storage, CvSeq ** firstContour, int cntHeaderSize = sizeof(CvContour), int mode = CV_RETR_LIST, int method = CV_CHAIN_APPROX_SIMPLE, CvPoint offset = cvPoint(0, 0))'/>
<use f='opencv/modules/imgproc/src/contours.cpp' l='1717' u='c' c='_ZN2cv12findContoursERKNS_12_OutputArrayES2_S2_iiNS_6Point_IiEE'/>
<doc f='opencv/modules/imgproc/src/contours.cpp' l='1639'>/*F///////////////////////////////////////////////////////////////////////////////////////
//    Name: cvFindContours
//    Purpose:
//      Finds all the contours on the bi-level image.
//    Context:
//    Parameters:
//      img  - source image.
//             Non-zero pixels are considered as 1-pixels
//             and zero pixels as 0-pixels.
//      step - full width of source image in bytes.
//      size - width and height of the image in pixels
//      storage - pointer to storage where will the output contours be placed.
//      header_size - header size of resulting contours
//      mode - mode of contour retrieval.
//      method - method of approximation that is applied to contours
//      first_contour - pointer to first contour pointer
//    Returns:
//      CV_OK or error code
//    Notes:
//F*/</doc>
<use f='opencv/modules/imgproc/src/distransform.cpp' l='810' u='c' c='cvDistTransform'/>
<use f='opencv/modules/imgproc/test/test_contours.cpp' l='245' u='c' c='_ZN18CV_FindContourTest8run_funcEv'/>
<use f='opencv/modules/imgproc/test/test_contours.cpp' l='254' u='c' c='_ZN18CV_FindContourTest8run_funcEv'/>
<use f='opencv/modules/legacy/src/bgfg_acmmm2003.cpp' l='440' u='c' c='_ZL21icvUpdateFGDStatModelP9_IplImageP14CvFGDStatModeld'/>
<use f='opencv/modules/legacy/src/bgfg_gaussmix.cpp' l='1296' u='c' c='_ZL25icvUpdateGaussianBGModel2P9_IplImageP15CvGaussBGModel2'/>
<use f='opencv/modules/legacy/src/blobtrackingcc.cpp' l='219' u='c' c='_ZN15CvBlobTrackerCC7ProcessEP9_IplImageS1_'/>
<use f='opencv/modules/legacy/src/blobtrackingccwithcr.cpp' l='193' u='c' c='_ZN17CvBlobTrackerCCCR7ProcessEP9_IplImageS1_'/>
<use f='opencv/modules/legacy/src/enteringblobdetection.cpp' l='96' u='c' c='_ZL23cvFindBlobsByCCClastersP9_IplImageP9CvBlobSeqP12CvMemStorage'/>
<use f='opencv/modules/legacy/src/enteringblobdetection.cpp' l='717' u='c' c='_ZN16CvBlobDetectorCC13DetectNewBlobEP9_IplImageS1_P9CvBlobSeqS3_'/>
<use f='opencv/modules/legacy/src/enteringblobdetectionreal.cpp' l='93' u='c' c='_ZN18CvBlobDetectorReal13DetectNewBlobEP9_IplImageS1_P9CvBlobSeqS3_'/>
<use f='opencv/modules/legacy/src/facedetection.cpp' l='121' u='c' c='_ZN13FaceDetection12FindContoursEP9_IplImage'/>
<use f='opencv/modules/legacy/src/lee.cpp' l='1389' u='c' c='cvVoronoiDiagramFromImage'/>
<use f='opencv/modules/legacy/src/vecfacetracking.cpp' l='310' u='c' c='_ZN13CvFaceElement12FindContoursEP9_IplImageS1_ii'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='3350' u='c' c='_ZL16pycvFindContoursP7_objectS0_S0_'/>
