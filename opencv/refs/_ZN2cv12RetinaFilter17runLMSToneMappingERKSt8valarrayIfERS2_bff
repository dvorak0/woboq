<dec f='opencv/modules/contrib/src/retinafilter.hpp' l='199' type='void cv::RetinaFilter::runLMSToneMapping(const std::valarray&lt;float&gt; &amp; LMSimageInput, std::valarray&lt;float&gt; &amp; imageOutput, const bool useAdaptiveFiltering, const float PhotoreceptorsCompression = 0.59999999999999998, const float ganglionCellsCompression = 0.59999999999999998)'/>
<doc f='opencv/modules/contrib/src/retinafilter.hpp' l='191'>/**
    * run the initilized retina filter in order to perform color tone mapping applied on an RGB image, after this call the color output of the retina is updated (use function getColorOutput() to grab it)
    * get the resulting RGB frame by calling function getParvoColor()
    * @param LMSimageInput: RGB image input buffer respecting the size specified at the constructor level
    * @param useAdaptiveFiltering: set true if you want to use adaptive color demultilexing (solve some color artefact problems), see RetinaColor for citation references
    * @param PhotoreceptorsCompression: sets the log compression parameters applied at the photoreceptors level (enhance luminance in dark areas)
    * @param ganglionCellsCompression: sets the log compression applied at the gnaglion cells output (enhance contrast)
    */</doc>
<def f='opencv/modules/contrib/src/retinafilter.cpp' l='416' ll='471' type='void cv::RetinaFilter::runLMSToneMapping(const std::valarray&lt;float&gt; &amp; , std::valarray&lt;float&gt; &amp; , const bool , const float  = 0.59999999999999998, const float  = 0.59999999999999998)'/>
