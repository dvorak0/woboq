<dec f='opencv/modules/ml/include/opencv2/ml/ml.hpp' l='383' type='void CvSVMSolver::clear()'/>
<def f='opencv/modules/ml/src/svm.cpp' l='355' ll='370' type='void CvSVMSolver::clear()'/>
<use f='opencv/modules/ml/src/svm.cpp' l='376' u='c' c='_ZN11CvSVMSolverC1Ev'/>
<use f='opencv/modules/ml/src/svm.cpp' l='382' u='c' c='_ZN11CvSVMSolverD1Ev'/>
<use f='opencv/modules/ml/src/svm.cpp' l='411' u='c' c='_ZN11CvSVMSolver6createEiiPPKfPaiPdddP12CvMemStorageP11CvSVMKernelMS_FPfiS9_S9_bEMS_FbRiSC_EMS_FvRdSF_E'/>
<doc f='opencv/modules/ml/src/svm.cpp' l='336'>// Generalized SMO+SVMlight algorithm
// Solves:
//
//  min [0.5(\alpha^T Q \alpha) + b^T \alpha]
//
//      y^T \alpha = \delta
//      y_i = +1 or -1
//      0 &lt;= alpha_i &lt;= Cp for y_i = 1
//      0 &lt;= alpha_i &lt;= Cn for y_i = -1
//
// Given:
//
//  Q, b, y, Cp, Cn, and an initial feasible point \alpha
//  l is the size of vectors and matrices
//  eps is the stopping criterion
//
// solution will be put in \alpha, objective value will be put in obj
//</doc>
