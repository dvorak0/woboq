<def f='include/eigen3/Eigen/src/QR/FullPivHouseholderQR.h' l='246' ll='250' type='bool Eigen::FullPivHouseholderQR::isInjective() const'/>
<use f='include/eigen3/Eigen/src/QR/FullPivHouseholderQR.h' l='274' u='c' c='_ZNK5Eigen20FullPivHouseholderQR12isInvertibleEv'/>
<doc f='include/eigen3/Eigen/src/QR/FullPivHouseholderQR.h' l='239'>/** \returns true if the matrix of which *this is the QR decomposition represents an injective
      *          linear map, i.e. has trivial kernel; false otherwise.
      *
      * \note This method has to determine which pivots should be considered nonzero.
      *       For that, it uses the threshold value that you can control by calling
      *       setThreshold(const RealScalar&amp;).
      */</doc>
