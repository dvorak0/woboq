<def f='include/eigen3/Eigen/src/QR/ColPivHouseholderQR.h' l='37' ll='396'/>
<doc f='include/eigen3/Eigen/src/QR/ColPivHouseholderQR.h' l='16'>/** \ingroup QR_Module
  *
  * \class ColPivHouseholderQR
  *
  * \brief Householder rank-revealing QR decomposition of a matrix with column-pivoting
  *
  * \param MatrixType the type of the matrix of which we are computing the QR decomposition
  *
  * This class performs a rank-revealing QR decomposition of a matrix \b A into matrices \b P, \b Q and \b R
  * such that 
  * \f[
  *  \mathbf{A} \, \mathbf{P} = \mathbf{Q} \, \mathbf{R}
  * \f]
  * by using Householder transformations. Here, \b P is a permutation matrix, \b Q a unitary matrix and \b R an 
  * upper triangular matrix.
  *
  * This decomposition performs column pivoting in order to be rank-revealing and improve
  * numerical stability. It is slower than HouseholderQR, and faster than FullPivHouseholderQR.
  *
  * \sa MatrixBase::colPivHouseholderQr()
  */</doc>
<fun r='_ZN5Eigen19ColPivHouseholderQRC1Ev'/>
<fun r='_ZN5Eigen19ColPivHouseholderQRC1ENT_5IndexES2_'/>
<fun r='_ZN5Eigen19ColPivHouseholderQRC1ERKT_'/>
<fun r='_ZNK5Eigen19ColPivHouseholderQR5solveERKNS_10MatrixBaseIT_EE'/>
<fun r='_ZNK5Eigen19ColPivHouseholderQR12householderQEv'/>
<fun r='_ZNK5Eigen19ColPivHouseholderQR7matrixQEv'/>
<fun r='_ZNK5Eigen19ColPivHouseholderQR8matrixQREv'/>
<fun r='_ZNK5Eigen19ColPivHouseholderQR7matrixREv'/>
<fun r='_ZN5Eigen19ColPivHouseholderQR7computeERKT_'/>
<fun r='_ZNK5Eigen19ColPivHouseholderQR15colsPermutationEv'/>
<fun r='_ZNK5Eigen19ColPivHouseholderQR14absDeterminantEv'/>
<fun r='_ZNK5Eigen19ColPivHouseholderQR17logAbsDeterminantEv'/>
<fun r='_ZNK5Eigen19ColPivHouseholderQR4rankEv'/>
<fun r='_ZNK5Eigen19ColPivHouseholderQR17dimensionOfKernelEv'/>
<fun r='_ZNK5Eigen19ColPivHouseholderQR11isInjectiveEv'/>
<fun r='_ZNK5Eigen19ColPivHouseholderQR12isSurjectiveEv'/>
<fun r='_ZNK5Eigen19ColPivHouseholderQR12isInvertibleEv'/>
<fun r='_ZNK5Eigen19ColPivHouseholderQR7inverseEv'/>
<fun r='_ZNK5Eigen19ColPivHouseholderQR4rowsEv'/>
<fun r='_ZNK5Eigen19ColPivHouseholderQR4colsEv'/>
<fun r='_ZNK5Eigen19ColPivHouseholderQR7hCoeffsEv'/>
<fun r='_ZN5Eigen19ColPivHouseholderQR12setThresholdERKNT_10RealScalarE'/>
<fun r='_ZN5Eigen19ColPivHouseholderQR12setThresholdENS_9Default_tE'/>
<fun r='_ZNK5Eigen19ColPivHouseholderQR9thresholdEv'/>
<fun r='_ZNK5Eigen19ColPivHouseholderQR13nonzeroPivotsEv'/>
<fun r='_ZNK5Eigen19ColPivHouseholderQR8maxPivotEv'/>
<fun r='_ZNK5Eigen19ColPivHouseholderQR4infoEv'/>
<mbr r='Eigen::ColPivHouseholderQR::m_qr' t='MatrixType'/>
<mbr r='Eigen::ColPivHouseholderQR::m_hCoeffs' t='HCoeffsType'/>
<mbr r='Eigen::ColPivHouseholderQR::m_colsPermutation' t='PermutationType'/>
<mbr r='Eigen::ColPivHouseholderQR::m_colsTranspositions' t='IntRowVectorType'/>
<mbr r='Eigen::ColPivHouseholderQR::m_temp' t='RowVectorType'/>
<mbr r='Eigen::ColPivHouseholderQR::m_colSqNorms' t='RealRowVectorType'/>
<mbr r='Eigen::ColPivHouseholderQR::m_isInitialized' t='bool'/>
<mbr r='Eigen::ColPivHouseholderQR::m_usePrescribedThreshold' t='bool'/>
<mbr r='Eigen::ColPivHouseholderQR::m_prescribedThreshold' t='RealScalar'/>
<mbr r='Eigen::ColPivHouseholderQR::m_maxpivot' t='RealScalar'/>
<mbr r='Eigen::ColPivHouseholderQR::m_nonzero_pivots' t='Index'/>
<mbr r='Eigen::ColPivHouseholderQR::m_det_pq' t='Index'/>
<fun r='_ZNK5Eigen19ColPivHouseholderQR14absDeterminantEv'/>
<fun r='_ZNK5Eigen19ColPivHouseholderQR17logAbsDeterminantEv'/>
<fun r='_ZN5Eigen19ColPivHouseholderQR7computeERKT_'/>
<fun r='_ZNK5Eigen19ColPivHouseholderQR12householderQEv'/>
