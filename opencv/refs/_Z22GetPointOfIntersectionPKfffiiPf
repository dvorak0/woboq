<dec f='opencv/modules/objdetect/src/_lsvm_distancetransform.h' l='28' type='int GetPointOfIntersection(const float * f, const float a, const float b, int q1, int q2, float * point)'/>
<def f='opencv/modules/objdetect/src/distancetransform.cpp' l='26' ll='37' type='int GetPointOfIntersection(const float * f, const float a, const float b, int q1, int q2, float * point)'/>
<use f='opencv/modules/objdetect/src/distancetransform.cpp' l='83' u='c' c='_Z38DistanceTransformOneDimensionalProblemPKfiffPfPi'/>
<use f='opencv/modules/objdetect/src/distancetransform.cpp' l='96' u='c' c='_Z38DistanceTransformOneDimensionalProblemPKfiffPfPi'/>
<doc f='opencv/modules/objdetect/src/distancetransform.cpp' l='4'>/*
// Computation the point of intersection functions
// (parabolas on the variable y)
//      a(y - q1) + b(q1 - y)(q1 - y) + f[q1]
//      a(y - q2) + b(q2 - y)(q2 - y) + f[q2]
//
//
// API
// int GetPointOfIntersection(const float *f,
                              const float a, const float b,
                              int q1, int q2, float *point);
// INPUT
// f                - function on the regular grid
// a                - coefficient of the function
// b                - coefficient of the function
// q1               - parameter of the function
// q2               - parameter of the function
// OUTPUT
// point            - point of intersection
// RESULT
// Error status
*/</doc>
<doc f='opencv/modules/objdetect/src/_lsvm_distancetransform.h' l='7'>/*
// Computation the point of intersection functions
// (parabolas on the variable y)
//      a(y - q1) + b(q1 - y)(q1 - y) + f[q1]
//      a(y - q2) + b(q2 - y)(q2 - y) + f[q2]
//
// API
// int GetPointOfIntersection(const F_type *f,
                              const F_type a, const F_type b,
                              int q1, int q2, F_type *point);
// INPUT
// f                - function on the regular grid
// a                - coefficient of the function
// b                - coefficient of the function
// q1               - parameter of the function
// q2               - parameter of the function
// OUTPUT
// point            - point of intersection
// RESULT
// Error status
*/</doc>
