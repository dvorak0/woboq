<dec f='opencv/modules/objdetect/src/_lsvm_distancetransform.h' l='132' type='int DistanceTransformTwoDimensionalProblem(const float * f, const int n, const int m, const float * coeff, float * distanceTransform, int * pointsX, int * pointsY)'/>
<def f='opencv/modules/objdetect/src/distancetransform.cpp' l='337' ll='383' type='int DistanceTransformTwoDimensionalProblem(const float * f, const int n, const int m, const float * coeff, float * distanceTransform, int * pointsX, int * pointsY)'/>
<doc f='opencv/modules/objdetect/src/distancetransform.cpp' l='311'>/*
// Decision of two dimensional problem generalized distance transform
// on the regular grid at all points
//      min{d2(y&apos; - y) + d4(y&apos; - y)(y&apos; - y) +
            min(d1(x&apos; - x) + d3(x&apos; - x)(x&apos; - x) + f(x&apos;,y&apos;))} (on x&apos;, y&apos;)
//
// API
// int DistanceTransformTwoDimensionalProblem(const float *f,
                                              const int n, const int m,
                                              const float coeff[4],
                                              float *distanceTransform,
                                              int *pointsX, int *pointsY);
// INPUT
// f                 - function on the regular grid
// n                 - number of rows
// m                 - number of columns
// coeff             - coefficients of optimizable function
                       coeff[0] = d1, coeff[1] = d2,
                       coeff[2] = d3, coeff[3] = d4
// OUTPUT
// distanceTransform - values of generalized distance transform
// pointsX           - arguments x&apos; that correspond to the optimal value
// pointsY           - arguments y&apos; that correspond to the optimal value
// RESULT
// Error status
*/</doc>
<doc f='opencv/modules/objdetect/src/_lsvm_distancetransform.h' l='106'>/*
// Decision of two dimensional problem generalized distance transform
// on the regular grid at all points
//      min{d2(y&apos; - y) + d4(y&apos; - y)(y&apos; - y) +
            min(d1(x&apos; - x) + d3(x&apos; - x)(x&apos; - x) + f(x&apos;,y&apos;))} (on x&apos;, y&apos;)
//
// API
// int DistanceTransformTwoDimensionalProblem(const F_type *f,
                                              const int n, const int m,
                                              const F_type coeff[4],
                                              F_type *distanceTransform,
                                              int *pointsX, int *pointsY);
// INPUT
// f                 - function on the regular grid
// n                 - number of rows
// m                 - number of columns
// coeff             - coefficients of optimizable function
                       coeff[0] = d1, coeff[1] = d2,
                       coeff[2] = d3, coeff[3] = d4
// OUTPUT
// distanceTransform - values of generalized distance transform
// pointsX           - arguments x&apos; that correspond to the optimal value
// pointsY           - arguments y&apos; that correspond to the optimal value
// RESULT
// Error status
*/</doc>
<use f='opencv/modules/objdetect/src/matching.cpp' l='391' u='c' c='_Z22filterDispositionLevelPK18CvLSVMFilterObjectPK16CvLSVMFeatureMapPPfPPiS8_'/>
<use f='opencv/modules/objdetect/src/matching.cpp' l='478' u='c' c='_Z25filterDispositionLevelFFTPK18CvLSVMFilterObjectPK14CvLSVMFftImagePPfPPiS8_'/>
