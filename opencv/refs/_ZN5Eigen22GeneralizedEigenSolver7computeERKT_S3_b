<use f='include/eigen3/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h' l='158' u='c' c='_ZN5Eigen22GeneralizedEigenSolverC1ERKT_S3_b'/>
<dec f='include/eigen3/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h' l='249' type='GeneralizedEigenSolver&lt;_MatrixType&gt; &amp; Eigen::GeneralizedEigenSolver::compute(const MatrixType &amp; A, const MatrixType &amp; B, bool computeEigenvectors = true)'/>
<def f='include/eigen3/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h' l='289' ll='337' type='GeneralizedEigenSolver&lt;MatrixType&gt; &amp; Eigen::GeneralizedEigenSolver::compute(const MatrixType &amp; A, const MatrixType &amp; B, bool computeEigenvectors = true)'/>
<doc f='include/eigen3/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h' l='226'>/** \brief Computes generalized eigendecomposition of given matrix.
      * 
      * \param[in]  A  Square matrix whose eigendecomposition is to be computed.
      * \param[in]  B  Square matrix whose eigendecomposition is to be computed.
      * \param[in]  computeEigenvectors  If true, both the eigenvectors and the
      *    eigenvalues are computed; if false, only the eigenvalues are
      *    computed. 
      * \returns    Reference to \c *this
      *
      * This function computes the eigenvalues of the real matrix \p matrix.
      * The eigenvalues() function can be used to retrieve them.  If 
      * \p computeEigenvectors is true, then the eigenvectors are also computed
      * and can be retrieved by calling eigenvectors().
      *
      * The matrix is first reduced to real generalized Schur form using the RealQZ
      * class. The generalized Schur decomposition is then used to compute the eigenvalues
      * and eigenvectors.
      *
      * The cost of the computation is dominated by the cost of the
      * generalized Schur decomposition.
      *
      * This method reuses of the allocated data in the GeneralizedEigenSolver object.
      */</doc>
<doc f='include/eigen3/Eigen/src/Eigenvalues/GeneralizedEigenSolver.h' l='278'>//template&lt;typename MatrixType&gt;
//typename GeneralizedEigenSolver&lt;MatrixType&gt;::EigenvectorsType GeneralizedEigenSolver&lt;MatrixType&gt;::eigenvectors() const
//{
//  eigen_assert(m_isInitialized &amp;&amp; &quot;EigenSolver is not initialized.&quot;);
//  eigen_assert(m_eigenvectorsOk &amp;&amp; &quot;The eigenvectors have not been computed together with the eigenvalues.&quot;);
//  Index n = m_eivec.cols();
//  EigenvectorsType matV(n,n);
//  // TODO
//  return matV;
//}</doc>
