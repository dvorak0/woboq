<inh f='opencv/modules/core/include/opencv2/core/core.hpp' l='1712' c='cv::Mat'/>
<def f='opencv/modules/core/include/opencv2/core/core.hpp' l='2829' ll='2966'/>
<doc f='opencv/modules/core/include/opencv2/core/core.hpp' l='2784'>/*!
 Template matrix class derived from Mat

 The class Mat_ is a &quot;thin&quot; template wrapper on top of cv::Mat. It does not have any extra data fields,
 nor it or cv::Mat have any virtual methods and thus references or pointers to these two classes
 can be safely converted one to another. But do it with care, for example:

 \code
 // create 100x100 8-bit matrix
 Mat M(100,100,CV_8U);
 // this will compile fine. no any data conversion will be done.
 Mat_&lt;float&gt;&amp; M1 = (Mat_&lt;float&gt;&amp;)M;
 // the program will likely crash at the statement below
 M1(99,99) = 1.f;
 \endcode

 While cv::Mat is sufficient in most cases, cv::Mat_ can be more convenient if you use a lot of element
 access operations and if you know matrix type at compile time.
 Note that cv::Mat::at\&lt;_Tp\&gt;(int y, int x) and cv::Mat_\&lt;_Tp\&gt;::operator ()(int y, int x) do absolutely the
 same thing and run at the same speed, but the latter is certainly shorter:

 \code
 Mat_&lt;double&gt; M(20,20);
 for(int i = 0; i &lt; M.rows; i++)
    for(int j = 0; j &lt; M.cols; j++)
       M(i,j) = 1./(i+j+1);
 Mat E, V;
 eigen(M,E,V);
 cout &lt;&lt; E.at&lt;double&gt;(0,0)/E.at&lt;double&gt;(M.rows-1,0);
 \endcode

 It is easy to use Mat_ for multi-channel images/matrices - just pass cv::Vec as cv::Mat_ template parameter:

 \code
 // allocate 320x240 color image and fill it with green (in RGB space)
 Mat_&lt;Vec3b&gt; img(240, 320, Vec3b(0,255,0));
 // now draw a diagonal white line
 for(int i = 0; i &lt; 100; i++)
     img(i,i)=Vec3b(255,255,255);
 // and now modify the 2nd (red) channel of each pixel
 for(int i = 0; i &lt; img.rows; i++)
    for(int j = 0; j &lt; img.cols; j++)
       img(i,j)[2] ^= (uchar)(i ^ j); // img(y,x)[c] accesses c-th channel of the pixel (x,y)
 \endcode
*/</doc>
<fun r='_ZN2cv4Mat_C1Ev'/>
<fun r='_ZN2cv4Mat_C1Eii'/>
<fun r='_ZN2cv4Mat_C1EiiRKT_'/>
<fun r='_ZN2cv4Mat_C1ENS_5Size_IiEE'/>
<fun r='_ZN2cv4Mat_C1ENS_5Size_IiEERKT_'/>
<fun r='_ZN2cv4Mat_C1EiPKi'/>
<fun r='_ZN2cv4Mat_C1EiPKiRKT_'/>
<fun r='_ZN2cv4Mat_C1ERKNS_3MatE'/>
<fun r='_ZN2cv4Mat_C1ERKNS_4Mat_IT_EE'/>
<fun r='_ZN2cv4Mat_C1EiiPT_m'/>
<fun r='_ZN2cv4Mat_C1EiPKiPT_PKm'/>
<fun r='_ZN2cv4Mat_C1ERKNS_4Mat_IT_EERKNS_5RangeES9_'/>
<fun r='_ZN2cv4Mat_C1ERKNS_4Mat_IT_EERKNS_5Rect_IiEE'/>
<fun r='_ZN2cv4Mat_C1ERKNS_4Mat_IT_EEPKNS_5RangeE'/>
<fun r='_ZN2cv4Mat_C1ERKNS_7MatExprE'/>
<fun r='_ZN2cv4Mat_C1ERKSt6vectorIT_SaIS2_EEb'/>
<fun r='_ZN2cv4Mat_C1ERKNS_3VecINS_8DataTypeIT_E12channel_typeEXT_EEEb'/>
<fun r='_ZN2cv4Mat_C1ERKNS_4MatxINS_8DataTypeIT_E12channel_typeEXT_EXT0_EEEb'/>
<fun r='_ZN2cv4Mat_C1ERKNS_6Point_INS_8DataTypeIT_E12channel_typeEEEb'/>
<fun r='_ZN2cv4Mat_C1ERKNS_7Point3_INS_8DataTypeIT_E12channel_typeEEEb'/>
<fun r='_ZN2cv4Mat_C1ERKNS_20MatCommaInitializer_IT_EE'/>
<fun r='_ZN2cv4Mat_aSERKNS_3MatE'/>
<fun r='_ZN2cv4Mat_aSERKNS_4Mat_IT_EE'/>
<fun r='_ZN2cv4Mat_aSERKT_'/>
<fun r='_ZN2cv4Mat_aSERKNS_7MatExprE'/>
<fun r='_ZN2cv4Mat_5beginEv'/>
<fun r='_ZN2cv4Mat_3endEv'/>
<fun r='_ZNK2cv4Mat_5beginEv'/>
<fun r='_ZNK2cv4Mat_3endEv'/>
<fun r='_ZN2cv4Mat_6createEii'/>
<fun r='_ZN2cv4Mat_6createENS_5Size_IiEE'/>
<fun r='_ZN2cv4Mat_6createEiPKi'/>
<fun r='_ZNK2cv4Mat_5crossERKNS_4Mat_IT_EE'/>
<fun r='_ZNK2cv4Mat_cvNS_4Mat_IT_EEEv'/>
<fun r='_ZNK2cv4Mat_3rowEi'/>
<fun r='_ZNK2cv4Mat_3colEi'/>
<fun r='_ZNK2cv4Mat_4diagEi'/>
<fun r='_ZNK2cv4Mat_5cloneEv'/>
<fun r='_ZNK2cv4Mat_8elemSizeEv'/>
<fun r='_ZNK2cv4Mat_9elemSize1Ev'/>
<fun r='_ZNK2cv4Mat_4typeEv'/>
<fun r='_ZNK2cv4Mat_5depthEv'/>
<fun r='_ZNK2cv4Mat_8channelsEv'/>
<fun r='_ZNK2cv4Mat_5step1Ei'/>
<fun r='_ZNK2cv4Mat_5stepTEi'/>
<fun r='_ZN2cv4Mat_5zerosEii'/>
<fun r='_ZN2cv4Mat_5zerosENS_5Size_IiEE'/>
<fun r='_ZN2cv4Mat_5zerosEiPKi'/>
<fun r='_ZN2cv4Mat_4onesEii'/>
<fun r='_ZN2cv4Mat_4onesENS_5Size_IiEE'/>
<fun r='_ZN2cv4Mat_4onesEiPKi'/>
<fun r='_ZN2cv4Mat_3eyeEii'/>
<fun r='_ZN2cv4Mat_3eyeENS_5Size_IiEE'/>
<fun r='_ZN2cv4Mat_9adjustROIEiiii'/>
<fun r='_ZNK2cv4Mat_clERKNS_5RangeES3_'/>
<fun r='_ZNK2cv4Mat_clERKNS_5Rect_IiEE'/>
<fun r='_ZNK2cv4Mat_clEPKNS_5RangeE'/>
<fun r='_ZN2cv4Mat_ixEi'/>
<fun r='_ZNK2cv4Mat_ixEi'/>
<fun r='_ZN2cv4Mat_clEPKi'/>
<fun r='_ZNK2cv4Mat_clEPKi'/>
<fun r='_ZN2cv4Mat_clERKNS_3VecIiXT_EEE'/>
<fun r='_ZNK2cv4Mat_clERKNS_3VecIiXT_EEE'/>
<fun r='_ZN2cv4Mat_clEi'/>
<fun r='_ZNK2cv4Mat_clEi'/>
<fun r='_ZN2cv4Mat_clEii'/>
<fun r='_ZNK2cv4Mat_clEii'/>
<fun r='_ZN2cv4Mat_clEiii'/>
<fun r='_ZNK2cv4Mat_clEiii'/>
<fun r='_ZN2cv4Mat_clENS_6Point_IiEE'/>
<fun r='_ZNK2cv4Mat_clENS_6Point_IiEE'/>
<fun r='_ZNK2cv4Mat_cvSt6vectorIT_SaIS2_EEEv'/>
<fun r='_ZNK2cv4Mat_cvNS_3VecINS_8DataTypeIT_E12channel_typeEXT_EEEEv'/>
<fun r='_ZNK2cv4Mat_cvNS_4MatxINS_8DataTypeIT_E12channel_typeEXT_EXT0_EEEEv'/>
<fun r='_ZN2cv4Mat_C1Ev'/>
<fun r='_ZN2cv4Mat_C1Eii'/>
<fun r='_ZN2cv4Mat_C1EiiRKT_'/>
<fun r='_ZN2cv4Mat_C1ENS_5Size_IiEE'/>
<fun r='_ZN2cv4Mat_C1ENS_5Size_IiEERKT_'/>
<fun r='_ZN2cv4Mat_C1EiPKi'/>
<fun r='_ZN2cv4Mat_C1EiPKiRKT_'/>
<fun r='_ZN2cv4Mat_C1EiPKiPT_PKm'/>
<fun r='_ZN2cv4Mat_C1ERKNS_4Mat_IT_EEPKNS_5RangeE'/>
<fun r='_ZN2cv4Mat_C1ERKNS_3MatE'/>
<fun r='_ZN2cv4Mat_C1ERKNS_4Mat_IT_EE'/>
<fun r='_ZN2cv4Mat_C1EiiPT_m'/>
<fun r='_ZN2cv4Mat_C1ERKNS_4Mat_IT_EERKNS_5RangeES9_'/>
<fun r='_ZN2cv4Mat_C1ERKNS_4Mat_IT_EERKNS_5Rect_IiEE'/>
<fun r='_ZN2cv4Mat_C1ERKNS_3VecINS_8DataTypeIT_E12channel_typeEXT_EEEb'/>
<fun r='_ZN2cv4Mat_C1ERKNS_4MatxINS_8DataTypeIT_E12channel_typeEXT_EXT0_EEEb'/>
<fun r='_ZN2cv4Mat_C1ERKNS_6Point_INS_8DataTypeIT_E12channel_typeEEEb'/>
<fun r='_ZN2cv4Mat_C1ERKNS_7Point3_INS_8DataTypeIT_E12channel_typeEEEb'/>
<fun r='_ZN2cv4Mat_C1ERKNS_20MatCommaInitializer_IT_EE'/>
<fun r='_ZN2cv4Mat_C1ERKSt6vectorIT_SaIS2_EEb'/>
<fun r='_ZN2cv4Mat_aSERKNS_3MatE'/>
<fun r='_ZN2cv4Mat_aSERKNS_4Mat_IT_EE'/>
<fun r='_ZN2cv4Mat_aSERKT_'/>
<fun r='_ZN2cv4Mat_6createEii'/>
<fun r='_ZN2cv4Mat_6createENS_5Size_IiEE'/>
<fun r='_ZN2cv4Mat_6createEiPKi'/>
<fun r='_ZNK2cv4Mat_5crossERKNS_4Mat_IT_EE'/>
<fun r='_ZNK2cv4Mat_cvNS_4Mat_IT_EEEv'/>
<fun r='_ZNK2cv4Mat_3rowEi'/>
<fun r='_ZNK2cv4Mat_3colEi'/>
<fun r='_ZNK2cv4Mat_4diagEi'/>
<fun r='_ZNK2cv4Mat_5cloneEv'/>
<fun r='_ZNK2cv4Mat_8elemSizeEv'/>
<fun r='_ZNK2cv4Mat_9elemSize1Ev'/>
<fun r='_ZNK2cv4Mat_4typeEv'/>
<fun r='_ZNK2cv4Mat_5depthEv'/>
<fun r='_ZNK2cv4Mat_8channelsEv'/>
<fun r='_ZNK2cv4Mat_5stepTEi'/>
<fun r='_ZNK2cv4Mat_5step1Ei'/>
<fun r='_ZN2cv4Mat_9adjustROIEiiii'/>
<fun r='_ZNK2cv4Mat_clERKNS_5RangeES3_'/>
<fun r='_ZNK2cv4Mat_clERKNS_5Rect_IiEE'/>
<fun r='_ZNK2cv4Mat_clEPKNS_5RangeE'/>
<fun r='_ZN2cv4Mat_ixEi'/>
<fun r='_ZNK2cv4Mat_ixEi'/>
<fun r='_ZN2cv4Mat_clEii'/>
<fun r='_ZNK2cv4Mat_clEii'/>
<fun r='_ZN2cv4Mat_clENS_6Point_IiEE'/>
<fun r='_ZNK2cv4Mat_clENS_6Point_IiEE'/>
<fun r='_ZN2cv4Mat_clEPKi'/>
<fun r='_ZNK2cv4Mat_clEPKi'/>
<fun r='_ZN2cv4Mat_clERKNS_3VecIiXT_EEE'/>
<fun r='_ZNK2cv4Mat_clERKNS_3VecIiXT_EEE'/>
<fun r='_ZN2cv4Mat_clEi'/>
<fun r='_ZNK2cv4Mat_clEi'/>
<fun r='_ZN2cv4Mat_clEiii'/>
<fun r='_ZNK2cv4Mat_clEiii'/>
<fun r='_ZNK2cv4Mat_cvSt6vectorIT_SaIS2_EEEv'/>
<fun r='_ZNK2cv4Mat_cvNS_3VecINS_8DataTypeIT_E12channel_typeEXT_EEEEv'/>
<fun r='_ZNK2cv4Mat_cvNS_4MatxINS_8DataTypeIT_E12channel_typeEXT_EXT0_EEEEv'/>
<fun r='_ZN2cv4Mat_C1ERKNS_7MatExprE'/>
<fun r='_ZN2cv4Mat_aSERKNS_7MatExprE'/>
<fun r='_ZN2cv4Mat_5zerosEii'/>
<fun r='_ZN2cv4Mat_5zerosENS_5Size_IiEE'/>
<fun r='_ZN2cv4Mat_4onesEii'/>
<fun r='_ZN2cv4Mat_4onesENS_5Size_IiEE'/>
<fun r='_ZN2cv4Mat_3eyeEii'/>
<fun r='_ZN2cv4Mat_3eyeENS_5Size_IiEE'/>
<fun r='_ZNK2cv4Mat_5beginEv'/>
<fun r='_ZNK2cv4Mat_3endEv'/>
<fun r='_ZN2cv4Mat_5beginEv'/>
<fun r='_ZN2cv4Mat_3endEv'/>
