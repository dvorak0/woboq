<dec f='include/eigen3/Eigen/src/Jacobi/Jacobi.h' l='65' type='bool Eigen::JacobiRotation::makeJacobi(const MatrixBase&lt;Derived&gt; &amp; , typename Derived::Index p, typename Derived::Index q)'/>
<def f='include/eigen3/Eigen/src/Jacobi/Jacobi.h' l='124' ll='129' type='bool Eigen::JacobiRotation::makeJacobi(const MatrixBase&lt;Derived&gt; &amp; m, typename Derived::Index p, typename Derived::Index q)'/>
<doc f='include/eigen3/Eigen/src/Jacobi/Jacobi.h' l='115'>/** Makes \c *this as a Jacobi rotation \c J such that applying \a J on both the right and left sides of the 2x2 selfadjoint matrix
  * \f$ B = \left ( \begin{array}{cc} \text{this}_{pp} &amp; \text{this}_{pq} \\ (\text{this}_{pq})^* &amp; \text{this}_{qq} \end{array} \right )\f$ yields
  * a diagonal matrix \f$ A = J^* B J \f$
  *
  * Example: \include Jacobi_makeJacobi.cpp
  * Output: \verbinclude Jacobi_makeJacobi.out
  *
  * \sa JacobiRotation::makeJacobi(RealScalar, Scalar, RealScalar), MatrixBase::applyOnTheLeft(), MatrixBase::applyOnTheRight()
  */</doc>
