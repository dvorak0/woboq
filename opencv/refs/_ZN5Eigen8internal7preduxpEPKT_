<def f='include/eigen3/Eigen/src/Core/GenericPacketMath.h' l='196' ll='197' type='Packet Eigen::internal::preduxp(const Packet * vecs)'/>
<def f='include/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h' l='392' ll='395' type='Packet4f Eigen::internal::preduxp(const Packet4f * vecs)'/>
<def f='include/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h' l='396' ll='399' type='Packet2d Eigen::internal::preduxp(const Packet2d * vecs)'/>
<def f='include/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h' l='458' ll='470' type='Packet4i Eigen::internal::preduxp(const Packet4i * vecs)'/>
<def f='include/eigen3/Eigen/src/Core/arch/SSE/Complex.h' l='134' ll='137' type='Eigen::internal::Packet2cf Eigen::internal::preduxp(const Eigen::internal::Packet2cf * vecs)'/>
<def f='include/eigen3/Eigen/src/Core/arch/SSE/Complex.h' l='333' ll='336' type='Eigen::internal::Packet1cd Eigen::internal::preduxp(const Eigen::internal::Packet1cd * vecs)'/>
<doc f='include/eigen3/Eigen/src/Core/GenericPacketMath.h' l='195'>/** \internal \returns a packet where the element i contains the sum of the packet of \a vec[i] */</doc>
<doc f='include/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h' l='391'>// TODO implement SSE2 versions as well as integer versions</doc>
