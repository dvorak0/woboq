<dec f='opencv/modules/ts/include/opencv2/ts/ts_gtest.h' l='7210' type='testing::AssertionResult testing::internal::EqFailure(const char * expected_expression, const char * actual_expression, const std::string &amp; expected_value, const std::string &amp; actual_value, bool ignoring_case)'/>
<use f='opencv/modules/ts/include/opencv2/ts/ts_gtest.h' l='19181' u='c' c='_ZN7testing8internal24CmpHelperFloatingPointEQEPKcS2_T_S3_'/>
<doc f='opencv/modules/ts/include/opencv2/ts/ts_gtest.h' l='7192'>// c&apos;tor and d&apos;tor.  Therefore it doesn&apos;t
                            // need to be used otherwise.

// Constructs and returns the message for an equality assertion
// (e.g. ASSERT_EQ, EXPECT_STREQ, etc) failure.
//
// The first four parameters are the expressions used in the assertion
// and their values, as strings.  For example, for ASSERT_EQ(foo, bar)
// where foo is 5 and bar is 6, we have:
//
//   expected_expression: &quot;foo&quot;
//   actual_expression:   &quot;bar&quot;
//   expected_value:      &quot;5&quot;
//   actual_value:        &quot;6&quot;
//
// The ignoring_case parameter is true iff the assertion is a
// *_STRCASEEQ*.  When it&apos;s true, the string &quot; (ignoring case)&quot; will
// be inserted into the message.</doc>
<def f='opencv/modules/ts/src/ts_gtest.cpp' l='2500' ll='2520' type='testing::AssertionResult testing::internal::EqFailure(const char * expected_expression, const char * actual_expression, const std::string &amp; expected_value, const std::string &amp; actual_value, bool ignoring_case)'/>
<use f='opencv/modules/ts/src/ts_gtest.cpp' l='2622' u='c' c='_ZN7testing8internal11CmpHelperEQEPKcS2_xx'/>
<use f='opencv/modules/ts/src/ts_gtest.cpp' l='2672' u='c' c='_ZN7testing8internal14CmpHelperSTREQEPKcS2_S2_S2_'/>
<use f='opencv/modules/ts/src/ts_gtest.cpp' l='2688' u='c' c='_ZN7testing8internal18CmpHelperSTRCASEEQEPKcS2_S2_S2_'/>
<use f='opencv/modules/ts/src/ts_gtest.cpp' l='3054' u='c' c='_ZN7testing8internal14CmpHelperSTREQEPKcS2_PKwS4_'/>
<doc f='opencv/modules/ts/src/ts_gtest.cpp' l='2485'>// Constructs and returns the message for an equality assertion
// (e.g. ASSERT_EQ, EXPECT_STREQ, etc) failure.
//
// The first four parameters are the expressions used in the assertion
// and their values, as strings.  For example, for ASSERT_EQ(foo, bar)
// where foo is 5 and bar is 6, we have:
//
//   expected_expression: &quot;foo&quot;
//   actual_expression:   &quot;bar&quot;
//   expected_value:      &quot;5&quot;
//   actual_value:        &quot;6&quot;
//
// The ignoring_case parameter is true iff the assertion is a
// *_STRCASEEQ*.  When it&apos;s true, the string &quot; (ignoring case)&quot; will
// be inserted into the message.</doc>
