<dec f='opencv/modules/contrib/src/basicretinafilter.hpp' l='170' type='const std::valarray&lt;float&gt; &amp; cv::BasicRetinaFilter::runFilter_LPfilter(const std::valarray&lt;float&gt; &amp; inputFrame, const unsigned int filterIndex = 0)'/>
<def f='opencv/modules/contrib/src/basicretinafilter.cpp' l='383' ll='387' type='const std::valarray&lt;float&gt; &amp; cv::BasicRetinaFilter::runFilter_LPfilter(const std::valarray&lt;float&gt; &amp; inputFrame, const unsigned int filterIndex = 0)'/>
<doc f='opencv/modules/contrib/src/basicretinafilter.cpp' l='380'>///////////////////////////////////////////////////////////////////////
/// Spatio temporal Low Pass filter functions
// run LP filter and save result in the basic retina element buffer</doc>
<doc f='opencv/modules/contrib/src/basicretinafilter.hpp' l='164'>/**
        *  low pass filter call and run (models the homogeneous cells network at the retina level, for example horizontal cells or photoreceptors)
        * @param inputFrame: the input image to be processed
        * @param filterIndex: the offset which specifies the parameter set that should be used for the filtering
        * @return the processed image, the output is reachable later by using function getOutput()
        */</doc>
<doc f='opencv/modules/contrib/src/basicretinafilter.hpp' l='170'>// run the LP filter for a new frame input and save result in _filterOutput</doc>
