<dec f='opencv/modules/calib3d/include/opencv2/calib3d/calib3d.hpp' l='285' type='void cvStereoRectify(const CvMat * camera_matrix1, const CvMat * camera_matrix2, const CvMat * dist_coeffs1, const CvMat * dist_coeffs2, CvSize image_size, const CvMat * R, const CvMat * T, CvMat * R1, CvMat * R2, CvMat * P1, CvMat * P2, CvMat * Q = 0, int flags = 1024, double alpha = -1, CvSize new_image_size = cvSize(0, 0), CvRect * valid_pix_ROI1 = 0, CvRect * valid_pix_ROI2 = 0)'/>
<doc f='opencv/modules/calib3d/include/opencv2/calib3d/calib3d.hpp' l='283'>/* Computes 3D rotations (+ optional shift) for each camera coordinate system to make both
   views parallel (=&gt; to make all the epipolar lines horizontal or vertical) */</doc>
<def f='opencv/modules/calib3d/src/calibration.cpp' l='2333' ll='2540' type='void cvStereoRectify(const CvMat * _cameraMatrix1, const CvMat * _cameraMatrix2, const CvMat * _distCoeffs1, const CvMat * _distCoeffs2, CvSize imageSize, const CvMat * matR, const CvMat * matT, CvMat * _R1, CvMat * _R2, CvMat * _P1, CvMat * _P2, CvMat * matQ = 0, int flags = 1024, double alpha = -1, CvSize newImgSize = cvSize(0, 0), CvRect * roi1 = 0, CvRect * roi2 = 0)'/>
<use f='opencv/modules/calib3d/src/calibration.cpp' l='3562' u='c' c='_ZN2cv13stereoRectifyERKNS_11_InputArrayES2_S2_S2_NS_5Size_IiEES2_S2_RKNS_12_OutputArrayES7_S7_S7_S7_idS4_PNS_5Rect_IiEESA_'/>
<use f='opencv/modules/calib3d/test/test_cameracalibration.cpp' l='1755' u='c' c='_ZN26CV_StereoCalibrationTest_C7rectifyERKN2cv3MatES3_S3_S3_NS0_5Size_IiEES3_S3_RS1_S6_S6_S6_S6_dS5_PNS0_5Rect_IiEES9_i'/>
