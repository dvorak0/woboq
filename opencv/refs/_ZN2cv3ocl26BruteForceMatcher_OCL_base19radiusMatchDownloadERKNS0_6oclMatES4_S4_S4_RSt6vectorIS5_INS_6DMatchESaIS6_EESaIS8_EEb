<dec f='opencv/modules/ocl/include/opencv2/ocl/ocl.hpp' l='1315' type='static void cv::ocl::BruteForceMatcher_OCL_base::radiusMatchDownload(const cv::ocl::oclMat &amp; trainIdx, const cv::ocl::oclMat &amp; imgIdx, const cv::ocl::oclMat &amp; distance, const cv::ocl::oclMat &amp; nMatches, std::vector&lt;std::vector&lt;DMatch&gt; &gt; &amp; matches, bool compactResult = false)'/>
<doc f='opencv/modules/ocl/include/opencv2/ocl/ocl.hpp' l='1310'>// Download trainIdx, imgIdx, nMatches and distance and convert it to vector with DMatch.
            // matches will be sorted in increasing order of distances.
            // compactResult is used when mask is not empty. If compactResult is false matches
            // vector will have the same size as queryDescriptors rows. If compactResult is true
            // matches vector will not contain matches for fully masked out query descriptors.</doc>
<def f='opencv/modules/ocl/src/brute_force_matcher.cpp' l='1142' ll='1154' type='static void cv::ocl::BruteForceMatcher_OCL_base::radiusMatchDownload(const cv::ocl::oclMat &amp; trainIdx, const cv::ocl::oclMat &amp; imgIdx, const cv::ocl::oclMat &amp; distance, const cv::ocl::oclMat &amp; nMatches, vector&lt;vector&lt;cv::DMatch&gt; &gt; &amp; matches, bool compactResult = false)'/>
<use f='opencv/modules/ocl/src/brute_force_matcher.cpp' l='1213' u='c' c='_ZN2cv3ocl26BruteForceMatcher_OCL_base11radiusMatchERKNS0_6oclMatERSt6vectorIS5_INS_6DMatchESaIS6_EESaIS8_EEfRKS5_IS2_SaIS2_EEb'/>
