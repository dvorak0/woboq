<dec f='opencv/modules/objdetect/src/_lsvm_fft.h' l='77' type='int fftInverse2d(float * x_in, float * x_out, int numRows, int numColls)'/>
<def f='opencv/modules/objdetect/src/fft.cpp' l='226' ll='246' type='int fftInverse2d(float * x_in, float * x_out, int numRows, int numColls)'/>
<doc f='opencv/modules/objdetect/src/fft.cpp' l='210'>/*
// Inverse 2-dimensional FFT
//
// API
// int fftInverse2d(float *x_in, float *x_out, int numRows, int numColls);
// INPUT
// x_in              - Fourier image of matrix (contains (2 * numRows * numColls)
                       elements in order Re(x_in[0][0]), Im(x_in[0][0]),
                       Re(x_in[0][1]), Im(x_in[0][1]) and etc.)
// numRows           - number of rows
// numColls          - number of collumns
// OUTPUT
// x_out             - initial signal (matrix, launched by rows)
// RESULT
// Error status
*/</doc>
<doc f='opencv/modules/objdetect/src/_lsvm_fft.h' l='61'>/*
// Inverse 2-dimensional FFT
//
// API
// int fftInverse2d(float *x_in, float *x_out, int numRows, int numColls);
// INPUT
// x_in              - Fourier image of matrix (contains (2 * numRows * numColls)
                       elements in order Re(x_in[0][0]), Im(x_in[0][0]),
                       Re(x_in[0][1]), Im(x_in[0][1]) and etc.)
// numRows           - number of rows
// numColls          - number of collumns
// OUTPUT
// x_out             - initial signal (matrix, launched by rows)
// RESULT
// Error status
*/</doc>
<use f='opencv/modules/objdetect/src/matching.cpp' l='294' u='c' c='_Z13convFFTConv2dPK14CvLSVMFftImageS1_iiPPf'/>
