<def f='opencv/modules/flann/include/opencv2/flann/allocator.h' l='71' type='const size_t'/>
<use f='opencv/modules/flann/include/opencv2/flann/allocator.h' l='131' u='r' c='_ZN7cvflann15PooledAllocator14allocateMemoryEi'/>
<use f='opencv/modules/flann/include/opencv2/flann/allocator.h' l='131' u='r' c='_ZN7cvflann15PooledAllocator14allocateMemoryEi'/>
<use f='opencv/modules/flann/include/opencv2/flann/allocator.h' l='141' u='r' c='_ZN7cvflann15PooledAllocator14allocateMemoryEi'/>
<use f='opencv/modules/flann/include/opencv2/flann/allocator.h' l='142' u='r' c='_ZN7cvflann15PooledAllocator14allocateMemoryEi'/>
<doc f='opencv/modules/flann/include/opencv2/flann/allocator.h' l='56'>/**
 * Pooled storage allocator
 *
 * The following routines allow for the efficient allocation of storage in
 * small chunks from a specified pool.  Rather than allowing each structure
 * to be freed individually, an entire pool of storage is freed at once.
 * This method has two advantages over just using malloc() and free().  First,
 * it is far more efficient for allocating small objects, as there is
 * no overhead for remembering all the information needed to free each
 * object or consolidating fragmented memory.  Second, the decision about
 * how long to keep an object is made at the time of allocation, and there
 * is no need to track down all the objects to free them.
 *
 */</doc>
