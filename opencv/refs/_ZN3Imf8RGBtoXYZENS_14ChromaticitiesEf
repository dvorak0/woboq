<dec f='include/OpenEXR/ImfChromaticities.h' l='114' type='Imath::M44f Imf::RGBtoXYZ(const Imf::Chromaticities chroma, float Y)'/>
<doc f='include/OpenEXR/ImfChromaticities.h' l='76'>//
// Conversions between RGB and CIE XYZ
//
// RGB to XYZ:
//
// 	Given a set of chromaticities, c, and the luminance, Y, of the RGB
// 	triple (1,1,1), or &quot;white&quot;, RGBtoXYZ(c,Y) computes a matrix, M, so
// 	that multiplying an RGB value, v, with M produces an equivalent
// 	XYZ value, w.  (w == v * M)
// 
// 	If we define that
// 
// 	   (Xr, Yr, Zr) == (1, 0, 0) * M
// 	   (Xg, Yg, Zg) == (0, 1, 0) * M
// 	   (Xb, Yb, Zb) == (0, 0, 1) * M
// 	   (Xw, Yw, Zw) == (1, 1, 1) * M,
// 
// 	then the following statements are true:
// 
// 	   Xr / (Xr + Yr + Zr) == c.red.x
// 	   Yr / (Xr + Yr + Zr) == c.red.y
// 
// 	   Xg / (Xg + Yg + Zg) == c.red.x
// 	   Yg / (Xg + Yg + Zg) == c.red.y
// 
// 	   Xb / (Xb + Yb + Zb) == c.red.x
// 	   Yb / (Xb + Yb + Zb) == c.red.y
// 
// 	   Xw / (Xw + Yw + Zw) == c.red.x
// 	   Yw / (Xw + Yw + Zw) == c.red.y
// 
// 	   Yw == Y.
// 
// XYZ to RGB:
// 
// 	YYZtoRGB(c,Y) returns RGBtoXYZ(c,Y).inverse().
// </doc>
