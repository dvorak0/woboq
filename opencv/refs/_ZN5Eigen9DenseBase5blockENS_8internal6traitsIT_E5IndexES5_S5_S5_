<def f='include/eigen3/Eigen/src/plugins/BlockMethods.h' l='56' ll='59' type='Block&lt;Derived&gt; Eigen::DenseBase::block(Index startRow, Index startCol, Index blockRows, Index blockCols)'/>
<def f='include/eigen3/Eigen/src/plugins/BlockMethods.h' l='688' ll='692' type='Block&lt;Derived, BlockRows, BlockCols&gt; Eigen::DenseBase::block(Index startRow, Index startCol, Index blockRows, Index blockCols)'/>
<doc f='include/eigen3/Eigen/src/plugins/BlockMethods.h' l='40'>/** \returns a dynamic-size expression of a block in *this.
  *
  * \param startRow the first row in the block
  * \param startCol the first column in the block
  * \param blockRows the number of rows in the block
  * \param blockCols the number of columns in the block
  *
  * Example: \include MatrixBase_block_int_int_int_int.cpp
  * Output: \verbinclude MatrixBase_block_int_int_int_int.out
  *
  * \note Even though the returned expression has dynamic size, in the case
  * when it is applied to a fixed-size matrix, it inherits a fixed maximal size,
  * which means that evaluating it does not cause a dynamic memory allocation.
  *
  * \sa class Block, block(Index,Index)
  */</doc>
