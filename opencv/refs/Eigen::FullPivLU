<def f='include/eigen3/Eigen/src/LU/FullPivLU.h' l='45' ll='384'/>
<doc f='include/eigen3/Eigen/src/LU/FullPivLU.h' l='15'>/** \ingroup LU_Module
  *
  * \class FullPivLU
  *
  * \brief LU decomposition of a matrix with complete pivoting, and related features
  *
  * \param MatrixType the type of the matrix of which we are computing the LU decomposition
  *
  * This class represents a LU decomposition of any matrix, with complete pivoting: the matrix A
  * is decomposed as A = PLUQ where L is unit-lower-triangular, U is upper-triangular, and P and Q
  * are permutation matrices. This is a rank-revealing LU decomposition. The eigenvalues (diagonal
  * coefficients) of U are sorted in such a way that any zeros are at the end.
  *
  * This decomposition provides the generic approach to solving systems of linear equations, computing
  * the rank, invertibility, inverse, kernel, and determinant.
  *
  * This LU decomposition is very stable and well tested with large matrices. However there are use cases where the SVD
  * decomposition is inherently more stable and/or flexible. For example, when computing the kernel of a matrix,
  * working with the SVD allows to select the smallest singular values of the matrix, something that
  * the LU decomposition doesn&apos;t see.
  *
  * The data of the LU decomposition can be directly accessed through the methods matrixLU(),
  * permutationP(), permutationQ().
  *
  * As an exemple, here is how the original matrix can be retrieved:
  * \include class_FullPivLU.cpp
  * Output: \verbinclude class_FullPivLU.out
  *
  * \sa MatrixBase::fullPivLu(), MatrixBase::determinant(), MatrixBase::inverse()
  */</doc>
<fun r='_ZN5Eigen9FullPivLUC1Ev'/>
<fun r='_ZN5Eigen9FullPivLUC1ENT_5IndexES2_'/>
<fun r='_ZN5Eigen9FullPivLUC1ERKT_'/>
<fun r='_ZN5Eigen9FullPivLU7computeERKT_'/>
<fun r='_ZNK5Eigen9FullPivLU8matrixLUEv'/>
<fun r='_ZNK5Eigen9FullPivLU13nonzeroPivotsEv'/>
<fun r='_ZNK5Eigen9FullPivLU8maxPivotEv'/>
<fun r='_ZNK5Eigen9FullPivLU12permutationPEv'/>
<fun r='_ZNK5Eigen9FullPivLU12permutationQEv'/>
<fun r='_ZNK5Eigen9FullPivLU6kernelEv'/>
<fun r='_ZNK5Eigen9FullPivLU5imageERKT_'/>
<fun r='_ZNK5Eigen9FullPivLU5solveERKNS_10MatrixBaseIT_EE'/>
<fun r='_ZNK5Eigen9FullPivLU11determinantEv'/>
<fun r='_ZN5Eigen9FullPivLU12setThresholdERKNS_9NumTraitsINT_6ScalarEE4RealE'/>
<fun r='_ZN5Eigen9FullPivLU12setThresholdENS_9Default_tE'/>
<fun r='_ZNK5Eigen9FullPivLU9thresholdEv'/>
<fun r='_ZNK5Eigen9FullPivLU4rankEv'/>
<fun r='_ZNK5Eigen9FullPivLU17dimensionOfKernelEv'/>
<fun r='_ZNK5Eigen9FullPivLU11isInjectiveEv'/>
<fun r='_ZNK5Eigen9FullPivLU12isSurjectiveEv'/>
<fun r='_ZNK5Eigen9FullPivLU12isInvertibleEv'/>
<fun r='_ZNK5Eigen9FullPivLU7inverseEv'/>
<fun r='_ZNK5Eigen9FullPivLU19reconstructedMatrixEv'/>
<fun r='_ZNK5Eigen9FullPivLU4rowsEv'/>
<fun r='_ZNK5Eigen9FullPivLU4colsEv'/>
<mbr r='Eigen::FullPivLU::m_lu' t='MatrixType'/>
<mbr r='Eigen::FullPivLU::m_p' t='PermutationPType'/>
<mbr r='Eigen::FullPivLU::m_q' t='PermutationQType'/>
<mbr r='Eigen::FullPivLU::m_rowsTranspositions' t='IntColVectorType'/>
<mbr r='Eigen::FullPivLU::m_colsTranspositions' t='IntRowVectorType'/>
<mbr r='Eigen::FullPivLU::m_det_pq' t='Index'/>
<mbr r='Eigen::FullPivLU::m_nonzero_pivots' t='Index'/>
<mbr r='Eigen::FullPivLU::m_maxpivot' t='RealScalar'/>
<mbr r='Eigen::FullPivLU::m_prescribedThreshold' t='RealScalar'/>
<mbr r='Eigen::FullPivLU::m_isInitialized' t='bool'/>
<mbr r='Eigen::FullPivLU::m_usePrescribedThreshold' t='bool'/>
<fun r='_ZN5Eigen9FullPivLUC1Ev'/>
<fun r='_ZN5Eigen9FullPivLUC1ENT_5IndexES2_'/>
<fun r='_ZN5Eigen9FullPivLUC1ERKT_'/>
<fun r='_ZN5Eigen9FullPivLU7computeERKT_'/>
<fun r='_ZNK5Eigen9FullPivLU11determinantEv'/>
<fun r='_ZNK5Eigen9FullPivLU19reconstructedMatrixEv'/>
