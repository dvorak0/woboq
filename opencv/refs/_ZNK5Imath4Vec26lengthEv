<dec f='include/OpenEXR/ImathVec.h' l='216' type='T Imath::Vec2::length() const'/>
<dec f='include/OpenEXR/ImathVec.h' l='488' type='short Imath::Vec2&lt;short&gt;::length() const'/>
<dec f='include/OpenEXR/ImathVec.h' l='512' type='int Imath::Vec2&lt;int&gt;::length() const'/>
<def f='include/OpenEXR/ImathVec.h' l='876' ll='881' type='T Imath::Vec2::length() const'/>
<use f='include/OpenEXR/ImathVec.h' l='894' u='c' c='_ZN5Imath4Vec29normalizeEv'/>
<use f='include/OpenEXR/ImathVec.h' l='909' u='c' c='_ZN5Imath4Vec212normalizeExcEv'/>
<use f='include/OpenEXR/ImathVec.h' l='924' u='c' c='_ZN5Imath4Vec216normalizeNonNullEv'/>
<use f='include/OpenEXR/ImathVec.h' l='934' u='c' c='_ZNK5Imath4Vec210normalizedEv'/>
<use f='include/OpenEXR/ImathVec.h' l='946' u='c' c='_ZNK5Imath4Vec213normalizedExcEv'/>
<use f='include/OpenEXR/ImathVec.h' l='959' u='c' c='_ZNK5Imath4Vec217normalizedNonNullEv'/>
<doc f='include/OpenEXR/ImathVec.h' l='207'>//----------------------------------------------------------------
    // Length and normalization:  If v.length() is 0.0, v.normalize()
    // and v.normalized() produce a null vector; v.normalizeExc() and
    // v.normalizedExc() throw a NullVecExc.
    // v.normalizeNonNull() and v.normalizedNonNull() are slightly
    // faster than the other normalization routines, but if v.length()
    // is 0.0, the result is undefined.
    //----------------------------------------------------------------</doc>
<doc f='include/OpenEXR/ImathVec.h' l='481'>//-------------------------------------------------------------------
// Specializations for Vec2&lt;short&gt;, Vec2&lt;int&gt;, Vec3&lt;short&gt;, Vec3&lt;int&gt;
//-------------------------------------------------------------------

// Vec2&lt;short&gt;</doc>
<doc f='include/OpenEXR/ImathVec.h' l='509'>// Vec2&lt;int&gt;</doc>
