<dec f='opencv/modules/ts/src/ts_gtest.cpp' l='1040' type='std::string testing::internal::UnitTestImpl::CurrentOsStackTraceExceptTop(int skip_count)'/>
<use f='opencv/modules/ts/src/ts_gtest.cpp' l='1864' u='c' c='_ZNK7testing8internal12AssertHelperaSERKNS_7MessageE'/>
<def f='opencv/modules/ts/src/ts_gtest.cpp' l='2274' ll='2277' type='std::string testing::internal::UnitTestImpl::CurrentOsStackTraceExceptTop(int skip_count)'/>
<use f='opencv/modules/ts/src/ts_gtest.cpp' l='6153' u='c' c='_ZN7testing8internal31GetCurrentOsStackTraceExceptTopEPNS_8UnitTestEi'/>
<doc f='opencv/modules/ts/src/ts_gtest.cpp' l='1030'>// Returns the current OS stack trace as an std::string.
  //
  // The maximum number of stack frames to be included is specified by
  // the gtest_stack_trace_depth flag.  The skip_count parameter
  // specifies the number of top frames to be skipped, which doesn&apos;t
  // count against the number of frames to be included.
  //
  // For example, if Foo() calls Bar(), which in turn calls
  // CurrentOsStackTraceExceptTop(1), Foo() will be included in the
  // trace but Bar() and CurrentOsStackTraceExceptTop() won&apos;t.</doc>
<doc f='opencv/modules/ts/src/ts_gtest.cpp' l='2264'>// Returns the current OS stack trace as an std::string.
//
// The maximum number of stack frames to be included is specified by
// the gtest_stack_trace_depth flag.  The skip_count parameter
// specifies the number of top frames to be skipped, which doesn&apos;t
// count against the number of frames to be included.
//
// For example, if Foo() calls Bar(), which in turn calls
// CurrentOsStackTraceExceptTop(1), Foo() will be included in the
// trace but Bar() and CurrentOsStackTraceExceptTop() won&apos;t.</doc>
