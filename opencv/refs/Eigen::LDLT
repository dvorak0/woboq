<def f='include/eigen3/Eigen/src/Cholesky/LDLT.h' l='45' ll='240'/>
<doc f='include/eigen3/Eigen/src/Cholesky/LDLT.h' l='22'>/** \ingroup Cholesky_Module
  *
  * \class LDLT
  *
  * \brief Robust Cholesky decomposition of a matrix with pivoting
  *
  * \param MatrixType the type of the matrix of which to compute the LDL^T Cholesky decomposition
  * \param UpLo the triangular part that will be used for the decompositon: Lower (default) or Upper.
  *             The other triangular part won&apos;t be read.
  *
  * Perform a robust Cholesky decomposition of a positive semidefinite or negative semidefinite
  * matrix \f$ A \f$ such that \f$ A =  P^TLDL^*P \f$, where P is a permutation matrix, L
  * is lower triangular with a unit diagonal and D is a diagonal matrix.
  *
  * The decomposition uses pivoting to ensure stability, so that L will have
  * zeros in the bottom right rank(A) - n submatrix. Avoiding the square root
  * on D also stabilizes the computation.
  *
  * Remember that Cholesky decompositions are not rank-revealing. Also, do not use a Cholesky
  * decomposition to determine whether a system of equations has a solution.
  *
  * \sa MatrixBase::ldlt(), class LLT
  */</doc>
<fun r='_ZN5Eigen4LDLTC1Ev'/>
<fun r='_ZN5Eigen4LDLTC1ENT_5IndexE'/>
<fun r='_ZN5Eigen4LDLTC1ERKT_'/>
<fun r='_ZN5Eigen4LDLT7setZeroEv'/>
<fun r='_ZNK5Eigen4LDLT7matrixUEv'/>
<fun r='_ZNK5Eigen4LDLT7matrixLEv'/>
<fun r='_ZNK5Eigen4LDLT15transpositionsPEv'/>
<fun r='_ZNK5Eigen4LDLT7vectorDEv'/>
<fun r='_ZNK5Eigen4LDLT10isPositiveEv'/>
<fun r='_ZNK5Eigen4LDLT10isNegativeEv'/>
<fun r='_ZNK5Eigen4LDLT5solveERKNS_10MatrixBaseIT_EE'/>
<fun r='_ZNK5Eigen4LDLT12solveInPlaceERNS_10MatrixBaseIT_EE'/>
<fun r='_ZN5Eigen4LDLT7computeERKT_'/>
<fun r='_ZN5Eigen4LDLT10rankUpdateERKNS_10MatrixBaseIT_EERKNS_9NumTraitsINT_6ScalarEE4RealE'/>
<fun r='_ZNK5Eigen4LDLT10matrixLDLTEv'/>
<fun r='_ZNK5Eigen4LDLT19reconstructedMatrixEv'/>
<fun r='_ZNK5Eigen4LDLT4rowsEv'/>
<fun r='_ZNK5Eigen4LDLT4colsEv'/>
<fun r='_ZNK5Eigen4LDLT4infoEv'/>
<mbr r='Eigen::LDLT::m_matrix' t='MatrixType'/>
<mbr r='Eigen::LDLT::m_transpositions' t='TranspositionType'/>
<mbr r='Eigen::LDLT::m_temporary' t='TmpMatrixType'/>
<mbr r='Eigen::LDLT::m_sign' t='int'/>
<mbr r='Eigen::LDLT::m_isInitialized' t='bool'/>
<fun r='_ZN5Eigen4LDLT7computeERKT_'/>
<fun r='_ZN5Eigen4LDLT10rankUpdateERKNS_10MatrixBaseIT_EERKNS_9NumTraitsINT_6ScalarEE4RealE'/>
<fun r='_ZNK5Eigen4LDLT12solveInPlaceERNS_10MatrixBaseIT_EE'/>
<fun r='_ZNK5Eigen4LDLT19reconstructedMatrixEv'/>
