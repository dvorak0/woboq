<dec f='include/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h' l='149' type='void Eigen::MatrixFunction&lt;type-parameter-0-0, type-parameter-0-1, 1&gt;::partitionEigenvalues()'/>
<use f='include/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h' l='205' u='c' c='_ZN5Eigen14MatrixFunctionIT_T0_Li1EE7computeERT_'/>
<def f='include/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h' l='235' ll='266' type='void Eigen::MatrixFunction&lt;type-parameter-0-0, type-parameter-0-1, 1&gt;::partitionEigenvalues()'/>
<doc f='include/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h' l='224'>/** \brief Partition eigenvalues in clusters of ei&apos;vals close to each other
  * 
  * This function computes #m_clusters. This is a partition of the
  * eigenvalues of #m_T in clusters, such that
  * # Any eigenvalue in a certain cluster is at most separation() away
  *   from another eigenvalue in the same cluster.
  * # The distance between two eigenvalues in different clusters is
  *   more than separation().
  * The implementation follows Algorithm 4.1 in the paper of Davies
  * and Higham. 
  */</doc>
