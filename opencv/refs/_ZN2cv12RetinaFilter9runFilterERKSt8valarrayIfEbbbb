<dec f='opencv/modules/contrib/src/retinafilter.hpp' l='166' type='bool cv::RetinaFilter::runFilter(const std::valarray&lt;float&gt; &amp; imageInput, const bool useAdaptiveFiltering = true, const bool processRetinaParvoMagnoMapping = false, const bool useColorMode = false, const bool inputIsColorMultiplexed = false)'/>
<use f='opencv/modules/contrib/src/retina.cpp' l='313' u='c' c='_ZN2cv6Retina3runERKNS_3MatE'/>
<doc f='opencv/modules/contrib/src/retinafilter.hpp' l='156'>/**
    * run the initilized retina filter, after this call all retina outputs are updated
    * @param imageInput: image input buffer, can be grayscale or RGB image respecting the size specified at the constructor level
    * @param useAdaptiveFiltering: set true if you want to use adaptive color demultilexing (solve some color artefact problems), see RetinaColor for citation references
    * @param processRetinaParvoMagnoMapping: tels if the main outputs takes into account the mapping of the Parvo and Magno channels on the retina (centred parvo (fovea) and magno outside (parafovea))
    * @param useColorMode: color information is used if true, warning, if input is only gray level, a buffer overflow error will occur
    -&gt; note that if color mode is activated and processRetinaParvoMagnoMapping==true, then the demultiplexed color frame (accessible throw getColorOutput() will be a color contours frame in the fovea and gray level moving contours outside
    @param inputIsColorMultiplexed: set trus if the input data is a multiplexed color image (using Bayer sampling for example), the color sampling method must correspond to the RETINA_COLORSAMPLINGMETHOD passed at constructor!
    * @return true if process ran well, false in case of failure
    */</doc>
<def f='opencv/modules/contrib/src/retinafilter.cpp' l='262' ll='347' type='bool cv::RetinaFilter::runFilter(const std::valarray&lt;float&gt; &amp; imageInput, const bool useAdaptiveFiltering = true, const bool processRetinaParvoMagnoMapping = false, const bool useColorMode = false, const bool inputIsColorMultiplexed = false)'/>
<doc f='opencv/modules/contrib/src/retinafilter.cpp' l='261'>// main function that runs the filter for a given input frame</doc>
