<dec f='include/python2.7/objimpl.h' l='97' type='void * PyObject_Malloc(size_t )'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='1115' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='1238' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='1239' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='1240' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='1241' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='1306' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='1337' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='2188' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='2219' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='2249' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='2280' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='2289' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='2464' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='2472' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='2483' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='2491' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='2505' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='2518' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='2526' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='2533' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='2540' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='2575' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='2670' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='2689' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='2704' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='2722' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='2739' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='2756' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='2824' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='2852' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='2912' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='2949' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='2960' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='3021' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='3035' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='3228' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='3257' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='3283' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='3351' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='3670' macro='1' u='c'/>
<use f='opencv/modules/python/src2/cv2.cv.hpp' l='3691' macro='1' u='c'/>
<doc f='include/python2.7/objimpl.h' l='74'>/* Functions to call the same malloc/realloc/free as used by Python&apos;s
   object allocator.  If WITH_PYMALLOC is enabled, these may differ from
   the platform malloc/realloc/free.  The Python object allocator is
   designed for fast, cache-conscious allocation of many &quot;small&quot; objects,
   and with low hidden memory overhead.

   PyObject_Malloc(0) returns a unique non-NULL pointer if possible.

   PyObject_Realloc(NULL, n) acts like PyObject_Malloc(n).
   PyObject_Realloc(p != NULL, 0) does not return  NULL, or free the memory
   at p.

   Returned pointers must be checked for NULL explicitly; no action is
   performed on failure other than to return NULL (no warning it printed, no
   exception is set, etc).

   For allocating objects, use PyObject_{New, NewVar} instead whenever
   possible.  The PyObject_{Malloc, Realloc, Free} family is exposed
   so that you can exploit Python&apos;s small-block allocator for non-object
   uses.  If you must use these routines to allocate object memory, make sure
   the object gets initialized via PyObject_{Init, InitVar} after obtaining
   the raw memory.
*/</doc>
