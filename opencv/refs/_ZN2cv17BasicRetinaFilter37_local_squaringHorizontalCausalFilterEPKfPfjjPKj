<dec f='opencv/modules/contrib/src/basicretinafilter.hpp' l='434' type='void cv::BasicRetinaFilter::_local_squaringHorizontalCausalFilter(const float * inputFrame, float * outputFrame, unsigned int IDrowStart, unsigned int IDrowEnd, const unsigned int * integrationAreas)'/>
<use f='opencv/modules/contrib/src/basicretinafilter.cpp' l='642' u='c' c='_ZN2cv17BasicRetinaFilter36_localSquaringSpatioTemporalLPfilterEPKfPfPKjj'/>
<def f='opencv/modules/contrib/src/basicretinafilter.cpp' l='653' ll='672' type='void cv::BasicRetinaFilter::_local_squaringHorizontalCausalFilter(const float * inputFrame, float * outputFrame, unsigned int IDrowStart, unsigned int IDrowEnd, const unsigned int * integrationAreas)'/>
<doc f='opencv/modules/contrib/src/basicretinafilter.cpp' l='649'>// LP filter on specific parts of the picture instead of all the image
// same functions (some of them) but take a binary flag to allow integration, false flag means, no data change at the output...

// this function take an image in input and squares it befor computing</doc>
<doc f='opencv/modules/contrib/src/basicretinafilter.hpp' l='432'>// LP filter on specific parts of the picture instead of all the image
        // same functions (some of them) but take a binary flag to allow integration, false flag means, 0 at the output...</doc>
