<dec f='opencv/modules/objdetect/src/_lsvm_matching.h' l='350' type='int thresholdFunctionalScore(const CvLSVMFilterObject ** all_F, int n, const CvLSVMFeaturePyramid * H, float b, int maxXBorder, int maxYBorder, float scoreThreshold, float ** score, CvPoint ** points, int ** levels, int * kPoints, CvPoint *** partsDisplacement)'/>
<use f='opencv/modules/objdetect/src/latentsvm.cpp' l='291' u='c' c='_Z21searchObjectThresholdPK20CvLSVMFeaturePyramidPPK18CvLSVMFilterObjectifiifPP7CvPointPPiS9_PPfPS8_i'/>
<doc f='opencv/modules/objdetect/src/_lsvm_matching.h' l='320'>/*
// Computation score function that exceed threshold
//
// API
// int thresholdFunctionalScore(const filterObject **all_F, int n,
                                const featurePyramid *H,
                                float b,
                                int maxXBorder, int maxYBorder,
                                float scoreThreshold,
                                float **score,
                                CvPoint **points, int **levels, int *kPoints,
                                CvPoint ***partsDisplacement);
// INPUT
// all_F             - the set of filters (the first element is root filter,
                       the other - part filters)
// n                 - the number of part filters
// H                 - feature pyramid
// b                 - linear term of the score function
// maxXBorder        - the largest root filter size (X-direction)
// maxYBorder        - the largest root filter size (Y-direction)
// scoreThreshold    - score threshold
// OUTPUT
// score             - score function values that exceed threshold
// points            - the set of root filter positions (in the block space)
// levels            - the set of levels
// kPoints           - number of root filter positions
// partsDisplacement - displacement of part filters (in the block space)
// RESULT
// Error status
*/</doc>
<def f='opencv/modules/objdetect/src/matching.cpp' l='1254' ll='1370' type='int thresholdFunctionalScore(const CvLSVMFilterObject ** all_F, int n, const CvLSVMFeaturePyramid * H, float b, int maxXBorder, int maxYBorder, float scoreThreshold, float ** score, CvPoint ** points, int ** levels, int * kPoints, CvPoint *** partsDisplacement)'/>
<doc f='opencv/modules/objdetect/src/matching.cpp' l='1224'>/*
// Computation score function that exceed threshold
//
// API
// int thresholdFunctionalScore(const CvLSVMFilterObject **all_F, int n,
                                const featurePyramid *H,
                                float b,
                                int maxXBorder, int maxYBorder,
                                float scoreThreshold,
                                float **score,
                                CvPoint **points, int **levels, int *kPoints,
                                CvPoint ***partsDisplacement);
// INPUT
// all_F             - the set of filters (the first element is root filter,
                       the other - part filters)
// n                 - the number of part filters
// H                 - feature pyramid
// b                 - linear term of the score function
// maxXBorder        - the largest root filter size (X-direction)
// maxYBorder        - the largest root filter size (Y-direction)
// scoreThreshold    - score threshold
// OUTPUT
// score             - score function values that exceed threshold
// points            - the set of root filter positions (in the block space)
// levels            - the set of levels
// kPoints           - number of root filter positions
// partsDisplacement - displacement of part filters (in the block space)
// RESULT
// Error status
*/</doc>
