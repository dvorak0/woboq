<def f='opencv/modules/core/include/opencv2/core/core.hpp' l='3312' ll='3344'/>
<size>64</size>
<doc f='opencv/modules/core/include/opencv2/core/core.hpp' l='3262'>/*!
 n-Dimensional Dense Matrix Iterator Class.

 The class cv::NAryMatIterator is used for iterating over one or more n-dimensional dense arrays (cv::Mat&apos;s).

 The iterator is completely different from cv::Mat_ and cv::SparseMat_ iterators.
 It iterates through the slices (or planes), not the elements, where &quot;slice&quot; is a continuous part of the arrays.

 Here is the example on how the iterator can be used to normalize 3D histogram:

 \code
 void normalizeColorHist(Mat&amp; hist)
 {
 #if 1
     // intialize iterator (the style is different from STL).
     // after initialization the iterator will contain
     // the number of slices or planes
     // the iterator will go through
     Mat* arrays[] = { &amp;hist, 0 };
     Mat planes[1];
     NAryMatIterator it(arrays, planes);
     double s = 0;
     // iterate through the matrix. on each iteration
     // it.planes[i] (of type Mat) will be set to the current plane of
     // i-th n-dim matrix passed to the iterator constructor.
     for(int p = 0; p &lt; it.nplanes; p++, ++it)
        s += sum(it.planes[0])[0];
     it = NAryMatIterator(hist);
     s = 1./s;
     for(int p = 0; p &lt; it.nplanes; p++, ++it)
        it.planes[0] *= s;
 #elif 1
     // this is a shorter implementation of the above
     // using built-in operations on Mat
     double s = sum(hist)[0];
     hist.convertTo(hist, hist.type(), 1./s, 0);
 #else
     // and this is even shorter one
     // (assuming that the histogram elements are non-negative)
     normalize(hist, hist, 1, 0, NORM_L1);
 #endif
 }
 \endcode

 You can iterate through several matrices simultaneously as long as they have the same geometry
 (dimensionality and all the dimension sizes are the same), which is useful for binary
 and n-ary operations on such matrices. Just pass those matrices to cv::MatNDIterator.
 Then, during the iteration it.planes[0], it.planes[1], ... will
 be the slices of the corresponding matrices
*/</doc>
<fun r='_ZN2cv15NAryMatIteratorC1Ev'/>
<fun r='_ZN2cv15NAryMatIteratorC1EPPKNS_3MatEPPhi'/>
<fun r='_ZN2cv15NAryMatIteratorC1EPPKNS_3MatEPS1_i'/>
<fun r='_ZN2cv15NAryMatIterator4initEPPKNS_3MatEPS1_PPhi'/>
<fun r='_ZN2cv15NAryMatIteratorppEv'/>
<fun r='_ZN2cv15NAryMatIteratorppEi'/>
<mbr r='cv::NAryMatIterator::arrays' o='0' t='const cv::Mat **'/>
<mbr r='cv::NAryMatIterator::planes' o='64' t='cv::Mat *'/>
<mbr r='cv::NAryMatIterator::ptrs' o='128' t='uchar **'/>
<mbr r='cv::NAryMatIterator::narrays' o='192' t='int'/>
<mbr r='cv::NAryMatIterator::nplanes' o='256' t='size_t'/>
<mbr r='cv::NAryMatIterator::size' o='320' t='size_t'/>
<mbr r='cv::NAryMatIterator::iterdepth' o='384' t='int'/>
<mbr r='cv::NAryMatIterator::idx' o='448' t='size_t'/>
