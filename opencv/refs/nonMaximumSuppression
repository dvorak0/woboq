<dec f='opencv/modules/objdetect/src/_lsvm_matching.h' l='428' type='int nonMaximumSuppression(int numBoxes, const CvPoint * points, const CvPoint * oppositePoints, const float * score, float overlapThreshold, int * numBoxesOut, CvPoint ** pointsOut, CvPoint ** oppositePointsOut, float ** scoreOut)'/>
<use f='opencv/modules/objdetect/src/latentsvmdetector.cpp' l='120' u='c' c='cvLatentSvmDetectObjects'/>
<def f='opencv/modules/objdetect/src/matching.cpp' l='1723' ll='1799' type='int nonMaximumSuppression(int numBoxes, const CvPoint * points, const CvPoint * oppositePoints, const float * score, float overlapThreshold, int * numBoxesOut, CvPoint ** pointsOut, CvPoint ** oppositePointsOut, float ** scoreOut)'/>
<doc f='opencv/modules/objdetect/src/matching.cpp' l='1698'>/*
// Perform non-maximum suppression algorithm (described in original paper)
// to remove &quot;similar&quot; bounding boxes
//
// API
// int nonMaximumSuppression(int numBoxes, const CvPoint *points,
                             const CvPoint *oppositePoints, const float *score,
                             float overlapThreshold,
                             int *numBoxesOut, CvPoint **pointsOut,
                             CvPoint **oppositePointsOut, float **scoreOut);
// INPUT
// numBoxes          - number of bounding boxes
// points            - array of left top corner coordinates
// oppositePoints    - array of right bottom corner coordinates
// score             - array of detection scores
// overlapThreshold  - threshold: bounding box is removed if overlap part
                       is greater than passed value
// OUTPUT
// numBoxesOut       - the number of bounding boxes algorithm returns
// pointsOut         - array of left top corner coordinates
// oppositePointsOut - array of right bottom corner coordinates
// scoreOut          - array of detection scores
// RESULT
// Error status
*/</doc>
