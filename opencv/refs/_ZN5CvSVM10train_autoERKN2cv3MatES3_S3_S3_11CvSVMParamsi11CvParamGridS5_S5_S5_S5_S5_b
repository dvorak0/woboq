<dec f='opencv/modules/ml/include/opencv2/ml/ml.hpp' l='503' type='bool CvSVM::train_auto(const cv::Mat &amp; trainData, const cv::Mat &amp; responses, const cv::Mat &amp; varIdx, const cv::Mat &amp; sampleIdx, CvSVMParams params, int k_fold = 10, CvParamGrid Cgrid = CvSVM::get_default_grid(CvSVM::C), CvParamGrid gammaGrid = CvSVM::get_default_grid(CvSVM::GAMMA), CvParamGrid pGrid = CvSVM::get_default_grid(CvSVM::P), CvParamGrid nuGrid = CvSVM::get_default_grid(CvSVM::NU), CvParamGrid coeffGrid = CvSVM::get_default_grid(CvSVM::COEF), CvParamGrid degreeGrid = CvSVM::get_default_grid(CvSVM::DEGREE), bool balanced = false)'/>
<def f='opencv/modules/ml/src/svm.cpp' l='2216' ll='2225' type='bool CvSVM::train_auto(const cv::Mat &amp; _train_data, const cv::Mat &amp; _responses, const cv::Mat &amp; _var_idx, const cv::Mat &amp; _sample_idx, CvSVMParams _params, int k_fold = 10, CvParamGrid C_grid = CvSVM::get_default_grid(CvSVM::C), CvParamGrid gamma_grid = CvSVM::get_default_grid(CvSVM::GAMMA), CvParamGrid p_grid = CvSVM::get_default_grid(CvSVM::P), CvParamGrid nu_grid = CvSVM::get_default_grid(CvSVM::NU), CvParamGrid coef_grid = CvSVM::get_default_grid(CvSVM::COEF), CvParamGrid degree_grid = CvSVM::get_default_grid(CvSVM::DEGREE), bool balanced = false)'/>
