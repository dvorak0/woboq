<use f='include/eigen3/Eigen/src/Eigenvalues/EigenSolver.h' l='155' u='c' c='_ZN5Eigen11EigenSolverC1ERKT_b'/>
<dec f='include/eigen3/Eigen/src/Eigenvalues/EigenSolver.h' l='276' type='EigenSolver&lt;_MatrixType&gt; &amp; Eigen::EigenSolver::compute(const MatrixType &amp; matrix, bool computeEigenvectors = true)'/>
<def f='include/eigen3/Eigen/src/Eigenvalues/EigenSolver.h' l='363' ll='409' type='EigenSolver&lt;MatrixType&gt; &amp; Eigen::EigenSolver::compute(const MatrixType &amp; matrix, bool computeEigenvectors = true)'/>
<doc f='include/eigen3/Eigen/src/Eigenvalues/EigenSolver.h' l='249'>/** \brief Computes eigendecomposition of given matrix. 
      * 
      * \param[in]  matrix  Square matrix whose eigendecomposition is to be computed.
      * \param[in]  computeEigenvectors  If true, both the eigenvectors and the
      *    eigenvalues are computed; if false, only the eigenvalues are
      *    computed. 
      * \returns    Reference to \c *this
      *
      * This function computes the eigenvalues of the real matrix \p matrix.
      * The eigenvalues() function can be used to retrieve them.  If 
      * \p computeEigenvectors is true, then the eigenvectors are also computed
      * and can be retrieved by calling eigenvectors().
      *
      * The matrix is first reduced to real Schur form using the RealSchur
      * class. The Schur decomposition is then used to compute the eigenvalues
      * and eigenvectors.
      *
      * The cost of the computation is dominated by the cost of the
      * Schur decomposition, which is very approximately \f$ 25n^3 \f$
      * (where \f$ n \f$ is the size of the matrix) if \p computeEigenvectors 
      * is true, and \f$ 10n^3 \f$ if \p computeEigenvectors is false.
      *
      * This method reuses of the allocated data in the EigenSolver object.
      *
      * Example: \include EigenSolver_compute.cpp
      * Output: \verbinclude EigenSolver_compute.out
      */</doc>
