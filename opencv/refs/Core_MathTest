<inh f='opencv/modules/ts/include/opencv2/ts/ts.hpp' l='470' c='cvtest::ArrayTest'/>
<def f='opencv/modules/core/test/test_math.cpp' l='20' ll='30'/>
<ovr f='opencv/modules/core/test/test_math.cpp' l='73' c='Core_PowTest'/>
<size>120</size>
<doc f='opencv/modules/core/test/test_math.cpp' l='12'>/// !!! NOTE !!! These tests happily avoid overflow cases &amp; out-of-range arguments
/// so that output arrays contain neigher Inf&apos;s nor Nan&apos;s.
/// Handling such cases would require special modification of check function
/// (validate_test_results) =&gt; TBD.
/// Also, need some logarithmic-scale generation of input data. Right now it is done (in some tests)
/// by generating min/max boundaries for random data in logarimithic scale, but
/// within the same test case all the input array elements are of the same order.</doc>
<fun r='_ZN13Core_MathTest30get_test_array_types_and_sizesEiRSt6vectorIS0_IN2cv5Size_IiEESaIS3_EESaIS5_EERS0_IS0_IiSaIiEESaISA_EE'/>
<fun r='_ZN13Core_MathTest23get_success_error_levelEiii'/>
<fun r='_ZN13Core_MathTest23get_success_error_levelEiii'/>
<fun r='_ZN13Core_MathTest30get_test_array_types_and_sizesEiRSt6vectorIS0_IN2cv5Size_IiEESaIS3_EESaIS5_EERS0_IS0_IiSaIiEESaISA_EE'/>
