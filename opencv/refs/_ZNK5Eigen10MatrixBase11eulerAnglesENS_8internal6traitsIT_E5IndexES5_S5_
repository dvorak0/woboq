<dec f='include/eigen3/Eigen/src/Core/MatrixBase.h' l='406' type='Matrix&lt;Scalar, 3, 1&gt; Eigen::MatrixBase::eulerAngles(Index a0, Index a1, Index a2) const'/>
<def f='include/eigen3/Eigen/src/Geometry/EulerAngles.h' l='35' ll='100' type='Matrix&lt;typename MatrixBase&lt;Derived&gt;::Scalar, 3, 1&gt; Eigen::MatrixBase::eulerAngles(Index a0, Index a1, Index a2) const'/>
<doc f='include/eigen3/Eigen/src/Geometry/EulerAngles.h' l='15'>/** \geometry_module \ingroup Geometry_Module
  *
  *
  * \returns the Euler-angles of the rotation matrix \c *this using the convention defined by the triplet (\a a0,\a a1,\a a2)
  *
  * Each of the three parameters \a a0,\a a1,\a a2 represents the respective rotation axis as an integer in {0,1,2}.
  * For instance, in:
  * \code Vector3f ea = mat.eulerAngles(2, 0, 2); \endcode
  * &quot;2&quot; represents the z axis and &quot;0&quot; the x axis, etc. The returned angles are such that
  * we have the following equality:
  * \code
  * mat == AngleAxisf(ea[0], Vector3f::UnitZ())
  *      * AngleAxisf(ea[1], Vector3f::UnitX())
  *      * AngleAxisf(ea[2], Vector3f::UnitZ()); \endcode
  * This corresponds to the right-multiply conventions (with right hand side frames).
  * 
  * The returned angles are in the ranges [0:pi]x[0:pi]x[-pi:pi].
  * 
  * \sa class AngleAxis
  */</doc>
