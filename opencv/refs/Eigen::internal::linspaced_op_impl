<def f='include/eigen3/Eigen/src/Core/Functors.h' l='549' ll='573'/>
<def f='include/eigen3/Eigen/src/Core/Functors.h' l='578' ll='599'/>
<doc f='include/eigen3/Eigen/src/Core/Functors.h' l='541'>// linear access for packet ops:
// 1) initialization
//   base = [low, ..., low] + ([step, ..., step] * [-size, ..., 0])
// 2) each step (where size is 1 for coeff access or PacketSize for packet access)
//   base += [size*step, ..., size*step]
//
// TODO: Perhaps it&apos;s better to initialize lazily (so not in the constructor but in packetOp)
//       in order to avoid the padd() in operator() ?</doc>
<doc f='include/eigen3/Eigen/src/Core/Functors.h' l='575'>// random access for packet ops:
// 1) each step
//   [low, ..., low] + ( [step, ..., step] * ( [i, ..., i] + [0, ..., size] ) )</doc>
<fun r='_ZN5Eigen8internal17linspaced_op_implIT_Lb0EEC1ERKS2_S5_'/>
<fun r='_ZNK5Eigen8internal17linspaced_op_implIT_Lb0EEclET_'/>
<fun r='_ZNK5Eigen8internal17linspaced_op_implIT_Lb0EE8packetOpET_'/>
<mbr r='Eigen::internal::linspaced_op_impl::m_low' t='const Scalar'/>
<mbr r='Eigen::internal::linspaced_op_impl::m_step' t='const Scalar'/>
<mbr r='Eigen::internal::linspaced_op_impl::m_packetStep' t='const Packet'/>
<mbr r='Eigen::internal::linspaced_op_impl::m_base' t='Packet'/>
<fun r='_ZN5Eigen8internal17linspaced_op_implIT_Lb1EEC1ERKS2_S5_'/>
<fun r='_ZNK5Eigen8internal17linspaced_op_implIT_Lb1EEclET_'/>
<fun r='_ZNK5Eigen8internal17linspaced_op_implIT_Lb1EE8packetOpET_'/>
<mbr r='Eigen::internal::linspaced_op_impl::m_low' t='const Scalar'/>
<mbr r='Eigen::internal::linspaced_op_impl::m_step' t='const Scalar'/>
<mbr r='Eigen::internal::linspaced_op_impl::m_lowPacket' t='const Packet'/>
<mbr r='Eigen::internal::linspaced_op_impl::m_stepPacket' t='const Packet'/>
<mbr r='Eigen::internal::linspaced_op_impl::m_interPacket' t='const Packet'/>
