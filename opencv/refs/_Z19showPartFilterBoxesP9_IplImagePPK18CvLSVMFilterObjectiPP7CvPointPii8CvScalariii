<dec f='opencv/modules/objdetect/src/_latentsvm.h' l='367' type='int showPartFilterBoxes(IplImage * image, const CvLSVMFilterObject ** filters, int n, CvPoint ** partsDisplacement, int * levels, int kPoints, CvScalar color, int thickness, int line_type, int shift)'/>
<doc f='opencv/modules/objdetect/src/_latentsvm.h' l='342'>/*
// Drawing part filter boxes
//
// API
// int showPartFilterBoxes(const IplImage *image,
                           const filterObject *filter,
                           CvPoint *points, int *levels, int kPoints,
                           CvScalar color, int thickness,
                           int line_type, int shift);
// INPUT
// image             - initial image
// filters           - a set of part filters
// n                 - number of part filters
// partsDisplacement - a set of points
// levels            - levels of feature pyramid
// kPoints           - number of foot filter positions
// color             - line color for each box
// thickness         - line thickness
// line_type         - line type
// shift             - shift
// OUTPUT
// window contained initial image and filter boxes
// RESULT
// Error status
*/</doc>
<def f='opencv/modules/objdetect/src/latentsvm.cpp' l='422' ll='451' type='int showPartFilterBoxes(IplImage * image, const CvLSVMFilterObject ** filters, int n, CvPoint ** partsDisplacement, int * levels, int kPoints, CvScalar color, int thickness, int line_type, int shift)'/>
<doc f='opencv/modules/objdetect/src/latentsvm.cpp' l='397'>/*
// Drawing part filter boxes
//
// API
// int showPartFilterBoxes(const IplImage *image,
                           const filterObject *filter,
                           CvPoint *points, int *levels, int kPoints,
                           CvScalar color, int thickness,
                           int line_type, int shift);
// INPUT
// image             - initial image
// filters           - a set of part filters
// n                 - number of part filters
// partsDisplacement - a set of points
// levels            - levels of feature pyramid
// kPoints           - number of foot filter positions
// color             - line color for each box
// thickness         - line thickness
// line_type         - line type
// shift             - shift
// OUTPUT
// window contained initial image and filter boxes
// RESULT
// Error status
*/</doc>
