<def f='opencv/apps/haartraining/cvclassifier.h' l='496' ll='510'/>
<size>72</size>
<doc f='opencv/apps/haartraining/cvclassifier.h' l='456'>/*
 * CvBtClassifier
 *
 * The CvBtClassifier structure represents boosted tree model.
 *
 * Members
 *   flags
 *     Flags. If CV_IS_TUNABLE( flags ) != 0 then the model supports tuning.
 *   eval
 *     Evaluation function. Returns sample predicted class (0, 1, etc.)
 *     for classification or predicted value for regression.
 *   tune
 *     Tune function. If the model supports tuning then tune call performs
 *     one more boosting iteration if passed to the function flags parameter
 *     is CV_TUNABLE otherwise releases internally allocated for tuning memory
 *     and makes the model untunable.
 *     NOTE: Since tuning uses the pointers to parameters,
 *     passed to the cvCreateBtClassifier function, they should not be modified
 *     or released between tune calls.
 *   save
 *     This function stores the model into given file.
 *   release
 *     This function releases the model.
 *   type
 *     Boosted tree model type.
 *   numclasses
 *     Number of classes for CV_LKCLASS type or 1 for all other types.
 *   numiter
 *     Number of iterations. Number of weak classifiers is equal to number
 *     of iterations for all types except CV_LKCLASS. For CV_LKCLASS type
 *     number of weak classifiers is (numiter * numclasses).
 *   numfeatures
 *     Number of features in sample.
 *   trees
 *     Stores weak classifiers when the model does not support tuning.
 *   seq
 *     Stores weak classifiers when the model supports tuning.
 *   trainer
 *     Pointer to internal tuning parameters if the model supports tuning.
 */</doc>
<mbr r='CvBtClassifier::flags' o='0' t='int'/>
<mbr r='CvBtClassifier::eval' o='64' t='float (*)(struct CvClassifier *, CvMat *)'/>
<mbr r='CvBtClassifier::tune' o='128' t='void (*)(struct CvClassifier *, CvMat *, int, CvMat *, CvMat *, CvMat *, CvMat *, CvMat *)'/>
<mbr r='CvBtClassifier::save' o='192' t='int (*)(struct CvClassifier *, const char *)'/>
<mbr r='CvBtClassifier::release' o='256' t='void (*)(struct CvClassifier **)'/>
<mbr r='CvBtClassifier::type' o='320' t='CvBoostType'/>
<mbr r='CvBtClassifier::numclasses' o='352' t='int'/>
<mbr r='CvBtClassifier::numiter' o='384' t='int'/>
<mbr r='CvBtClassifier::numfeatures' o='416' t='int'/>
<mbr r='CvBtClassifier::trainer' o='512' t='void *'/>
