<dec f='include/OpenEXR/ImathVec.h' l='409' type='T Imath::Vec3::length() const'/>
<dec f='include/OpenEXR/ImathVec.h' l='536' type='short Imath::Vec3&lt;short&gt;::length() const'/>
<dec f='include/OpenEXR/ImathVec.h' l='560' type='int Imath::Vec3&lt;int&gt;::length() const'/>
<def f='include/OpenEXR/ImathVec.h' l='1291' ll='1296' type='T Imath::Vec3::length() const'/>
<use f='include/OpenEXR/ImathVec.h' l='1309' u='c' c='_ZN5Imath4Vec39normalizeEv'/>
<use f='include/OpenEXR/ImathVec.h' l='1325' u='c' c='_ZN5Imath4Vec312normalizeExcEv'/>
<use f='include/OpenEXR/ImathVec.h' l='1341' u='c' c='_ZN5Imath4Vec316normalizeNonNullEv'/>
<use f='include/OpenEXR/ImathVec.h' l='1352' u='c' c='_ZNK5Imath4Vec310normalizedEv'/>
<use f='include/OpenEXR/ImathVec.h' l='1364' u='c' c='_ZNK5Imath4Vec313normalizedExcEv'/>
<use f='include/OpenEXR/ImathVec.h' l='1377' u='c' c='_ZNK5Imath4Vec317normalizedNonNullEv'/>
<doc f='include/OpenEXR/ImathVec.h' l='400'>//----------------------------------------------------------------
    // Length and normalization:  If v.length() is 0.0, v.normalize()
    // and v.normalized() produce a null vector; v.normalizeExc() and
    // v.normalizedExc() throw a NullVecExc.
    // v.normalizeNonNull() and v.normalizedNonNull() are slightly
    // faster than the other normalization routines, but if v.length()
    // is 0.0, the result is undefined.
    //----------------------------------------------------------------</doc>
<doc f='include/OpenEXR/ImathVec.h' l='533'>// Vec3&lt;short&gt;</doc>
<doc f='include/OpenEXR/ImathVec.h' l='557'>// Vec3&lt;int&gt;</doc>
