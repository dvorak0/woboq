<dec f='opencv/modules/ml/include/opencv2/ml/ml.hpp' l='926' type='double CvDTree::calc_node_dir(CvDTreeNode * node)'/>
<ovr f='opencv/modules/ml/src/boost.cpp' l='182' c='_ZN11CvBoostTree13calc_node_dirEP11CvDTreeNode'/>
<ovr f='opencv/modules/ml/src/ertrees.cpp' l='758' c='_ZN14CvForestERTree13calc_node_dirEP11CvDTreeNode'/>
<use f='opencv/modules/ml/src/tree.cpp' l='1707' u='c' c='_ZN7CvDTree14try_split_nodeEP11CvDTreeNode'/>
<def f='opencv/modules/ml/src/tree.cpp' l='1756' ll='1861' type='double CvDTree::calc_node_dir(CvDTreeNode * node)'/>
<doc f='opencv/modules/ml/src/tree.cpp' l='1745'>// calculate direction (left(-1),right(1),missing(0))
// for each sample using the best split
// the function returns scale coefficients for surrogate split quality factors.
// the scale is applied to normalize surrogate split quality relatively to the
// best (primary) split quality. That is, if a surrogate split is absolutely
// identical to the primary split, its quality will be set to the maximum value =
// quality of the primary split; otherwise, it will be lower.
// besides, the function compute node-&gt;maxlr,
// minimum possible quality (w/o considering the above mentioned scale)
// for a surrogate split. Surrogate splits with quality less than node-&gt;maxlr
// are not discarded.</doc>
