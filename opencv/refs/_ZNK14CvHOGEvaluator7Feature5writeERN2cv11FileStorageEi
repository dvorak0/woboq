<dec f='opencv/apps/traincascade/HOGfeatures.h' l='37' type='void CvHOGEvaluator::Feature::write(cv::FileStorage &amp; fs, int varIdx) const'/>
<use f='opencv/apps/traincascade/HOGfeatures.cpp' l='59' u='c' c='_ZNK14CvHOGEvaluator13writeFeaturesERN2cv11FileStorageERKNS0_3MatE'/>
<def f='opencv/apps/traincascade/HOGfeatures.cpp' l='150' ll='154' type='void CvHOGEvaluator::Feature::write(cv::FileStorage &amp; fs, int featComponentIdx) const'/>
<doc f='opencv/apps/traincascade/HOGfeatures.cpp' l='137'>//cell and bin idx writing
//void CvHOGEvaluator::Feature::write(FileStorage &amp;fs, int varIdx) const
//{
//    int featComponent = varIdx % (N_CELLS * N_BINS);
//    int cellIdx = featComponent / N_BINS;
//    int binIdx = featComponent % N_BINS;
//
//    fs &lt;&lt; CC_RECTS &lt;&lt; &quot;[:&quot; &lt;&lt; rect[cellIdx].x &lt;&lt; rect[cellIdx].y &lt;&lt;
//        rect[cellIdx].width &lt;&lt; rect[cellIdx].height &lt;&lt; binIdx &lt;&lt; &quot;]&quot;;
//}

//cell[0] and featComponent idx writing. By cell[0] it&apos;s possible to recover all block
//All block is nessesary for block normalization</doc>
