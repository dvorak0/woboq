<dec f='include/OpenEXR/ImfChannelList.h' l='201' type='void Imf::ChannelList::layers(std::set&lt;std::string&gt; &amp; layerNames) const'/>
<doc f='include/OpenEXR/ImfChannelList.h' l='161'>//-----------------------------------------------------------------
    // Support for image layers:
    //
    // In an image file with many channels it is sometimes useful to
    // group the channels into &quot;layers&quot;, that is, into sets of channels
    // that logically belong together.  Grouping channels into layers
    // is done using a naming convention:  channel C in layer L is
    // called &quot;L.C&quot;.
    //
    // For example, a computer graphic image may contain separate
    // R, G and B channels for light that originated at each of
    // several different virtual light sources.  The channels in
    // this image might be called &quot;light1.R&quot;, &quot;light1.G&quot;, &quot;light1.B&quot;,
    // &quot;light2.R&quot;, &quot;light2.G&quot;, &quot;light2.B&quot;, etc.
    // 
    // Note that this naming convention allows layers to be nested;
    // for example, &quot;light1.specular.R&quot; identifies the &quot;R&quot; channel
    // in the &quot;specular&quot; sub-layer of layer &quot;light1&quot;.
    //
    // Channel names that don&apos;t contain a &quot;.&quot; or that contain a
    // &quot;.&quot; only at the beginning or at the end are not considered
    // to be part of any layer.
    //
    // layers(lns)		sorts the channels in this ChannelList
    //				into layers and stores the names of
    //				all layers, sorted alphabetically,
    //				into string set lns.
    //
    // channelsInLayer(ln,f,l)	stores a pair of iterators in f and l
    // 				such that the loop
    //
    // 				for (ConstIterator i = f; i != l; ++i)
    // 				   ...
    //
    //				iterates over all channels in layer ln.
    //				channelsInLayer (ln, l, p) calls
    //				channelsWithPrefix (ln + &quot;.&quot;, l, p).
    //
    //-----------------------------------------------------------------</doc>
