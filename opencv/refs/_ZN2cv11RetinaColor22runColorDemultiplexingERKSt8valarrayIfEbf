<dec f='opencv/modules/contrib/src/retinacolor.hpp' l='143' type='void cv::RetinaColor::runColorDemultiplexing(const std::valarray&lt;float&gt; &amp; multiplexedColorFrame, const bool adaptiveFiltering = false, const float maxInputValue = 255.)'/>
<doc f='opencv/modules/contrib/src/retinacolor.hpp' l='136'>/**
        * color demultiplexing function: a multiplexed frame of size M*N*1 pixels is transformed into a RGB demultiplexed M*N*3 pixels frame
        * @param multiplexedColorFrame: the input multiplexed frame to be processed
        * @param adaptiveFiltering: specifies if an adaptive filtering has to be perform rather than standard filtering (adaptive filtering allows a better rendering)
        * @param maxInputValue: the maximum input data value (should be 255 for 8 bits images but it can change in the case of High Dynamic Range Images (HDRI)
        * @return, nothing but the output demultiplexed frame is available by the use of the getDemultiplexedColorFrame() function, also use getLuminance() and getChrominance() in order to retreive either luminance or chrominance
        */</doc>
<def f='opencv/modules/contrib/src/retinacolor.cpp' l='254' ll='405' type='void cv::RetinaColor::runColorDemultiplexing(const std::valarray&lt;float&gt; &amp; multiplexedColorFrame, const bool adaptiveFiltering = false, const float maxInputValue = 255.)'/>
<doc f='opencv/modules/contrib/src/retinacolor.cpp' l='252'>// public functions</doc>
<use f='opencv/modules/contrib/src/retinafilter.cpp' l='333' u='c' c='_ZN2cv12RetinaFilter9runFilterERKSt8valarrayIfEbbbb'/>
<use f='opencv/modules/contrib/src/retinafilter.cpp' l='340' u='c' c='_ZN2cv12RetinaFilter9runFilterERKSt8valarrayIfEbbbb'/>
<use f='opencv/modules/contrib/src/retinafilter.cpp' l='407' u='c' c='_ZN2cv12RetinaFilter17runRGBToneMappingERKSt8valarrayIfERS2_bff'/>
