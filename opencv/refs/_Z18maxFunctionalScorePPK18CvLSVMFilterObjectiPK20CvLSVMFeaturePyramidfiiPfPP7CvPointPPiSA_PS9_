<dec f='opencv/modules/objdetect/src/_lsvm_matching.h' l='313' type='int maxFunctionalScore(const CvLSVMFilterObject ** all_F, int n, const CvLSVMFeaturePyramid * H, float b, int maxXBorder, int maxYBorder, float * score, CvPoint ** points, int ** levels, int * kPoints, CvPoint *** partsDisplacement)'/>
<use f='opencv/modules/objdetect/src/latentsvm.cpp' l='187' u='c' c='_Z12searchObjectPK20CvLSVMFeaturePyramidPPK18CvLSVMFilterObjectifiiPP7CvPointPPiS9_PfPS8_'/>
<doc f='opencv/modules/objdetect/src/_lsvm_matching.h' l='286'>/*
// Computation the maximum of the score function
//
// API
// int maxFunctionalScore(const filterObject **all_F, int n,
                          const featurePyramid *H, float b,
                          int maxXBorder, int maxYBorder,
                          float *score,
                          CvPoint **points, int **levels, int *kPoints,
                          CvPoint ***partsDisplacement);
// INPUT
// all_F             - the set of filters (the first element is root filter,
                       the other - part filters)
// n                 - the number of part filters
// H                 - feature pyramid
// b                 - linear term of the score function
// maxXBorder        - the largest root filter size (X-direction)
// maxYBorder        - the largest root filter size (Y-direction)
// OUTPUT
// score             - the maximum of the score function
// points            - the set of root filter positions (in the block space)
// levels            - the set of levels
// kPoints           - number of root filter positions
// partsDisplacement - displacement of part filters (in the block space)
// RESULT
// Error status
*/</doc>
<def f='opencv/modules/objdetect/src/matching.cpp' l='1091' ll='1222' type='int maxFunctionalScore(const CvLSVMFilterObject ** all_F, int n, const CvLSVMFeaturePyramid * H, float b, int maxXBorder, int maxYBorder, float * score, CvPoint ** points, int ** levels, int * kPoints, CvPoint *** partsDisplacement)'/>
<doc f='opencv/modules/objdetect/src/matching.cpp' l='1064'>/*
// Computation the maximum of the score function
//
// API
// int maxFunctionalScore(const CvLSVMFilterObject **all_F, int n,
                          const featurePyramid *H, float b,
                          int maxXBorder, int maxYBorder,
                          float *score,
                          CvPoint **points, int **levels, int *kPoints,
                          CvPoint ***partsDisplacement);
// INPUT
// all_F             - the set of filters (the first element is root filter,
                       the other - part filters)
// n                 - the number of part filters
// H                 - feature pyramid
// b                 - linear term of the score function
// maxXBorder        - the largest root filter size (X-direction)
// maxYBorder        - the largest root filter size (Y-direction)
// OUTPUT
// score             - the maximum of the score function
// points            - the set of root filter positions (in the block space)
// levels            - the set of levels
// kPoints           - number of root filter positions
// partsDisplacement - displacement of part filters (in the block space)
// RESULT
// Error status
*/</doc>
