<def f='opencv/modules/core/include/opencv2/core/core.hpp' l='600' ll='651'/>
<doc f='opencv/modules/core/include/opencv2/core/core.hpp' l='585'>/*!
  A short numerical vector.

  This template class represents short numerical vectors (of 1, 2, 3, 4 ... elements)
  on which you can perform basic arithmetical operations, access individual elements using [] operator etc.
  The vectors are allocated on stack, as opposite to std::valarray, std::vector, cv::Mat etc.,
  which elements are dynamically allocated in the heap.

  The template takes 2 parameters:
  -# _Tp element type
  -# cn the number of elements

  In addition to the universal notation like Vec&lt;float, 3&gt;, you can use shorter aliases
  for the most popular specialized variants of Vec, e.g. Vec3f ~ Vec&lt;float, 3&gt;.
*/</doc>
<fun r='_ZN2cv3VecC1Ev'/>
<fun r='_ZN2cv3VecC1ET_'/>
<fun r='_ZN2cv3VecC1ET_S1_'/>
<fun r='_ZN2cv3VecC1ET_S1_S1_'/>
<fun r='_ZN2cv3VecC1ET_S1_S1_S1_'/>
<fun r='_ZN2cv3VecC1ET_S1_S1_S1_S1_'/>
<fun r='_ZN2cv3VecC1ET_S1_S1_S1_S1_S1_'/>
<fun r='_ZN2cv3VecC1ET_S1_S1_S1_S1_S1_S1_'/>
<fun r='_ZN2cv3VecC1ET_S1_S1_S1_S1_S1_S1_S1_'/>
<fun r='_ZN2cv3VecC1ET_S1_S1_S1_S1_S1_S1_S1_S1_'/>
<fun r='_ZN2cv3VecC1ET_S1_S1_S1_S1_S1_S1_S1_S1_S1_'/>
<fun r='_ZN2cv3VecC1EPKT_'/>
<fun r='_ZN2cv3VecC1ERKNS_3VecIT_XT0_EEE'/>
<fun r='_ZN2cv3Vec3allET_'/>
<fun r='_ZNK2cv3Vec3mulERKNS_3VecIT_XT0_EEE'/>
<fun r='_ZNK2cv3Vec4conjEv'/>
<fun r='_ZNK2cv3Vec5crossERKNS_3VecIT_XT0_EEE'/>
<fun r='_ZNK2cv3VeccvNS_3VecIT_XT0_EEEEv'/>
<fun r='_ZNK2cv3Veccv8CvScalarEv'/>
<fun r='_ZNK2cv3VecixEi'/>
<fun r='_ZN2cv3VecixEi'/>
<fun r='_ZNK2cv3VecclEi'/>
<fun r='_ZN2cv3VecclEi'/>
<fun r='_ZN2cv3VecC1ERKNS_4MatxIT_XT0_ELi1EEES5_NS_10Matx_AddOpE'/>
<fun r='_ZN2cv3VecC1ERKNS_4MatxIT_XT0_ELi1EEES5_NS_10Matx_SubOpE'/>
<fun r='_ZN2cv3VecC1ERKNS_4MatxIT_XT0_ELi1EEET_NS_12Matx_ScaleOpE'/>
<fun r='_ZN2cv3VecC1Ev'/>
<fun r='_ZN2cv3VecC1ET_'/>
<fun r='_ZN2cv3VecC1ET_S1_'/>
<fun r='_ZN2cv3VecC1ET_S1_S1_'/>
<fun r='_ZN2cv3VecC1ET_S1_S1_S1_'/>
<fun r='_ZN2cv3VecC1ET_S1_S1_S1_S1_'/>
<fun r='_ZN2cv3VecC1ET_S1_S1_S1_S1_S1_'/>
<fun r='_ZN2cv3VecC1ET_S1_S1_S1_S1_S1_S1_'/>
<fun r='_ZN2cv3VecC1ET_S1_S1_S1_S1_S1_S1_S1_'/>
<fun r='_ZN2cv3VecC1ET_S1_S1_S1_S1_S1_S1_S1_S1_'/>
<fun r='_ZN2cv3VecC1ET_S1_S1_S1_S1_S1_S1_S1_S1_S1_'/>
<fun r='_ZN2cv3VecC1EPKT_'/>
<fun r='_ZN2cv3VecC1ERKNS_3VecIT_XT0_EEE'/>
<fun r='_ZN2cv3VecC1ERKNS_4MatxIT_XT0_ELi1EEES5_NS_10Matx_AddOpE'/>
<fun r='_ZN2cv3VecC1ERKNS_4MatxIT_XT0_ELi1EEES5_NS_10Matx_SubOpE'/>
<fun r='_ZN2cv3VecC1ERKNS_4MatxIT_XT0_ELi1EEET_NS_12Matx_ScaleOpE'/>
<fun r='_ZN2cv3Vec3allET_'/>
<fun r='_ZNK2cv3Vec3mulERKNS_3VecIT_XT0_EEE'/>
<fun r='_ZNK2cv3Vec4conjEv'/>
<fun r='_ZNK2cv3Vec4conjEv'/>
<fun r='_ZNK2cv3Vec4conjEv'/>
<fun r='_ZNK2cv3Vec4conjEv'/>
<fun r='_ZNK2cv3Vec5crossERKNS_3VecIT_XT0_EEE'/>
<fun r='_ZNK2cv3VeccvNS_3VecIT_XT0_EEEEv'/>
<fun r='_ZNK2cv3Veccv8CvScalarEv'/>
<fun r='_ZNK2cv3VecixEi'/>
<fun r='_ZN2cv3VecixEi'/>
<fun r='_ZNK2cv3VecclEi'/>
<fun r='_ZN2cv3VecclEi'/>
<fun r='_ZNK2cv3Vec5crossERKNS_3VecIT_XT0_EEE'/>
<fun r='_ZNK2cv3Vec5crossERKNS_3VecIT_XT0_EEE'/>
