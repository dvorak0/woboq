<dec f='opencv/modules/objdetect/src/_lsvm_distancetransform.h' l='53' type='int DistanceTransformOneDimensionalProblem(const float * f, const int n, const float a, const float b, float * distanceTransform, int * points)'/>
<def f='opencv/modules/objdetect/src/distancetransform.cpp' l='60' ll='137' type='int DistanceTransformOneDimensionalProblem(const float * f, const int n, const float a, const float b, float * distanceTransform, int * points)'/>
<use f='opencv/modules/objdetect/src/distancetransform.cpp' l='351' u='c' c='_Z38DistanceTransformTwoDimensionalProblemPKfiiS0_PfPiS2_'/>
<use f='opencv/modules/objdetect/src/distancetransform.cpp' l='362' u='c' c='_Z38DistanceTransformTwoDimensionalProblemPKfiiS0_PfPiS2_'/>
<doc f='opencv/modules/objdetect/src/distancetransform.cpp' l='39'>/*
// Decision of one dimensional problem generalized distance transform
// on the regular grid at all points
//      min (a(y&apos; - y) + b(y&apos; - y)(y&apos; - y) + f(y&apos;)) (on y&apos;)
//
// API
// int DistanceTransformOneDimensionalProblem(const float *f, const int n,
                                              const float a, const float b,
                                              float *distanceTransform,
                                              int *points);
// INPUT
// f                 - function on the regular grid
// n                 - grid dimension
// a                 - coefficient of optimizable function
// b                 - coefficient of optimizable function
// OUTPUT
// distanceTransform - values of generalized distance transform
// points            - arguments that corresponds to the optimal value of function
// RESULT
// Error status
*/</doc>
<doc f='opencv/modules/objdetect/src/_lsvm_distancetransform.h' l='32'>/*
// Decision of one dimensional problem generalized distance transform
// on the regular grid at all points
//      min (a(y&apos; - y) + b(y&apos; - y)(y&apos; - y) + f(y&apos;)) (on y&apos;)
//
// API
// int DistanceTransformOneDimensionalProblem(const F_type *f, const int n,
                                              const F_type a, const F_type b,
                                              F_type *distanceTransform,
                                              int *points);
// INPUT
// f                 - function on the regular grid
// n                 - grid dimension
// a                 - coefficient of optimizable function
// b                 - coefficient of optimizable function
// OUTPUT
// distanceTransform - values of generalized distance transform
// points            - arguments that corresponds to the optimal value of function
// RESULT
// Error status
*/</doc>
