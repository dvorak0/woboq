<dec f='opencv/modules/contrib/src/basicretinafilter.hpp' l='178' type='void cv::BasicRetinaFilter::runFilter_LPfilter(const std::valarray&lt;float&gt; &amp; inputFrame, std::valarray&lt;float&gt; &amp; outputFrame, const unsigned int filterIndex = 0)'/>
<def f='opencv/modules/contrib/src/basicretinafilter.cpp' l='390' ll='393' type='void cv::BasicRetinaFilter::runFilter_LPfilter(const std::valarray&lt;float&gt; &amp; inputFrame, std::valarray&lt;float&gt; &amp; outputFrame, const unsigned int filterIndex = 0)'/>
<doc f='opencv/modules/contrib/src/basicretinafilter.cpp' l='389'>// run LP filter for a new frame input and save result at a specific output adress</doc>
<doc f='opencv/modules/contrib/src/basicretinafilter.hpp' l='172'>/**
        * low pass filter call and run (models the homogeneous cells network at the retina level, for example horizontal cells or photoreceptors)
        * @param inputFrame: the input image to be processed
        * @param outputFrame: the output buffer in which the result is writed
        * @param filterIndex: the offset which specifies the parameter set that should be used for the filtering
        */</doc>
<doc f='opencv/modules/contrib/src/basicretinafilter.hpp' l='178'>// run LP filter on a specific output adress</doc>
<use f='opencv/modules/contrib/src/retinafilter.cpp' l='377' u='c' c='_ZN2cv12RetinaFilter19_runGrayToneMappingERKSt8valarrayIfERS2_ff'/>
<use f='opencv/modules/contrib/src/retinafilter.cpp' l='388' u='c' c='_ZN2cv12RetinaFilter19_runGrayToneMappingERKSt8valarrayIfERS2_ff'/>
