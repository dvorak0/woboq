<dec f='include/eigen3/Eigen/src/Core/DenseBase.h' l='447' type='static const CwiseNullaryOp&lt;internal::scalar_random_op&lt;Scalar&gt;, Derived&gt; Eigen::DenseBase::Random()'/>
<def f='include/eigen3/Eigen/src/Core/Random.h' l='95' ll='100' type='static const CwiseNullaryOp&lt;internal::scalar_random_op&lt;typename internal::traits&lt;Derived&gt;::Scalar&gt;, Derived&gt; Eigen::DenseBase::Random()'/>
<doc f='include/eigen3/Eigen/src/Core/Random.h' l='81'>/** \returns a fixed-size random matrix or vector expression
  *
  * This variant is only for fixed-size MatrixBase types. For dynamic-size types, you
  * need to use the variants taking size arguments.
  *
  * Example: \include MatrixBase_random.cpp
  * Output: \verbinclude MatrixBase_random.out
  *
  * This expression has the &quot;evaluate before nesting&quot; flag so that it will be evaluated into
  * a temporary matrix whenever it is nested in a larger expression. This prevents unexpected
  * behavior with expressions involving random matrices.
  *
  * \sa MatrixBase::setRandom(), MatrixBase::Random(Index,Index), MatrixBase::Random(Index)
  */</doc>
