<dec f='opencv/modules/legacy/include/opencv2/legacy/legacy.hpp' l='644' type='void icvComputeeInfiniteProject1(double * rotMatr, double * camMatr1, double * camMatr2, CvPoint2D32f point1, CvPoint2D32f * point2)'/>
<doc f='opencv/modules/legacy/include/opencv2/legacy/legacy.hpp' l='637'>/*CVAPI(void) icvGetCommonArea( CvSize imageSize,
                    CvPoint2D64f epipole1,CvPoint2D64f epipole2,
                    double* fundMatr,
                    double* coeff11,double* coeff12,
                    double* coeff21,double* coeff22,
                    int* result);*/</doc>
<use f='opencv/modules/legacy/src/epilines.cpp' l='1479' u='c' c='icvGetQuadsTransform'/>
<use f='opencv/modules/legacy/src/epilines.cpp' l='1485' u='c' c='icvGetQuadsTransform'/>
<use f='opencv/modules/legacy/src/epilines.cpp' l='1559' u='c' c='icvGetQuadsTransform'/>
<use f='opencv/modules/legacy/src/epilines.cpp' l='1565' u='c' c='icvGetQuadsTransform'/>
<def f='opencv/modules/legacy/src/epilines.cpp' l='2599' ll='2643' type='void icvComputeeInfiniteProject1(CvMatr64d rotMatr, CvMatr64d camMatr1, CvMatr64d camMatr2, CvPoint2D32f point1, CvPoint2D32f * point2)'/>
<doc f='opencv/modules/legacy/src/epilines.cpp' l='2598'>/* Compute projected infinite point for second image if first image point is known */</doc>
