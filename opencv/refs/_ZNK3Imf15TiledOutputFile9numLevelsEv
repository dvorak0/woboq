<dec f='include/OpenEXR/ImfTiledOutputFile.h' l='205' type='int Imf::TiledOutputFile::numLevels() const'/>
<doc f='include/OpenEXR/ImfTiledOutputFile.h' l='162'>//--------------------------------------------------------------------
    // Number of levels:
    //
    // numXLevels() returns the file&apos;s number of levels in x direction.
    //
    //	if levelMode() == ONE_LEVEL:
    //      return value is: 1
    //
    //	if levelMode() == MIPMAP_LEVELS:
    //      return value is: rfunc (log (max (w, h)) / log (2)) + 1
    //
    //	if levelMode() == RIPMAP_LEVELS:
    //      return value is: rfunc (log (w) / log (2)) + 1
    //
    //	where
    //	    w is the width of the image&apos;s data window,  max.x - min.x + 1,
    //	    y is the height of the image&apos;s data window, max.y - min.y + 1,
    //	    and rfunc(x) is either floor(x), or ceil(x), depending on
    //	    whether levelRoundingMode() returns ROUND_DOWN or ROUND_UP.
    //
    // numYLevels() returns the file&apos;s number of levels in y direction.
    //
    //	if levelMode() == ONE_LEVEL or levelMode() == MIPMAP_LEVELS:
    //      return value is the same as for numXLevels()
    //
    //	if levelMode() == RIPMAP_LEVELS:
    //      return value is: rfunc (log (h) / log (2)) + 1
    //
    //
    // numLevels() is a convenience function for use with MIPMAP_LEVELS
    // files.
    //
    //	if levelMode() == ONE_LEVEL or levelMode() == MIPMAP_LEVELS:
    //      return value is the same as for numXLevels()
    //
    //	if levelMode() == RIPMAP_LEVELS:
    //      an Iex::LogicExc exception is thrown
    //
    // isValidLevel(lx, ly) returns true if the file contains 
    // a level with level number (lx, ly), false if not.
    //
    //--------------------------------------------------------------------</doc>
