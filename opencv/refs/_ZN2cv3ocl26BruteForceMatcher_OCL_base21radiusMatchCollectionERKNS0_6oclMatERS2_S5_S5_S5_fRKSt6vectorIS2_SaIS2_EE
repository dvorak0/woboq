<dec f='opencv/modules/ocl/include/opencv2/ocl/ocl.hpp' l='1308' type='void cv::ocl::BruteForceMatcher_OCL_base::radiusMatchCollection(const cv::ocl::oclMat &amp; query, cv::ocl::oclMat &amp; trainIdx, cv::ocl::oclMat &amp; imgIdx, cv::ocl::oclMat &amp; distance, cv::ocl::oclMat &amp; nMatches, float maxDistance, const std::vector&lt;oclMat&gt; &amp; masks = std::vector&lt;oclMat&gt;())'/>
<doc f='opencv/modules/ocl/include/opencv2/ocl/ocl.hpp' l='1304'>// Find best matches for each query descriptor which have distance less than maxDistance.
            // If trainIdx is empty, then trainIdx and distance will be created with size nQuery x max((nQuery / 100), 10),
            // otherwize user can pass own allocated trainIdx and distance with size nQuery x nMaxMatches
            // Matches doesn&apos;t sorted.</doc>
<def f='opencv/modules/ocl/src/brute_force_matcher.cpp' l='1089' ll='1140' type='void cv::ocl::BruteForceMatcher_OCL_base::radiusMatchCollection(const cv::ocl::oclMat &amp; query, cv::ocl::oclMat &amp; trainIdx, cv::ocl::oclMat &amp; imgIdx, cv::ocl::oclMat &amp; distance, cv::ocl::oclMat &amp; nMatches, float , const vector&lt;cv::ocl::oclMat&gt; &amp; masks = std::vector&lt;oclMat&gt;())'/>
<use f='opencv/modules/ocl/src/brute_force_matcher.cpp' l='1212' u='c' c='_ZN2cv3ocl26BruteForceMatcher_OCL_base11radiusMatchERKNS0_6oclMatERSt6vectorIS5_INS_6DMatchESaIS6_EESaIS8_EEfRKS5_IS2_SaIS2_EEb'/>
