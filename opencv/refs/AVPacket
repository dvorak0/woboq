<def f='include/libavcodec/avcodec.h' l='898' ll='960'/>
<size>88</size>
<doc f='include/libavcodec/avcodec.h' l='876'>/**
 * This structure stores compressed data. It is typically exported by demuxers
 * and then passed as input to decoders, or received as output from encoders and
 * then passed to muxers.
 *
 * For video, it should typically contain one compressed frame. For audio it may
 * contain several compressed frames.
 *
 * AVPacket is one of the few structs in Libav, whose size is a part of public
 * ABI. Thus it may be allocated on stack and no new fields can be added to it
 * without libavcodec and libavformat major bump.
 *
 * The semantics of data ownership depends on the destruct field.
 * If it is set, the packet data is dynamically allocated and is valid
 * indefinitely until av_free_packet() is called (which in turn calls the
 * destruct callback to free the data). If destruct is not set, the packet data
 * is typically backed by some static buffer somewhere and is only valid for a
 * limited time (e.g. until the next read call when demuxing).
 *
 * The side data is always allocated with av_malloc() and is freed in
 * av_free_packet().
 */</doc>
<mbr r='AVPacket::pts' o='0' t='int64_t'/>
<mbr r='AVPacket::dts' o='64' t='int64_t'/>
<mbr r='AVPacket::data' o='128' t='uint8_t *'/>
<mbr r='AVPacket::size' o='192' t='int'/>
<mbr r='AVPacket::stream_index' o='224' t='int'/>
<mbr r='AVPacket::flags' o='256' t='int'/>
<mbr r='AVPacket::side_data' o='320' t='struct &lt;anonymous struct at /usr/include/libavcodec/avcodec.h:926:5&gt; *'/>
<mbr r='AVPacket::side_data_elems' o='384' t='int'/>
<mbr r='AVPacket::duration' o='416' t='int'/>
<mbr r='AVPacket::destruct' o='448' t='void (*)(struct AVPacket *)'/>
<mbr r='AVPacket::priv' o='512' t='void *'/>
<mbr r='AVPacket::pos' o='576' t='int64_t'/>
<mbr r='AVPacket::convergence_duration' o='640' t='int64_t'/>
