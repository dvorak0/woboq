<dec f='opencv/modules/objdetect/src/_latentsvm.h' l='279' type='int searchObjectThresholdSomeComponents(const CvLSVMFeaturePyramid * H, const CvLSVMFilterObject ** filters, int kComponents, const int * kPartFilters, const float * b, float scoreThreshold, CvPoint ** points, CvPoint ** oppPoints, float ** score, int * kPoints, int numThreads)'/>
<def f='opencv/modules/objdetect/src/latentsvm.cpp' l='555' ll='644' type='int searchObjectThresholdSomeComponents(const CvLSVMFeaturePyramid * H, const CvLSVMFilterObject ** filters, int kComponents, const int * kPartFilters, const float * b, float scoreThreshold, CvPoint ** points, CvPoint ** oppPoints, float ** score, int * kPoints, int numThreads)'/>
<doc f='opencv/modules/objdetect/src/latentsvm.cpp' l='530'>/*
// Computation root filters displacement and values of score function
//
// API
// int searchObjectThresholdSomeComponents(const featurePyramid *H,
                                           const filterObject **filters,
                                           int kComponents, const int *kPartFilters,
                                           const float *b, float scoreThreshold,
                                           CvPoint **points, CvPoint **oppPoints,
                                           float **score, int *kPoints);
// INPUT
// H                 - feature pyramid
// filters           - filters (root filter then it&apos;s part filters, etc.)
// kComponents       - root filters number
// kPartFilters      - array of part filters number for each component
// b                 - array of linear terms
// scoreThreshold    - score threshold
// OUTPUT
// points            - root filters displacement (top left corners)
// oppPoints         - root filters displacement (bottom right corners)
// score             - array of score values
// kPoints           - number of boxes
// RESULT
// Error status
*/</doc>
<use f='opencv/modules/objdetect/src/latentsvmdetector.cpp' l='109' u='c' c='cvLatentSvmDetectObjects'/>
