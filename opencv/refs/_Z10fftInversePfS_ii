<dec f='opencv/modules/objdetect/src/_lsvm_fft.h' l='41' type='int fftInverse(float * x_in, float * x_out, int n, int shift)'/>
<def f='opencv/modules/objdetect/src/fft.cpp' l='120' ll='170' type='int fftInverse(float * x_in, float * x_out, int n, int shift)'/>
<use f='opencv/modules/objdetect/src/fft.cpp' l='128' u='c' c='_Z10fftInversePfS_ii'/>
<use f='opencv/modules/objdetect/src/fft.cpp' l='129' u='c' c='_Z10fftInversePfS_ii'/>
<use f='opencv/modules/objdetect/src/fft.cpp' l='234' u='c' c='_Z12fftInverse2dPfS_ii'/>
<use f='opencv/modules/objdetect/src/fft.cpp' l='240' u='c' c='_Z12fftInverse2dPfS_ii'/>
<doc f='opencv/modules/objdetect/src/fft.cpp' l='104'>/*
// Inverse 1-dimensional FFT
//
// API
// int fftInverse(float *x_in, float *x_out, int n, int shift);
// INPUT
// x_in              - Fourier image of 1d input signal(contains 2n elements
                       in order Re(x_in[0]), Im(x_in[0]),
                       Re(x_in[1]), Im(x_in[1]) and etc.)
// n                 - number of elements for searching counter FFT image
// shift             - shift between input elements
// OUTPUT
// x_in              - input signal (contains n elements)
// RESULT
// Error status
*/</doc>
<doc f='opencv/modules/objdetect/src/_lsvm_fft.h' l='25'>/*
// Inverse 1-dimensional FFT
//
// API
// int fftInverse(float *x_in, float *x_out, int n, int shift);
// INPUT
// x_in              - Fourier image of 1d input signal(contains 2n elements
                       in order Re(x_in[0]), Im(x_in[0]),
                       Re(x_in[1]), Im(x_in[1]) and etc.)
// n                 - number of elements for searching counter FFT image
// shift             - shift between input elements
// OUTPUT
// x_in              - input signal (contains n elements)
// RESULT
// Error status
*/</doc>
