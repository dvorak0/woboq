<dec f='opencv/modules/ts/include/opencv2/ts/ts_gtest.h' l='7671' type='std::string testing::internal::GetCurrentOsStackTraceExceptTop(testing::UnitTest * unit_test, int skip_count)'/>
<doc f='opencv/modules/ts/include/opencv2/ts/ts_gtest.h' l='7661'>// Returns the current OS stack trace as an std::string.
//
// The maximum number of stack frames to be included is specified by
// the gtest_stack_trace_depth flag.  The skip_count parameter
// specifies the number of top frames to be skipped, which doesn&apos;t
// count against the number of frames to be included.
//
// For example, if Foo() calls Bar(), which in turn calls
// GetCurrentOsStackTraceExceptTop(..., 1), Foo() will be included in
// the trace but Bar() and GetCurrentOsStackTraceExceptTop() won&apos;t.</doc>
<def f='opencv/modules/ts/src/ts_gtest.cpp' l='6149' ll='6154' type='std::string testing::internal::GetCurrentOsStackTraceExceptTop(testing::UnitTest * , int skip_count)'/>
<doc f='opencv/modules/ts/src/ts_gtest.cpp' l='6139'>// Returns the current OS stack trace as an std::string.
//
// The maximum number of stack frames to be included is specified by
// the gtest_stack_trace_depth flag.  The skip_count parameter
// specifies the number of top frames to be skipped, which doesn&apos;t
// count against the number of frames to be included.
//
// For example, if Foo() calls Bar(), which in turn calls
// GetCurrentOsStackTraceExceptTop(..., 1), Foo() will be included in
// the trace but Bar() and GetCurrentOsStackTraceExceptTop() won&apos;t.</doc>
<doc f='opencv/modules/ts/src/ts_gtest.cpp' l='6149'>/*unit_test*/</doc>
