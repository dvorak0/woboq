<dec f='opencv/modules/contrib/src/retinafilter.hpp' l='177' type='void cv::RetinaFilter::runGrayToneMapping(const std::valarray&lt;float&gt; &amp; grayImageInput, std::valarray&lt;float&gt; &amp; grayImageOutput, const float PhotoreceptorsCompression = 0.59999999999999998, const float ganglionCellsCompression = 0.59999999999999998)'/>
<doc f='opencv/modules/contrib/src/retinafilter.hpp' l='168'>/**
    * run the initilized retina filter in order to perform color tone mapping applied on an RGB image, after this call the color output of the retina is updated (use function getColorOutput() to grab it)
    * the algorithm is based on David Alleyson, Sabine Susstruck and Laurence Meylan&apos;s work, please cite:
    * -&gt; Meylan L., Alleysson D., and S�sstrunk S., A Model of Retinal Local Adaptation for the Tone Mapping of Color Filter Array Images, Journal of Optical Society of America, A, Vol. 24, N� 9, September, 1st, 2007, pp. 2807-2816
    * get the resulting gray frame by calling function getParvoColor()
    * @param grayImageInput: RGB image input buffer respecting the size specified at the constructor level
    * @param PhotoreceptorsCompression: sets the log compression parameters applied at the photoreceptors level (enhance luminance in dark areas)
    * @param ganglionCellsCompression: sets the log compression applied at the gnaglion cells output (enhance contrast)
    */</doc>
<def f='opencv/modules/contrib/src/retinafilter.cpp' l='358' ll='365' type='void cv::RetinaFilter::runGrayToneMapping(const std::valarray&lt;float&gt; &amp; grayImageInput, std::valarray&lt;float&gt; &amp; grayImageOutput, const float PhotoreceptorsCompression = 0.59999999999999998, const float ganglionCellsCompression = 0.59999999999999998)'/>
<doc f='opencv/modules/contrib/src/retinafilter.cpp' l='357'>// run the initilized retina filter in order to perform gray image tone mapping, after this call all retina outputs are updated</doc>
