<dec f='opencv/modules/contrib/src/basicretinafilter.hpp' l='193' type='const std::valarray&lt;float&gt; &amp; cv::BasicRetinaFilter::runFilter_LocalAdapdation(const std::valarray&lt;float&gt; &amp; inputOutputFrame, const std::valarray&lt;float&gt; &amp; localLuminance)'/>
<def f='opencv/modules/contrib/src/basicretinafilter.cpp' l='296' ll='300' type='const std::valarray&lt;float&gt; &amp; cv::BasicRetinaFilter::runFilter_LocalAdapdation(const std::valarray&lt;float&gt; &amp; inputFrame, const std::valarray&lt;float&gt; &amp; localLuminance)'/>
<doc f='opencv/modules/contrib/src/basicretinafilter.cpp' l='293'>///////////////////////////////////////////////////////////////////////
/// Local luminance adaptation functions
// run local adaptation filter and save result in _filterOutput</doc>
<doc f='opencv/modules/contrib/src/basicretinafilter.hpp' l='187'>/**
        *  local luminance adaptation call and run (contrast enhancement property of the photoreceptors)
        * @param inputOutputFrame: the input image to be processed
        * @param localLuminance: an image which represents the local luminance of the inputFrame parameter, in general, it is its low pass spatial filtering
        * @return the processed image, the output is reachable later by using function getOutput()
        */</doc>
<doc f='opencv/modules/contrib/src/basicretinafilter.hpp' l='193'>// run local adaptation filter and save result in _filterOutput</doc>
<use f='opencv/modules/contrib/src/retinafilter.cpp' l='303' u='c' c='_ZN2cv12RetinaFilter9runFilterERKSt8valarrayIfEbbbb'/>
