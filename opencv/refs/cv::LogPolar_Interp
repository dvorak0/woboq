<def f='opencv/modules/contrib/include/opencv2/contrib/contrib.hpp' l='654' ll='708'/>
<size>456</size>
<doc f='opencv/modules/contrib/include/opencv2/contrib/contrib.hpp' l='645'>/**
    *Bilinear interpolation technique.
    *
    *The value of a desired cortical pixel is obtained through a bilinear interpolation of the values
    *of the four nearest neighbouring Cartesian pixels to the center of the RF.
    *The same principle is applied to the inverse transformation.
    *
    *More details can be found in http://dx.doi.org/10.1007/978-3-642-23968-7_5
    */</doc>
<fun r='_ZN2cv15LogPolar_InterpC1Ev'/>
<fun r='_ZN2cv15LogPolar_InterpC1EiiNS_6Point_IiEEidiiii'/>
<fun r='_ZN2cv15LogPolar_Interp11to_corticalERKNS_3MatE'/>
<fun r='_ZN2cv15LogPolar_Interp12to_cartesianERKNS_3MatE'/>
<fun r='_ZN2cv15LogPolar_InterpD1Ev'/>
<mbr r='cv::LogPolar_Interp::Rsri' o='0' t='cv::Mat'/>
<mbr r='cv::LogPolar_Interp::Csri' o='768' t='cv::Mat'/>
<mbr r='cv::LogPolar_Interp::S' o='1536' t='int'/>
<mbr r='cv::LogPolar_Interp::R' o='1568' t='int'/>
<mbr r='cv::LogPolar_Interp::M' o='1600' t='int'/>
<mbr r='cv::LogPolar_Interp::N' o='1632' t='int'/>
<mbr r='cv::LogPolar_Interp::top' o='1664' t='int'/>
<mbr r='cv::LogPolar_Interp::bottom' o='1696' t='int'/>
<mbr r='cv::LogPolar_Interp::left' o='1728' t='int'/>
<mbr r='cv::LogPolar_Interp::right' o='1760' t='int'/>
<mbr r='cv::LogPolar_Interp::ro0' o='1792' t='double'/>
<mbr r='cv::LogPolar_Interp::romax' o='1856' t='double'/>
<mbr r='cv::LogPolar_Interp::a' o='1920' t='double'/>
<mbr r='cv::LogPolar_Interp::q' o='1984' t='double'/>
<mbr r='cv::LogPolar_Interp::interp' o='2048' t='int'/>
<mbr r='cv::LogPolar_Interp::ETAyx' o='2112' t='cv::Mat'/>
<mbr r='cv::LogPolar_Interp::CSIyx' o='2880' t='cv::Mat'/>
<fun r='_ZN2cv15LogPolar_Interp10create_mapEiiiid'/>
