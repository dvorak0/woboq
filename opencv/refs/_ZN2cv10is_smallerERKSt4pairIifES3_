<def f='opencv/modules/calib3d/src/quadsubpix.cpp' l='84' ll='87' type='bool cv::is_smaller(const std::pair&lt;int, float&gt; &amp; p1, const std::pair&lt;int, float&gt; &amp; p2)'/>
<use f='opencv/modules/calib3d/src/quadsubpix.cpp' l='105' u='r' c='_ZN2cvL13orderContoursERKSt6vectorIS0_INS_6Point_IiEESaIS2_EESaIS4_EENS1_IfEERS0_ISt4pairIifESaISB_EE'/>
<doc f='opencv/modules/calib3d/src/quadsubpix.cpp' l='57'>// static void drawCircles(Mat&amp; img, const vector&lt;Point2f&gt;&amp; corners, const vector&lt;float&gt;&amp; radius)
// {
//     for(size_t i = 0; i &lt; corners.size(); i++)
//     {
//         circle(img, corners[i], cvRound(radius[i]), CV_RGB(255, 0, 0));
//     }
// }

// static int histQuantile(const Mat&amp; hist, float quantile)
// {
//     if(hist.dims &gt; 1) return -1; // works for 1D histograms only

//     float cur_sum = 0;
//     float total_sum = (float)sum(hist).val[0];
//     float quantile_sum = total_sum*quantile;
//     for(int j = 0; j &lt; hist.size[0]; j++)
//     {
//         cur_sum += (float)hist.at&lt;float&gt;(j);
//         if(cur_sum &gt; quantile_sum)
//         {
//             return j;
//         }
//     }

//     return hist.size[0] - 1;
// }</doc>
