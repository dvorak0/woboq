<dec f='include/libavcodec/avcodec.h' l='3690' type='int avcodec_decode_video2(AVCodecContext * avctx, AVFrame * picture, int * got_picture_ptr, AVPacket * avpkt)'/>
<use f='opencv/modules/highgui/src/cap_ffmpeg_impl.hpp' l='907' u='c' c='_ZN16CvCapture_FFMPEG9grabFrameEv'/>
<doc f='include/libavcodec/avcodec.h' l='3649'>/**
 * Decode the video frame of size avpkt-&gt;size from avpkt-&gt;data into picture.
 * Some decoders may support multiple frames in a single AVPacket, such
 * decoders would then just decode the first frame.
 *
 * @warning The input buffer must be FF_INPUT_BUFFER_PADDING_SIZE larger than
 * the actual read bytes because some optimized bitstream readers read 32 or 64
 * bits at once and could read over the end.
 *
 * @warning The end of the input buffer buf should be set to 0 to ensure that
 * no overreading happens for damaged MPEG streams.
 *
 * @note You might have to align the input buffer avpkt-&gt;data.
 * The alignment requirements depend on the CPU: on some CPUs it isn&apos;t
 * necessary at all, on others it won&apos;t work at all if not aligned and on others
 * it will work but it will have an impact on performance.
 *
 * In practice, avpkt-&gt;data should have 4 byte alignment at minimum.
 *
 * @note Codecs which have the CODEC_CAP_DELAY capability set have a delay
 * between input and output, these need to be fed with avpkt-&gt;data=NULL,
 * avpkt-&gt;size=0 at the end to return the remaining frames.
 *
 * @param avctx the codec context
 * @param[out] picture The AVFrame in which the decoded video frame will be stored.
 *             Use avcodec_alloc_frame to get an AVFrame, the codec will
 *             allocate memory for the actual bitmap.
 *             with default get/release_buffer(), the decoder frees/reuses the bitmap as it sees fit.
 *             with overridden get/release_buffer() (needs CODEC_CAP_DR1) the user decides into what buffer the decoder
 *                   decodes and the decoder tells the user once it does not need the data anymore,
 *                   the user app can at this point free/reuse/keep the memory as it sees fit.
 *
 * @param[in] avpkt The input AVpacket containing the input buffer.
 *            You can create such packet with av_init_packet() and by then setting
 *            data and size, some decoders might in addition need other fields like
 *            flags&amp;AV_PKT_FLAG_KEY. All decoders are designed to use the least
 *            fields possible.
 * @param[in,out] got_picture_ptr Zero if no frame could be decompressed, otherwise, it is nonzero.
 * @return On error a negative value is returned, otherwise the number of bytes
 * used or zero if no frame could be decompressed.
 */</doc>
