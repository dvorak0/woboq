<dec f='include/eigen3/Eigen/src/Core/util/Memory.h' l='144' type='void * Eigen::internal::aligned_malloc(std::size_t size)'/>
<use f='include/eigen3/Eigen/src/Core/util/Memory.h' l='155' u='c' c='_ZN5Eigen8internal23generic_aligned_reallocEPvmm'/>
<use f='include/eigen3/Eigen/src/Core/util/Memory.h' l='163' u='c' c='_ZN5Eigen8internal23generic_aligned_reallocEPvmm'/>
<def f='include/eigen3/Eigen/src/Core/util/Memory.h' l='212' ll='235' type='void * Eigen::internal::aligned_malloc(size_t size)'/>
<use f='include/eigen3/Eigen/src/Core/util/Memory.h' l='301' u='c' c='_ZN5Eigen8internal26conditional_aligned_mallocEm'/>
<use f='include/eigen3/Eigen/src/Core/util/Memory.h' l='376' u='c' c='_ZN5Eigen8internal11aligned_newEm'/>
<use f='include/eigen3/Eigen/src/Core/util/Memory.h' l='724' u='c' c='_ZN5Eigen17aligned_allocator8allocateEmPKv'/>
<use f='include/eigen3/Eigen/src/Core/GeneralProduct.h' l='443' macro='1' u='c'/>
<use f='include/eigen3/Eigen/src/Core/GeneralProduct.h' l='508' macro='1' u='c'/>
<use f='include/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h' l='157' macro='1' u='c'/>
<use f='include/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h' l='158' macro='1' u='c'/>
<use f='include/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h' l='159' macro='1' u='c'/>
<use f='include/eigen3/Eigen/src/Core/SolveTriangular.h' l='65' macro='1' u='c'/>
<use f='include/eigen3/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h' l='78' macro='1' u='c'/>
<use f='include/eigen3/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h' l='79' macro='1' u='c'/>
<use f='include/eigen3/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h' l='219' macro='1' u='c'/>
<use f='include/eigen3/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h' l='224' macro='1' u='c'/>
<use f='include/eigen3/Eigen/src/Core/products/SelfadjointMatrixVector.h' l='67' macro='1' u='c'/>
<use f='include/eigen3/Eigen/src/Core/products/SelfadjointMatrixVector.h' l='212' macro='1' u='c'/>
<use f='include/eigen3/Eigen/src/Core/products/SelfadjointMatrixVector.h' l='215' macro='1' u='c'/>
<use f='include/eigen3/Eigen/src/Core/products/SelfadjointMatrixMatrix.h' l='266' macro='1' u='c'/>
<use f='include/eigen3/Eigen/src/Core/products/SelfadjointMatrixMatrix.h' l='267' macro='1' u='c'/>
<use f='include/eigen3/Eigen/src/Core/products/SelfadjointMatrixMatrix.h' l='353' macro='1' u='c'/>
<use f='include/eigen3/Eigen/src/Core/products/SelfadjointMatrixMatrix.h' l='354' macro='1' u='c'/>
<use f='include/eigen3/Eigen/src/Core/products/SelfadjointProduct.h' l='70' macro='1' u='c'/>
<use f='include/eigen3/Eigen/src/Core/products/TriangularMatrixVector.h' l='253' macro='1' u='c'/>
<use f='include/eigen3/Eigen/src/Core/products/TriangularMatrixVector.h' l='319' macro='1' u='c'/>
<use f='include/eigen3/Eigen/src/Core/products/TriangularMatrixMatrix.h' l='130' macro='1' u='c'/>
<use f='include/eigen3/Eigen/src/Core/products/TriangularMatrixMatrix.h' l='131' macro='1' u='c'/>
<use f='include/eigen3/Eigen/src/Core/products/TriangularMatrixMatrix.h' l='132' macro='1' u='c'/>
<use f='include/eigen3/Eigen/src/Core/products/TriangularMatrixMatrix.h' l='271' macro='1' u='c'/>
<use f='include/eigen3/Eigen/src/Core/products/TriangularMatrixMatrix.h' l='272' macro='1' u='c'/>
<use f='include/eigen3/Eigen/src/Core/products/TriangularMatrixMatrix.h' l='273' macro='1' u='c'/>
<use f='include/eigen3/Eigen/src/Core/products/TriangularSolverMatrix.h' l='71' macro='1' u='c'/>
<use f='include/eigen3/Eigen/src/Core/products/TriangularSolverMatrix.h' l='72' macro='1' u='c'/>
<use f='include/eigen3/Eigen/src/Core/products/TriangularSolverMatrix.h' l='73' macro='1' u='c'/>
<use f='include/eigen3/Eigen/src/Core/products/TriangularSolverMatrix.h' l='220' macro='1' u='c'/>
<use f='include/eigen3/Eigen/src/Core/products/TriangularSolverMatrix.h' l='221' macro='1' u='c'/>
<use f='include/eigen3/Eigen/src/Core/products/TriangularSolverMatrix.h' l='222' macro='1' u='c'/>
<doc f='include/eigen3/Eigen/src/Core/util/Memory.h' l='140'>/*****************************************************************************
*** Implementation of generic aligned realloc (when no realloc can be used)***
*****************************************************************************/</doc>
<doc f='include/eigen3/Eigen/src/Core/util/Memory.h' l='209'>/** \internal Allocates \a size bytes. The returned pointer is guaranteed to have 16 bytes alignment.
  * On allocation error, the returned pointer is null, and std::bad_alloc is thrown.
  */</doc>
