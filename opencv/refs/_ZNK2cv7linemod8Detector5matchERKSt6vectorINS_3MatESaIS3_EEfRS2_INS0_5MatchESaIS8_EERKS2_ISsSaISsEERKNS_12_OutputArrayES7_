<dec f='opencv/modules/objdetect/include/opencv2/objdetect/objdetect.hpp' l='968' type='void cv::linemod::Detector::match(const std::vector&lt;Mat&gt; &amp; sources, float threshold, std::vector&lt;Match&gt; &amp; matches, const std::vector&lt;std::string&gt; &amp; class_ids = std::vector&lt;std::string&gt;(), OutputArrayOfArrays quantized_images = noArray(), const std::vector&lt;Mat&gt; &amp; masks = std::vector&lt;Mat&gt;()) const'/>
<doc f='opencv/modules/objdetect/include/opencv2/objdetect/objdetect.hpp' l='953'>/**
   * \brief Detect objects by template matching.
   *
   * Matches globally at the lowest pyramid level, then refines locally stepping up the pyramid.
   *
   * \param      sources   Source images, one for each modality.
   * \param      threshold Similarity threshold, a percentage between 0 and 100.
   * \param[out] matches   Template matches, sorted by similarity score.
   * \param      class_ids If non-empty, only search for the desired object classes.
   * \param[out] quantized_images Optionally return vector&lt;Mat&gt; of quantized images.
   * \param      masks     The masks for consideration during matching. The masks should be CV_8UC1
   *                       where 255 represents a valid pixel.  If non-empty, the vector must be
   *                       the same size as sources.  Each element must be
   *                       empty or the same size as its corresponding source.
   */</doc>
<def f='opencv/modules/objdetect/src/linemod.cpp' l='1404' ll='1483' type='void cv::linemod::Detector::match(const std::vector&lt;Mat&gt; &amp; sources, float threshold, std::vector&lt;Match&gt; &amp; matches, const std::vector&lt;std::string&gt; &amp; class_ids = std::vector&lt;std::string&gt;(), OutputArrayOfArrays quantized_images = noArray(), const std::vector&lt;Mat&gt; &amp; masks = std::vector&lt;Mat&gt;()) const'/>
