<dec f='opencv/modules/gpu/include/opencv2/gpu/gpu.hpp' l='1489' type='void cv::gpu::BruteForceMatcher_GPU_base::radiusMatchCollection(const cv::gpu::GpuMat &amp; query, cv::gpu::GpuMat &amp; trainIdx, cv::gpu::GpuMat &amp; imgIdx, cv::gpu::GpuMat &amp; distance, cv::gpu::GpuMat &amp; nMatches, float maxDistance, const std::vector&lt;GpuMat&gt; &amp; masks = std::vector&lt;GpuMat&gt;(), cv::gpu::Stream &amp; stream = Stream::Null())'/>
<doc f='opencv/modules/gpu/include/opencv2/gpu/gpu.hpp' l='1485'>// Find best matches for each query descriptor which have distance less than maxDistance.
    // If trainIdx is empty, then trainIdx and distance will be created with size nQuery x max((nQuery / 100), 10),
    // otherwize user can pass own allocated trainIdx and distance with size nQuery x nMaxMatches
    // Matches doesn&apos;t sorted.</doc>
<def f='opencv/modules/gpu/src/brute_force_matcher.cpp' l='957' ll='1026' type='void cv::gpu::BruteForceMatcher_GPU_base::radiusMatchCollection(const cv::gpu::GpuMat &amp; query, cv::gpu::GpuMat &amp; trainIdx, cv::gpu::GpuMat &amp; imgIdx, cv::gpu::GpuMat &amp; distance, cv::gpu::GpuMat &amp; nMatches, float maxDistance, const vector&lt;cv::gpu::GpuMat&gt; &amp; masks = std::vector&lt;GpuMat&gt;(), cv::gpu::Stream &amp; stream = Stream::Null())'/>
<use f='opencv/modules/gpu/src/brute_force_matcher.cpp' l='1098' u='c' c='_ZN2cv3gpu26BruteForceMatcher_GPU_base11radiusMatchERKNS0_6GpuMatERSt6vectorIS5_INS_6DMatchESaIS6_EESaIS8_EEfRKS5_IS2_SaIS2_EEb'/>
