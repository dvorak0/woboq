<use f='include/eigen3/Eigen/src/Eigenvalues/GeneralizedSelfAdjointEigenSolver.h' l='111' u='c' c='_ZN5Eigen33GeneralizedSelfAdjointEigenSolverC1ERKT_S3_i'/>
<dec f='include/eigen3/Eigen/src/Eigenvalues/GeneralizedSelfAdjointEigenSolver.h' l='154' type='GeneralizedSelfAdjointEigenSolver&lt;_MatrixType&gt; &amp; Eigen::GeneralizedSelfAdjointEigenSolver::compute(const MatrixType &amp; matA, const MatrixType &amp; matB, int options = ComputeEigenvectors | Ax_lBx)'/>
<def f='include/eigen3/Eigen/src/Eigenvalues/GeneralizedSelfAdjointEigenSolver.h' l='162' ll='223' type='GeneralizedSelfAdjointEigenSolver&lt;MatrixType&gt; &amp; Eigen::GeneralizedSelfAdjointEigenSolver::compute(const MatrixType &amp; matA, const MatrixType &amp; matB, int options = ComputeEigenvectors | Ax_lBx)'/>
<doc f='include/eigen3/Eigen/src/Eigenvalues/GeneralizedSelfAdjointEigenSolver.h' l='114'>/** \brief Computes generalized eigendecomposition of given matrix pencil.
      *
      * \param[in]  matA  Selfadjoint matrix in matrix pencil.
      *                   Only the lower triangular part of the matrix is referenced.
      * \param[in]  matB  Positive-definite matrix in matrix pencil.
      *                   Only the lower triangular part of the matrix is referenced.
      * \param[in]  options A or-ed set of flags {#ComputeEigenvectors,#EigenvaluesOnly} | {#Ax_lBx,#ABx_lx,#BAx_lx}.
      *                     Default is #ComputeEigenvectors|#Ax_lBx.
      *
      * \returns    Reference to \c *this
      *
      * Accoring to \p options, this function computes eigenvalues and (if requested)
      * the eigenvectors of one of the following three generalized eigenproblems:
      * - \c Ax_lBx: \f$ Ax = \lambda B x \f$
      * - \c ABx_lx: \f$ ABx = \lambda x \f$
      * - \c BAx_lx: \f$ BAx = \lambda x \f$
      * with \a matA the selfadjoint matrix \f$ A \f$ and \a matB the positive definite
      * matrix \f$ B \f$.
      * In addition, each eigenvector \f$ x \f$ satisfies the property \f$ x^* B x = 1 \f$.
      *
      * The eigenvalues() function can be used to retrieve
      * the eigenvalues. If \p options contains ComputeEigenvectors, then the
      * eigenvectors are also computed and can be retrieved by calling
      * eigenvectors().
      *
      * The implementation uses LLT to compute the Cholesky decomposition
      * \f$ B = LL^* \f$ and computes the classical eigendecomposition
      * of the selfadjoint matrix \f$ L^{-1} A (L^*)^{-1} \f$ if \p options contains Ax_lBx
      * and of \f$ L^{*} A L \f$ otherwise. This solves the
      * generalized eigenproblem, because any solution of the generalized
      * eigenproblem \f$ Ax = \lambda B x \f$ corresponds to a solution
      * \f$ L^{-1} A (L^*)^{-1} (L^* x) = \lambda (L^* x) \f$ of the
      * eigenproblem for \f$ L^{-1} A (L^*)^{-1} \f$. Similar statements
      * can be made for the two other variants.
      *
      * Example: \include SelfAdjointEigenSolver_compute_MatrixType2.cpp
      * Output: \verbinclude SelfAdjointEigenSolver_compute_MatrixType2.out
      *
      * \sa GeneralizedSelfAdjointEigenSolver(const MatrixType&amp;, const MatrixType&amp;, int)
      */</doc>
