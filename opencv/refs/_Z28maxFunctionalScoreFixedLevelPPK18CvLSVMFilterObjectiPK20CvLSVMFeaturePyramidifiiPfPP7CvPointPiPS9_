<dec f='opencv/modules/objdetect/src/_lsvm_matching.h' l='241' type='int maxFunctionalScoreFixedLevel(const CvLSVMFilterObject ** all_F, int n, const CvLSVMFeaturePyramid * H, int level, float b, int maxXBorder, int maxYBorder, float * score, CvPoint ** points, int * kPoints, CvPoint *** partsDisplacement)'/>
<doc f='opencv/modules/objdetect/src/_lsvm_matching.h' l='213'>/*
// Computation the maximum of the score function at the level
//
// API
// int maxFunctionalScoreFixedLevel(const filterObject **all_F, int n,
                                    const featurePyramid *H,
                                    int level, float b,
                                    int maxXBorder, int maxYBorder,
                                    float *score, CvPoint **points, int *kPoints,
                                    CvPoint ***partsDisplacement);
// INPUT
// all_F             - the set of filters (the first element is root filter,
                       the other - part filters)
// n                 - the number of part filters
// H                 - feature pyramid
// level             - feature pyramid level for computation maximum score
// b                 - linear term of the score function
// maxXBorder        - the largest root filter size (X-direction)
// maxYBorder        - the largest root filter size (Y-direction)
// OUTPUT
// score             - the maximum of the score function at the level
// points            - the set of root filter positions (in the block space)
// levels            - the set of levels
// kPoints           - number of root filter positions
// partsDisplacement - displacement of part filters (in the block space)
// RESULT
// Error status
*/</doc>
<def f='opencv/modules/objdetect/src/matching.cpp' l='609' ll='825' type='int maxFunctionalScoreFixedLevel(const CvLSVMFilterObject ** all_F, int n, const CvLSVMFeaturePyramid * H, int level, float b, int maxXBorder, int maxYBorder, float * score, CvPoint ** points, int * kPoints, CvPoint *** partsDisplacement)'/>
<use f='opencv/modules/objdetect/src/matching.cpp' l='1139' u='c' c='_Z18maxFunctionalScorePPK18CvLSVMFilterObjectiPK20CvLSVMFeaturePyramidfiiPfPP7CvPointPPiSA_PS9_'/>
<use f='opencv/modules/objdetect/src/matching.cpp' l='1157' u='c' c='_Z18maxFunctionalScorePPK18CvLSVMFilterObjectiPK20CvLSVMFeaturePyramidfiiPfPP7CvPointPPiSA_PS9_'/>
<doc f='opencv/modules/objdetect/src/matching.cpp' l='581'>/*
// Computation the maximum of the score function at the level
//
// API
// int maxFunctionalScoreFixedLevel(const CvLSVMFilterObject **all_F, int n,
                                    const featurePyramid *H,
                                    int level, float b,
                                    int maxXBorder, int maxYBorder,
                                    float *score, CvPoint **points, int *kPoints,
                                    CvPoint ***partsDisplacement);
// INPUT
// all_F             - the set of filters (the first element is root filter,
                       the other - part filters)
// n                 - the number of part filters
// H                 - feature pyramid
// level             - feature pyramid level for computation maximum score
// b                 - linear term of the score function
// maxXBorder        - the largest root filter size (X-direction)
// maxYBorder        - the largest root filter size (Y-direction)
// OUTPUT
// score             - the maximum of the score function at the level
// points            - the set of root filter positions (in the block space)
// levels            - the set of levels
// kPoints           - number of root filter positions
// partsDisplacement - displacement of part filters (in the block space)
// RESULT
// Error status
*/</doc>
