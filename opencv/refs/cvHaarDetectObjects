<dec f='opencv/modules/objdetect/include/opencv2/objdetect/objdetect.hpp' l='139' type='CvSeq * cvHaarDetectObjects(const CvArr * image, CvHaarClassifierCascade * cascade, CvMemStorage * storage, double scale_factor = 1.1000000000000001, int min_neighbors = 3, int flags = 0, CvSize min_size = cvSize(0, 0), CvSize max_size = cvSize(0, 0))'/>
<doc f='opencv/modules/objdetect/include/opencv2/objdetect/objdetect.hpp' l='130'>//CVAPI(CvSeq*) cvHaarDetectObjectsForROC( const CvArr* image,
//                     CvHaarClassifierCascade* cascade, CvMemStorage* storage,
//                     CvSeq** rejectLevels, CvSeq** levelWeightds,
//                     double scale_factor CV_DEFAULT(1.1),
//                     int min_neighbors CV_DEFAULT(3), int flags CV_DEFAULT(0),
//                     CvSize min_size CV_DEFAULT(cvSize(0,0)), CvSize max_size CV_DEFAULT(cvSize(0,0)),
//                     bool outputRejectLevels = false );</doc>
<use f='opencv/apps/haartraining/performance.cpp' l='267' u='c' c='main'/>
<def f='opencv/modules/objdetect/src/haar.cpp' l='1805' ll='1816' type='CvSeq * cvHaarDetectObjects(const CvArr * _img, CvHaarClassifierCascade * cascade, CvMemStorage * storage, double scaleFactor = 1.1000000000000001, int minNeighbors = 3, int flags = 0, CvSize minSize = cvSize(0, 0), CvSize maxSize = cvSize(0, 0))'/>
<use f='opencv/modules/objdetect/test/test_cascadeandhog.cpp' l='441' u='c' c='_ZN22CV_CascadeDetectorTest18detectMultiScale_CERKSsiRKN2cv3MatERSt6vectorINS2_5Rect_IiEESaIS8_EE'/>
