<dec f='opencv/modules/gpu/include/opencv2/gpu/gpu.hpp' l='760' type='void cv::gpu::dft(const cv::gpu::GpuMat &amp; src, cv::gpu::GpuMat &amp; dst, Size dft_size, int flags = 0, cv::gpu::Stream &amp; stream = Stream::Null())'/>
<doc f='opencv/modules/gpu/include/opencv2/gpu/gpu.hpp' l='749'>//! Performs a forward or inverse discrete Fourier transform (1D or 2D) of floating point matrix.
//! Param dft_size is the size of DFT transform.
//!
//! If the source matrix is not continous, then additional copy will be done,
//! so to avoid copying ensure the source matrix is continous one. If you want to use
//! preallocated output ensure it is continuous too, otherwise it will be reallocated.
//!
//! Being implemented via CUFFT real-to-complex transform result contains only non-redundant values
//! in CUFFT&apos;s format. Result as full complex matrix for such kind of transform cannot be retrieved.
//!
//! For complex-to-real transform it is assumed that the source matrix is packed in CUFFT&apos;s format.</doc>
<use f='opencv/modules/gpu/perf/perf_imgproc.cpp' l='1160' u='c' c='_ZN20Sz_Flags_ImgProc_Dft12PerfTestBodyEv'/>
<def f='opencv/modules/gpu/src/imgproc.cpp' l='1268' ll='1362' type='void cv::gpu::dft(const cv::gpu::GpuMat &amp; src, cv::gpu::GpuMat &amp; dst, Size dft_size, int flags = 0, cv::gpu::Stream &amp; stream = Stream::Null())'/>
<doc f='opencv/modules/gpu/src/imgproc.cpp' l='1265'>//////////////////////////////////////////////////////////////////////////////
// dft</doc>
<use f='opencv/modules/gpu/test/test_imgproc.cpp' l='1028' u='c' c='_ZN12_GLOBAL__N_17testC2CERKSsiiib'/>
<use f='opencv/modules/gpu/test/test_imgproc.cpp' l='1088' u='c' c='_ZN12_GLOBAL__N_114testR2CThenC2RERKSsiib'/>
<use f='opencv/modules/gpu/test/test_imgproc.cpp' l='1089' u='c' c='_ZN12_GLOBAL__N_114testR2CThenC2RERKSsiib'/>
