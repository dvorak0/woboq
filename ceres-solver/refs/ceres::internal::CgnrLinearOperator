<inh f='ceres-solver/internal/ceres/linear_operator.h' l='43' c='ceres::internal::LinearOperator'/>
<def f='ceres-solver/internal/ceres/cgnr_linear_operator.h' l='80' ll='115'/>
<size>32</size>
<doc f='ceres-solver/internal/ceres/cgnr_linear_operator.h' l='44'>// A linear operator which takes a matrix A and a diagonal vector D and
// performs products of the form
//
//   (A^T A + D^T D)x
//
// This is used to implement iterative general sparse linear solving with
// conjugate gradients, where A is the Jacobian and D is a regularizing
// parameter. A brief proof that D^T D is the correct regularizer:
//
// Given a regularized least squares problem:
//
//   min  ||Ax - b||^2 + ||Dx||^2
//    x
//
// First expand into matrix notation:
//
//   (Ax - b)^T (Ax - b) + xD^TDx
//
// Then multiply out to get:
//
//   = xA^TAx - 2b^T Ax + b^Tb + xD^TDx
//
// Take the derivative:
//
//   0 = 2A^TAx - 2A^T b + 2 D^TDx
//   0 = A^TAx - A^T b + D^TDx
//   0 = (A^TA + D^TD)x - A^T b
//
// Thus, the symmetric system we need to solve for CGNR is
//
//   Sx = z
//
// with S = A^TA + D^TD
//  and z = A^T b
//
// Note: This class is not thread safe, since it uses some temporary storage.</doc>
<fun r='_ZN5ceres8internal18CgnrLinearOperatorC1ERKNS0_14LinearOperatorEPKd'/>
<fun r='_ZN5ceres8internal18CgnrLinearOperatorD1Ev'/>
<fun r='_ZNK5ceres8internal18CgnrLinearOperator13RightMultiplyEPKdPd'/>
<fun r='_ZNK5ceres8internal18CgnrLinearOperator12LeftMultiplyEPKdPd'/>
<fun r='_ZNK5ceres8internal18CgnrLinearOperator8num_rowsEv'/>
<fun r='_ZNK5ceres8internal18CgnrLinearOperator8num_colsEv'/>
<mbr r='ceres::internal::CgnrLinearOperator::A_' o='64' t='const ceres::internal::LinearOperator &amp;'/>
<mbr r='ceres::internal::CgnrLinearOperator::D_' o='128' t='const double *'/>
<mbr r='ceres::internal::CgnrLinearOperator::z_' o='192' t='scoped_array&lt;double&gt;'/>
