<dec f='ceres-solver/include/ceres/problem.h' l='214' type='ResidualBlockId ceres::Problem::AddResidualBlock(ceres::CostFunction * cost_function, ceres::LossFunction * loss_function, const std::vector&lt;double *&gt; &amp; parameter_blocks)'/>
<doc f='ceres-solver/include/ceres/problem.h' l='177'>// Add a residual block to the overall cost function. The cost
  // function carries with it information about the sizes of the
  // parameter blocks it expects. The function checks that these match
  // the sizes of the parameter blocks listed in parameter_blocks. The
  // program aborts if a mismatch is detected. loss_function can be
  // NULL, in which case the cost of the term is just the squared norm
  // of the residuals.
  //
  // The user has the option of explicitly adding the parameter blocks
  // using AddParameterBlock. This causes additional correctness
  // checking; however, AddResidualBlock implicitly adds the parameter
  // blocks if they are not present, so calling AddParameterBlock
  // explicitly is not required.
  //
  // The Problem object by default takes ownership of the
  // cost_function and loss_function pointers. These objects remain
  // live for the life of the Problem object. If the user wishes to
  // keep control over the destruction of these objects, then they can
  // do this by setting the corresponding enums in the Options struct.
  //
  // Note: Even though the Problem takes ownership of cost_function
  // and loss_function, it does not preclude the user from re-using
  // them in another residual block. The destructor takes care to call
  // delete on each cost_function or loss_function pointer only once,
  // regardless of how many residual blocks refer to them.
  //
  // Example usage:
  //
  //   double x1[] = {1.0, 2.0, 3.0};
  //   double x2[] = {1.0, 2.0, 5.0, 6.0};
  //   double x3[] = {3.0, 6.0, 2.0, 5.0, 1.0};
  //
  //   Problem problem;
  //
  //   problem.AddResidualBlock(new MyUnaryCostFunction(...), NULL, x1);
  //   problem.AddResidualBlock(new MyBinaryCostFunction(...), NULL, x2, x1);
  //</doc>
<use f='ceres-solver/examples/denoising.cc' l='129' u='c' c='_ZN5ceres8examples13CreateProblemERKNS0_15FieldsOfExpertsERKNS0_8PGMImageIdEEPNS_7ProblemEPS5_'/>
<use f='ceres-solver/examples/ellipse_approximation.cc' l='421' u='c' c='main'/>
<use f='ceres-solver/examples/robot_pose_mle.cc' l='296' u='c' c='main'/>
<use f='ceres-solver/internal/ceres/c_api.cc' l='169' u='c' c='ceres_problem_add_residual_block'/>
<def f='ceres-solver/internal/ceres/problem.cc' l='47' ll='54' type='ResidualBlockId ceres::Problem::AddResidualBlock(ceres::CostFunction * cost_function, ceres::LossFunction * loss_function, const vector&lt;double *&gt; &amp; parameter_blocks)'/>
<use f='ceres-solver/internal/ceres/trust_region_minimizer_test.cc' l='386' u='c' c='_ZN5ceres8internal43TrustRegionMinimizer_JacobiScalingTest_Test8TestBodyEv'/>
