<dec f='ceres-solver/internal/ceres/suitesparse.h' l='146' type='cholmod_factor * ceres::internal::SuiteSparse::AnalyzeCholesky(cholmod_sparse * A, std::string * message)'/>
<doc f='ceres-solver/internal/ceres/suitesparse.h' l='133'>// Find an ordering of A or AA&apos; (if A is unsymmetric) that minimizes
  // the fill-in in the Cholesky factorization of the corresponding
  // matrix. This is done by using the AMD algorithm.
  //
  // Using this ordering, the symbolic Cholesky factorization of A (or
  // AA&apos;) is computed and returned.
  //
  // A is not modified, only the pattern of non-zeros of A is used,
  // the actual numerical values in A are of no consequence.
  //
  // message contains an explanation of the failures if any.
  //
  // Caller owns the result.</doc>
<use f='ceres-solver/internal/ceres/dynamic_sparse_normal_cholesky_solver.cc' l='260' u='c' c='_ZN5ceres8internal33DynamicSparseNormalCholeskySolver25SolveImplUsingSuiteSparseEPNS0_25CompressedRowSparseMatrixEPd'/>
<def f='ceres-solver/internal/ceres/suitesparse.cc' l='138' ll='160' type='cholmod_factor * ceres::internal::SuiteSparse::AnalyzeCholesky(cholmod_sparse * A, string * message)'/>
