<dec f='include/eigen3/Eigen/src/Core/MatrixBase.h' l='358' type='void Eigen::MatrixBase::computeInverseWithCheck(ResultType &amp; inverse, bool &amp; invertible, const RealScalar &amp; absDeterminantThreshold = NumTraits&lt;Scalar&gt;::dummy_precision()) const'/>
<def f='include/eigen3/Eigen/src/LU/Inverse.h' l='384' ll='396' type='void Eigen::MatrixBase::computeInverseWithCheck(ResultType &amp; inverse, bool &amp; invertible, const RealScalar &amp; absDeterminantThreshold = NumTraits&lt;Scalar&gt;::dummy_precision()) const'/>
<doc f='include/eigen3/Eigen/src/LU/Inverse.h' l='367'>/** \lu_module
  *
  * Computation of matrix inverse, with invertibility check.
  *
  * This is only for fixed-size square matrices of size up to 4x4.
  *
  * \param inverse Reference to the matrix in which to store the inverse.
  * \param invertible Reference to the bool variable in which to store whether the matrix is invertible.
  * \param absDeterminantThreshold Optional parameter controlling the invertibility check.
  *                                The matrix will be declared invertible if the absolute value of its
  *                                determinant is greater than this threshold.
  *
  * Example: \include MatrixBase_computeInverseWithCheck.cpp
  * Output: \verbinclude MatrixBase_computeInverseWithCheck.out
  *
  * \sa inverse(), computeInverseAndDetWithCheck()
  */</doc>
