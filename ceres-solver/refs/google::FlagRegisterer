<def f='include/gflags/gflags.h' l='429' ll='434'/>
<size>1</size>
<doc f='include/gflags/gflags.h' l='392'>// --------------------------------------------------------------------
// Now come the command line flag declaration/definition macros that
// will actually be used.  They&apos;re kind of hairy.  A major reason
// for this is initialization: we want people to be able to access
// variables in global constructors and have that not crash, even if
// their global constructor runs before the global constructor here.
// (Obviously, we can&apos;t guarantee the flags will have the correct
// default value in that case, but at least accessing them is safe.)
// The only way to do that is have flags point to a static buffer.
// So we make one, using a union to ensure proper alignment, and
// then use placement-new to actually set up the flag with the
// correct default value.  In the same vein, we have to worry about
// flag access in global destructors, so FlagRegisterer has to be
// careful never to destroy the flag-values it constructs.
//
// Note that when we define a flag variable FLAGS_&lt;name&gt;, we also
// preemptively define a junk variable, FLAGS_no&lt;name&gt;.  This is to
// cause a link-time error if someone tries to define 2 flags with
// names like &quot;logging&quot; and &quot;nologging&quot;.  We do this because a bool
// flag FLAG can be set from the command line to true with a &quot;-FLAG&quot;
// argument, and to false with a &quot;-noFLAG&quot; argument, and so this can
// potentially avert confusion.
//
// We also put flags into their own namespace.  It is purposefully
// named in an opaque way that people should have trouble typing
// directly.  The idea is that DEFINE puts the flag in the weird
// namespace, and DECLARE imports the flag from there into the current
// namespace.  The net result is to force people to use DECLARE to get
// access to a flag, rather than saying &quot;extern bool FLAGS_whatever;&quot;
// or some such instead.  We want this so we can put extra
// functionality (like sanity-checking) in DECLARE if we want, and
// make sure it is picked up everywhere.
//
// We also put the type of the variable in the namespace, so that
// people can&apos;t DECLARE_int32 something that they DEFINE_bool&apos;d
// elsewhere.</doc>
<fun r='_ZN6google14FlagRegistererC1EPKcS2_S2_S2_PvS3_'/>
