<def f='include/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h' l='61' ll='301'/>
<doc f='include/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h' l='29'>/** \eigenvalues_module \ingroup Eigenvalues_Module
  *
  *
  * \class Tridiagonalization
  *
  * \brief Tridiagonal decomposition of a selfadjoint matrix
  *
  * \tparam _MatrixType the type of the matrix of which we are computing the
  * tridiagonal decomposition; this is expected to be an instantiation of the
  * Matrix class template.
  *
  * This class performs a tridiagonal decomposition of a selfadjoint matrix \f$ A \f$ such that:
  * \f$ A = Q T Q^* \f$ where \f$ Q \f$ is unitary and \f$ T \f$ a real symmetric tridiagonal matrix.
  *
  * A tridiagonal matrix is a matrix which has nonzero elements only on the
  * main diagonal and the first diagonal below and above it. The Hessenberg
  * decomposition of a selfadjoint matrix is in fact a tridiagonal
  * decomposition. This class is used in SelfAdjointEigenSolver to compute the
  * eigenvalues and eigenvectors of a selfadjoint matrix.
  *
  * Call the function compute() to compute the tridiagonal decomposition of a
  * given matrix. Alternatively, you can use the Tridiagonalization(const MatrixType&amp;)
  * constructor which computes the tridiagonal Schur decomposition at
  * construction time. Once the decomposition is computed, you can use the
  * matrixQ() and matrixT() functions to retrieve the matrices Q and T in the
  * decomposition.
  *
  * The documentation of Tridiagonalization(const MatrixType&amp;) contains an
  * example of the typical use of this class.
  *
  * \sa class HessenbergDecomposition, class SelfAdjointEigenSolver
  */</doc>
<fun r='_ZN5Eigen18TridiagonalizationC1ENT_5IndexE'/>
<fun r='_ZN5Eigen18TridiagonalizationC1ERKT_'/>
<fun r='_ZN5Eigen18Tridiagonalization7computeERKT_'/>
<fun r='_ZNK5Eigen18Tridiagonalization23householderCoefficientsEv'/>
<fun r='_ZNK5Eigen18Tridiagonalization12packedMatrixEv'/>
<fun r='_ZNK5Eigen18Tridiagonalization7matrixQEv'/>
<fun r='_ZNK5Eigen18Tridiagonalization7matrixTEv'/>
<fun r='_ZNK5Eigen18Tridiagonalization8diagonalEv'/>
<fun r='_ZNK5Eigen18Tridiagonalization11subDiagonalEv'/>
<mbr r='Eigen::Tridiagonalization::m_matrix' t='MatrixType'/>
<mbr r='Eigen::Tridiagonalization::m_hCoeffs' t='CoeffVectorType'/>
<mbr r='Eigen::Tridiagonalization::m_isInitialized' t='bool'/>
<fun r='_ZNK5Eigen18Tridiagonalization8diagonalEv'/>
<fun r='_ZNK5Eigen18Tridiagonalization11subDiagonalEv'/>
