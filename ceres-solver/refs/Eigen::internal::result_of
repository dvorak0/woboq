<def f='include/eigen3/Eigen/src/Core/util/Meta.h' l='113'/>
<def f='include/eigen3/Eigen/src/Core/util/Meta.h' l='128' ll='139'/>
<def f='include/eigen3/Eigen/src/Core/util/Meta.h' l='152' ll='163'/>
<doc f='include/eigen3/Eigen/src/Core/util/Meta.h' l='106'>/** \internal
  * Convenient struct to get the result type of a unary or binary functor.
  *
  * It supports both the current STL mechanism (using the result_type member) as well as
  * upcoming next STL generation (using a templated result member).
  * If none of these members is provided, then the type of the first argument is returned. FIXME, that behavior is a pretty bad hack.
  */</doc>
<fun r='_ZN5Eigen8internal9result_ofIFT_T0_EE11testFunctorEPKT_PKNS6_11result_typeE'/>
<fun r='_ZN5Eigen8internal9result_ofIFT_T0_EE11testFunctorEPKT_PKNS6_6resultIFS6_S3_EE4typeE'/>
<fun r='_ZN5Eigen8internal9result_ofIFT_T0_EE11testFunctorEz'/>
<fun r='_ZN5Eigen8internal9result_ofIFT_T0_T1_EE11testFunctorEPKT_PKNS7_11result_typeE'/>
<fun r='_ZN5Eigen8internal9result_ofIFT_T0_T1_EE11testFunctorEPKT_PKNS7_6resultIFS7_S3_S4_EE4typeE'/>
<fun r='_ZN5Eigen8internal9result_ofIFT_T0_T1_EE11testFunctorEz'/>
