<dec f='ceres-solver/internal/ceres/gtest/gtest.h' l='7964' type='testing::AssertionResult testing::internal::EqFailure(const char * expected_expression, const char * actual_expression, const std::string &amp; expected_value, const std::string &amp; actual_value, bool ignoring_case)'/>
<use f='ceres-solver/internal/ceres/gtest/gtest.h' l='20258' u='c' c='_ZN7testing8internal24CmpHelperFloatingPointEQEPKcS2_T_S3_'/>
<def f='ceres-solver/internal/ceres/gmock_gtest_all.cc' l='2760' ll='2791' type='testing::AssertionResult testing::internal::EqFailure(const char * lhs_expression, const char * rhs_expression, const std::string &amp; lhs_value, const std::string &amp; rhs_value, bool ignoring_case)'/>
<use f='ceres-solver/internal/ceres/gmock_gtest_all.cc' l='2893' u='c' c='_ZN7testing8internal11CmpHelperEQEPKcS2_xx'/>
<use f='ceres-solver/internal/ceres/gmock_gtest_all.cc' l='2943' u='c' c='_ZN7testing8internal14CmpHelperSTREQEPKcS2_S2_S2_'/>
<use f='ceres-solver/internal/ceres/gmock_gtest_all.cc' l='2959' u='c' c='_ZN7testing8internal18CmpHelperSTRCASEEQEPKcS2_S2_S2_'/>
<use f='ceres-solver/internal/ceres/gmock_gtest_all.cc' l='3325' u='c' c='_ZN7testing8internal14CmpHelperSTREQEPKcS2_PKwS4_'/>
<doc f='ceres-solver/internal/ceres/gmock_gtest_all.cc' l='2745'>// Constructs and returns the message for an equality assertion
// (e.g. ASSERT_EQ, EXPECT_STREQ, etc) failure.
//
// The first four parameters are the expressions used in the assertion
// and their values, as strings.  For example, for ASSERT_EQ(foo, bar)
// where foo is 5 and bar is 6, we have:
//
//   lhs_expression: &quot;foo&quot;
//   rhs_expression: &quot;bar&quot;
//   lhs_value:      &quot;5&quot;
//   rhs_value:      &quot;6&quot;
//
// The ignoring_case parameter is true iff the assertion is a
// *_STRCASEEQ*.  When it&apos;s true, the string &quot;Ignoring case&quot; will
// be inserted into the message.</doc>
