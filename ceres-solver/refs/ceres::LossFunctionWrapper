<inh f='ceres-solver/include/ceres/loss_function.h' l='86' c='ceres::LossFunction'/>
<def f='ceres-solver/include/ceres/loss_function.h' l='387' ll='422'/>
<size>24</size>
<doc f='ceres-solver/include/ceres/loss_function.h' l='349'>// Sometimes after the optimization problem has been constructed, we
// wish to mutate the scale of the loss function. For example, when
// performing estimation from data which has substantial outliers,
// convergence can be improved by starting out with a large scale,
// optimizing the problem and then reducing the scale. This can have
// better convergence behaviour than just using a loss function with a
// small scale.
//
// This templated class allows the user to implement a loss function
// whose scale can be mutated after an optimization problem has been
// constructed.
//
// Since we treat the a NULL Loss function as the Identity loss
// function, rho = NULL is a valid input.
//
// Example usage
//
//  Problem problem;
//
//  // Add parameter blocks
//
//  CostFunction* cost_function =
//    new AutoDiffCostFunction &lt; UW_Camera_Mapper, 2, 9, 3&gt;(
//      new UW_Camera_Mapper(feature_x, feature_y));
//
//  LossFunctionWrapper* loss_function(new HuberLoss(1.0), TAKE_OWNERSHIP);
//
//  problem.AddResidualBlock(cost_function, loss_function, parameters);
//
//  Solver::Options options;
//  Solger::Summary summary;
//
//  Solve(options, &amp;problem, &amp;summary)
//
//  loss_function-&gt;Reset(new HuberLoss(1.0), TAKE_OWNERSHIP);
//
//  Solve(options, &amp;problem, &amp;summary)
//</doc>
<fun r='_ZN5ceres19LossFunctionWrapperC1EPNS_12LossFunctionENS_9OwnershipE'/>
<fun r='_ZN5ceres19LossFunctionWrapperD1Ev'/>
<fun r='_ZNK5ceres19LossFunctionWrapper8EvaluateEdPd'/>
<fun r='_ZN5ceres19LossFunctionWrapper5ResetEPNS_12LossFunctionENS_9OwnershipE'/>
<mbr r='ceres::LossFunctionWrapper::rho_' o='64' t='internal::scoped_ptr&lt;const LossFunction&gt;'/>
<mbr r='ceres::LossFunctionWrapper::ownership_' o='128' t='ceres::Ownership'/>
<fun r='_ZN5ceres19LossFunctionWrapperC1ERKS0_'/>
