<use f='ceres-solver/include/ceres/internal/numeric_diff.h' l='165' u='c' c='_ZN5ceres8internal11NumericDiff33EvaluateJacobianForParameterBlockEPKT_PKdRKNS_18NumericDiffOptionsEiiiPPdSA_'/>
<def f='ceres-solver/include/ceres/internal/numeric_diff.h' l='271' ll='407' type='static bool ceres::internal::NumericDiff::EvaluateRiddersJacobianColumn(const CostFunctor * functor, int parameter_index, double delta, const ceres::NumericDiffOptions &amp; options, int num_residuals, int parameter_block_size, const double * x_ptr, const double * residuals_at_eval_point, double ** parameters, double * x_plus_delta_ptr, double * temp_residuals_ptr, double * residuals_ptr)'/>
<doc f='ceres-solver/include/ceres/internal/numeric_diff.h' l='260'>// This numeric difference implementation uses adaptive differentiation
  // on the parameters to obtain the Jacobian matrix. The adaptive algorithm
  // is based on Ridders&apos; method for adaptive differentiation, which creates
  // a Romberg tableau from varying step sizes and extrapolates the
  // intermediate results to obtain the current computational error.
  //
  // References:
  // C.J.F. Ridders, Accurate computation of F&apos;(x) and F&apos;(x) F&quot;(x), Advances
  // in Engineering Software (1978), Volume 4, Issue 2, April 1982,
  // Pages 75-76, ISSN 0141-1195,
  // http://dx.doi.org/10.1016/S0141-1195(82)80057-0.</doc>
