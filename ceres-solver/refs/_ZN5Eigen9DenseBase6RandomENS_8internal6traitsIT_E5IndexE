<dec f='include/eigen3/Eigen/src/Core/DenseBase.h' l='446' type='static const CwiseNullaryOp&lt;internal::scalar_random_op&lt;Scalar&gt;, Derived&gt; Eigen::DenseBase::Random(Index size)'/>
<def f='include/eigen3/Eigen/src/Core/Random.h' l='74' ll='79' type='static const CwiseNullaryOp&lt;internal::scalar_random_op&lt;typename internal::traits&lt;Derived&gt;::Scalar&gt;, Derived&gt; Eigen::DenseBase::Random(Index size)'/>
<doc f='include/eigen3/Eigen/src/Core/Random.h' l='54'>/** \returns a random vector expression
  *
  * The parameter \a size is the size of the returned vector.
  * Must be compatible with this MatrixBase type.
  *
  * \only_for_vectors
  *
  * This variant is meant to be used for dynamic-size vector types. For fixed-size types,
  * it is redundant to pass \a size as argument, so Random() should be used
  * instead.
  *
  * Example: \include MatrixBase_random_int.cpp
  * Output: \verbinclude MatrixBase_random_int.out
  *
  * This expression has the &quot;evaluate before nesting&quot; flag so that it will be evaluated into
  * a temporary vector whenever it is nested in a larger expression. This prevents unexpected
  * behavior with expressions involving random matrices.
  *
  * \sa MatrixBase::setRandom(), MatrixBase::Random(Index,Index), MatrixBase::Random()
  */</doc>
<use f='ceres-solver/internal/ceres/block_random_access_diagonal_matrix_test.cc' l='138' u='c' c='_ZN5ceres8internal54BlockRandomAccessDiagonalMatrixTest_RightMultiply_Test8TestBodyEv'/>
