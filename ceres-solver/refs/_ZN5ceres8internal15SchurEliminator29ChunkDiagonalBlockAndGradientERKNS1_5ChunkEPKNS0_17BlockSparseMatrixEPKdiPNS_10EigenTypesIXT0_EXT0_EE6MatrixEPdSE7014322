<dec f='ceres-solver/internal/ceres/schur_eliminator.h' l='282' type='void ceres::internal::SchurEliminator::ChunkDiagonalBlockAndGradient(const ceres::internal::SchurEliminator::Chunk &amp; chunk, const ceres::internal::BlockSparseMatrix * A, const double * b, int row_block_counter, typename EigenTypes&lt;kEBlockSize, kEBlockSize&gt;::Matrix * eet, double * g, double * buffer, ceres::internal::BlockRandomAccessMatrix * lhs)'/>
<use f='ceres-solver/internal/ceres/schur_eliminator_impl.h' l='265' u='c' c='_ZN5ceres8internal15SchurEliminator9EliminateEPKNS0_17BlockSparseMatrixEPKdS6_PNS0_23BlockRandomAccessMatrixEPd'/>
<def f='ceres-solver/internal/ceres/schur_eliminator_impl.h' l='431' ll='490' type='void ceres::internal::SchurEliminator::ChunkDiagonalBlockAndGradient(const ceres::internal::SchurEliminator::Chunk &amp; chunk, const ceres::internal::BlockSparseMatrix * A, const double * b, int row_block_counter, typename EigenTypes&lt;kEBlockSize, kEBlockSize&gt;::Matrix * ete, double * g, double * buffer, ceres::internal::BlockRandomAccessMatrix * lhs)'/>
<doc f='ceres-solver/internal/ceres/schur_eliminator_impl.h' l='412'>// Given a Chunk - set of rows with the same e_block, e.g. in the
// following Chunk with two rows.
//
//                E                   F
//      [ y11   0   0   0 |  z11     0    0   0    z51]
//      [ y12   0   0   0 |  z12   z22    0   0      0]
//
// this function computes twp matrices. The diagonal block matrix
//
//   ete = y11 * y11&apos; + y12 * y12&apos;
//
// and the off diagonal blocks in the Guass Newton Hessian.
//
//   buffer = [y11&apos;(z11 + z12), y12&apos; * z22, y11&apos; * z51]
//
// which are zero compressed versions of the block sparse matrices E&apos;E
// and E&apos;F.
//
// and the gradient of the e_block, E&apos;b.</doc>
