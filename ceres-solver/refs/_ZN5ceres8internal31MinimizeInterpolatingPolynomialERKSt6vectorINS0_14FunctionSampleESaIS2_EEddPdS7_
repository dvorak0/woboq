<dec f='ceres-solver/internal/ceres/polynomial.h' l='127' type='void ceres::internal::MinimizeInterpolatingPolynomial(const std::vector&lt;FunctionSample&gt; &amp; samples, double x_min, double x_max, double * optimal_x, double * optimal_value)'/>
<doc f='ceres-solver/internal/ceres/polynomial.h' l='121'>// Interpolate the function described by samples with a polynomial,
// and minimize it on the interval [x_min, x_max]. Depending on the
// input samples, it is possible that the interpolation or the root
// finding algorithms may fail due to numerical difficulties. But the
// function is guaranteed to return its best guess of an answer, by
// considering the samples and the end points as possible solutions.</doc>
<use f='ceres-solver/internal/ceres/line_search.cc' l='269' u='c' c='_ZNK5ceres8internal10LineSearch41InterpolatingPolynomialMinimizingStepSizeERKNS_27LineSearchInterpolationTypeERKNS0_14FunctionSampleES7_S7_dd'/>
<def f='ceres-solver/internal/ceres/polynomial.cc' l='379' ll='398' type='void ceres::internal::MinimizeInterpolatingPolynomial(const vector&lt;ceres::internal::FunctionSample&gt; &amp; samples, double x_min, double x_max, double * optimal_x, double * optimal_value)'/>
