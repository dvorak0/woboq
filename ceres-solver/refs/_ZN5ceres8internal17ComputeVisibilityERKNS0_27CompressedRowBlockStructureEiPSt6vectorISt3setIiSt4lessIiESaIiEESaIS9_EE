<dec f='ceres-solver/internal/ceres/visibility.h' l='60' type='void ceres::internal::ComputeVisibility(const ceres::internal::CompressedRowBlockStructure &amp; block_structure, int num_eliminate_blocks, std::vector&lt;std::set&lt;int&gt; &gt; * visibility)'/>
<def f='ceres-solver/internal/ceres/visibility.cc' l='58' ll='83' type='void ceres::internal::ComputeVisibility(const ceres::internal::CompressedRowBlockStructure &amp; block_structure, const int num_eliminate_blocks, vector&lt;set&lt;int&gt; &gt; * visibility)'/>
<doc f='ceres-solver/internal/ceres/visibility.h' l='52'>// Given a compressed row block structure, computes the set of
// e_blocks &quot;visible&quot; to each f_block. If an e_block co-occurs with an
// f_block in a residual block, it is visible to the f_block. The
// first num_eliminate_blocks columns blocks are e_blocks and the rest
// f_blocks.
//
// In a structure from motion problem, e_blocks correspond to 3D
// points and f_blocks correspond to cameras.</doc>
<use f='ceres-solver/internal/ceres/visibility_based_preconditioner.cc' l='148' u='c' c='_ZN5ceres8internal29VisibilityBasedPreconditioner28ComputeClusterJacobiSparsityERKNS0_27CompressedRowBlockStructureE'/>
<use f='ceres-solver/internal/ceres/visibility_based_preconditioner.cc' l='166' u='c' c='_ZN5ceres8internal29VisibilityBasedPreconditioner33ComputeClusterTridiagonalSparsityERKNS0_27CompressedRowBlockStructureE'/>
<use f='ceres-solver/internal/ceres/visibility_test.cc' l='108' u='c' c='_ZN5ceres8internal32VisibilityTest_SimpleMatrix_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/visibility_test.cc' l='184' u='c' c='_ZN5ceres8internal29VisibilityTest_NoEBlocks_Test8TestBodyEv'/>
