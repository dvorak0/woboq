<dec f='ceres-solver/internal/ceres/suitesparse.h' l='164' type='cholmod_factor * ceres::internal::SuiteSparse::AnalyzeCholeskyWithUserOrdering(cholmod_sparse * A, const std::vector&lt;int&gt; &amp; ordering, std::string * message)'/>
<doc f='ceres-solver/internal/ceres/suitesparse.h' l='153'>// If A is symmetric, then compute the symbolic Cholesky
  // factorization of A(ordering, ordering). If A is unsymmetric, then
  // compute the symbolic factorization of
  // A(ordering,:) A(ordering,:)&apos;.
  //
  // A is not modified, only the pattern of non-zeros of A is used,
  // the actual numerical values in A are of no consequence.
  //
  // message contains an explanation of the failures if any.
  //
  // Caller owns the result.</doc>
<use f='ceres-solver/internal/ceres/suitesparse.cc' l='171' u='c' c='_ZN5ceres8internal11SuiteSparse20BlockAnalyzeCholeskyEP21cholmod_sparse_structRKSt6vectorIiSaIiEES8_PSs'/>
<def f='ceres-solver/internal/ceres/suitesparse.cc' l='174' ll='195' type='cholmod_factor * ceres::internal::SuiteSparse::AnalyzeCholeskyWithUserOrdering(cholmod_sparse * A, const vector&lt;int&gt; &amp; ordering, string * message)'/>
