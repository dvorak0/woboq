<dec f='ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix.h' l='68' type='void ceres::internal::DynamicCompressedRowSparseMatrix::DynamicCompressedRowSparseMatrix(int num_rows, int num_cols, int initial_max_num_nonzeros)'/>
<use f='ceres-solver/internal/ceres/dynamic_compressed_row_jacobian_writer.cc' l='56' u='c' c='_ZNK5ceres8internal34DynamicCompressedRowJacobianWriter14CreateJacobianEv'/>
<doc f='ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix.h' l='53'>// Set the number of rows and columns for the underlyig
  // `CompressedRowSparseMatrix` and set the initial number of maximum non-zero
  // entries. Note that following the insertion of entries, when `Finalize`
  // is called the number of non-zeros is determined and all internal
  // structures are adjusted as required. If you know the upper limit on the
  // number of non-zeros, then passing this value here can prevent future
  // memory reallocations which may improve performance. Otherwise, if no
  // upper limit is available a value of 0 is sufficient.
  //
  // Typical usage of this class is to define a new instance with a given
  // number of rows, columns and maximum number of non-zero elements
  // (if available). Next, entries are inserted at row and column positions
  // using `InsertEntry`. Finally, once all elements have been inserted,
  // `Finalize` must be called to make the underlying
  // `CompressedRowSparseMatrix` consistent.</doc>
<def f='ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix.cc' l='37' ll='46' type='void ceres::internal::DynamicCompressedRowSparseMatrix::DynamicCompressedRowSparseMatrix(int num_rows, int num_cols, int initial_max_num_nonzeros)'/>
<use f='ceres-solver/internal/ceres/dynamic_compressed_row_sparse_matrix_test.cc' l='63' u='c' c='_ZN5ceres8internal36DynamicCompressedRowSparseMatrixTest5SetUpEv'/>
