<def f='include/eigen3/Eigen/src/plugins/ArrayCwiseUnaryOps.h' l='170' ll='174' type='const CwiseUnaryOp&lt;internal::scalar_square_op&lt;Scalar&gt;, const Derived&gt; Eigen::ArrayBase::square() const'/>
<doc f='include/eigen3/Eigen/src/plugins/ArrayCwiseUnaryOps.h' l='163'>/** \returns an expression of the coefficient-wise square of *this.
  *
  * Example: \include Cwise_square.cpp
  * Output: \verbinclude Cwise_square.out
  *
  * \sa operator/(), operator*(), abs2()
  */</doc>
<use f='ceres-solver/internal/ceres/block_jacobi_preconditioner.cc' l='91' u='c' c='_ZN5ceres8internal25BlockJacobiPreconditioner10UpdateImplERKNS0_17BlockSparseMatrixEPKd'/>
<use f='ceres-solver/internal/ceres/block_jacobi_preconditioner_test.cc' l='59' u='c' c='_ZN5ceres8internal29BlockJacobiPreconditionerTest18SetUpFromProblemIdEi'/>
<use f='ceres-solver/internal/ceres/cgnr_linear_operator.h' l='99' u='c' c='_ZNK5ceres8internal18CgnrLinearOperator13RightMultiplyEPKdPd'/>
<use f='ceres-solver/internal/ceres/dense_normal_cholesky_solver.cc' l='92' u='c' c='_ZN5ceres8internal25DenseNormalCholeskySolver15SolveUsingEigenEPNS0_17DenseSparseMatrixEPKdRKNS0_12LinearSolver15PerSolveOptionsEPd'/>
<use f='ceres-solver/internal/ceres/schur_eliminator_impl.h' l='206' u='c' c='_ZN5ceres8internal15SchurEliminator9EliminateEPKNS0_17BlockSparseMatrixEPKdS6_PNS0_23BlockRandomAccessMatrixEPd'/>
<use f='ceres-solver/internal/ceres/implicit_schur_complement.cc' l='129' u='c' c='_ZNK5ceres8internal23ImplicitSchurComplement13RightMultiplyEPKdPd'/>
<use f='ceres-solver/internal/ceres/implicit_schur_complement.cc' l='156' u='c' c='_ZN5ceres8internal23ImplicitSchurComplement20AddDiagonalAndInvertEPKdPNS0_17BlockSparseMatrixE'/>
