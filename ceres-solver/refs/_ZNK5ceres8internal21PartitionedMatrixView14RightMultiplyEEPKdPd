<dec f='ceres-solver/internal/ceres/partitioned_matrix_view.h' l='124' type='void ceres::internal::PartitionedMatrixView::RightMultiplyE(const double * x, double * y) const'/>
<inh f='ceres-solver/internal/ceres/partitioned_matrix_view.h' l='73' c='_ZNK5ceres8internal25PartitionedMatrixViewBase14RightMultiplyEEPKdPd'/>
<def f='ceres-solver/internal/ceres/partitioned_matrix_view_impl.h' l='96' ll='117' type='void ceres::internal::PartitionedMatrixView::RightMultiplyE(const double * x, double * y) const'/>
<doc f='ceres-solver/internal/ceres/partitioned_matrix_view_impl.h' l='91'>// The next four methods don&apos;t seem to be particularly cache
// friendly. This is an artifact of how the BlockStructure of the
// input matrix is constructed. These methods will benefit from
// multithreading as well as improved data layout.</doc>
