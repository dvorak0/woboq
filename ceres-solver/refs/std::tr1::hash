<def f='include/c++/4.8/tr1/functional_hash.h' l='45' ll='49'/>
<def f='include/c++/4.8/tr1/functional_hash.h' l='52' ll='58'/>
<def f='ceres-solver/internal/ceres/collections_port.h' l='174' ll='191'/>
<doc f='ceres-solver/internal/ceres/collections_port.h' l='170'>// The outrageously annoying specializations below are for portability reasons.
// In short, it&apos;s not possible to have two overloads of hash&lt;pair&lt;T1, T2&gt;

// Hasher for STL pairs. Requires hashers for both members to be defined.</doc>
<doc f='include/c++/4.8/tr1/functional_hash.h' l='51'>/// Partial specializations for pointer types.</doc>
<fun r='_ZNKSt3tr14hashclET_'/>
<fun r='_ZNKSt3tr14hashIPT_EclES2_'/>
<fun r='_ZNKSt3tr14hashclET_'/>
<fun r='_ZNKSt3tr14hashclET_'/>
<fun r='_ZNKSt3tr14hashclET_'/>
<fun r='_ZNKSt3tr14hashclET_'/>
<fun r='_ZNKSt3tr14hashclET_'/>
<fun r='_ZNKSt3tr14hashclET_'/>
<fun r='_ZNKSt3tr14hashclET_'/>
<fun r='_ZNKSt3tr14hashISt4pairIT_S2_EEclERKS3_'/>
<fun r='_ZNKSt3tr14hashISt4pairIT_S2_EEclERKS3_S6_'/>
<smbr r='std::tr1::hash{pair{type-parameter-0-0,type-parameter-0-0}}::bucket_size' t='const size_t'/>
<smbr r='std::tr1::hash{pair{type-parameter-0-0,type-parameter-0-0}}::min_buckets' t='const size_t'/>
