<dec f='ceres-solver/include/ceres/rotation.h' l='189' type='void ceres::UnitQuaternionRotatePoint(const T * q, const T * pt, T * result)'/>
<def f='ceres-solver/include/ceres/rotation.h' l='506' ll='520' type='void ceres::UnitQuaternionRotatePoint(const T * q, const T * pt, T * result)'/>
<doc f='ceres-solver/include/ceres/rotation.h' l='180'>// Rotates a point pt by a quaternion q:
//
//   result = R(q) * pt
//
// Assumes the quaternion is unit norm. This assumption allows us to
// write the transform as (something)*pt + pt, as is clear from the
// formula below. If you pass in a quaternion with |q|^2 = 2 then you
// WILL NOT get back 2 times the result you get for a unit quaternion.</doc>
<use f='ceres-solver/internal/ceres/rotation_test.cc' l='907' u='c' c='_ZN5ceres8internal60Quaternion_RotatePointGivesSameAnswerAsRotationByMatrix_Test8TestBodyEv'/>
