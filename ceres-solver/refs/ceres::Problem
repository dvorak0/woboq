<def f='ceres-solver/include/ceres/problem.h' l='121' ll='482'/>
<size>8</size>
<doc f='ceres-solver/include/ceres/problem.h' l='69'>// A class to represent non-linear least squares problems. Such
// problems have a cost function that is a sum of error terms (known
// as &quot;residuals&quot;), where each residual is a function of some subset
// of the parameters. The cost function takes the form
//
//    N    1
//   SUM  --- loss( || r_i1, r_i2,..., r_ik ||^2  ),
//   i=1   2
//
// where
//
//   r_ij     is residual number i, component j; the residual is a
//            function of some subset of the parameters x1...xk. For
//            example, in a structure from motion problem a residual
//            might be the difference between a measured point in an
//            image and the reprojected position for the matching
//            camera, point pair. The residual would have two
//            components, error in x and error in y.
//
//   loss(y)  is the loss function; for example, squared error or
//            Huber L1 loss. If loss(y) = y, then the cost function is
//            non-robustified least squares.
//
// This class is specifically designed to address the important subset
// of &quot;sparse&quot; least squares problems, where each component of the
// residual depends only on a small number number of parameters, even
// though the total number of residuals and parameters may be very
// large. This property affords tremendous gains in scale, allowing
// efficient solving of large problems that are otherwise
// inaccessible.
//
// The canonical example of a sparse least squares problem is
// &quot;structure-from-motion&quot; (SFM), where the parameters are points and
// cameras, and residuals are reprojection errors. Typically a single
// residual will depend only on 9 parameters (3 for the point, 6 for
// the camera).
//
// To create a least squares problem, use the AddResidualBlock() and
// AddParameterBlock() methods, documented below. Here is an example least
// squares problem containing 3 parameter blocks of sizes 3, 4 and 5
// respectively and two residual terms of size 2 and 6:
//
//   double x1[] = { 1.0, 2.0, 3.0 };
//   double x2[] = { 1.0, 2.0, 3.0, 5.0 };
//   double x3[] = { 1.0, 2.0, 3.0, 6.0, 7.0 };
//
//   Problem problem;
//
//   problem.AddResidualBlock(new MyUnaryCostFunction(...), x1);
//   problem.AddResidualBlock(new MyBinaryCostFunction(...), x2, x3);
//
// Please see cost_function.h for details of the CostFunction object.</doc>
<fun r='_ZN5ceres7ProblemC1Ev'/>
<fun r='_ZN5ceres7ProblemC1ERKNS0_7OptionsE'/>
<fun r='_ZN5ceres7ProblemD1Ev'/>
<fun r='_ZN5ceres7Problem16AddResidualBlockEPNS_12CostFunctionEPNS_12LossFunctionERKSt6vectorIPdSaIS6_EE'/>
<fun r='_ZN5ceres7Problem16AddResidualBlockEPNS_12CostFunctionEPNS_12LossFunctionEPd'/>
<fun r='_ZN5ceres7Problem16AddResidualBlockEPNS_12CostFunctionEPNS_12LossFunctionEPdS5_'/>
<fun r='_ZN5ceres7Problem16AddResidualBlockEPNS_12CostFunctionEPNS_12LossFunctionEPdS5_S5_'/>
<fun r='_ZN5ceres7Problem16AddResidualBlockEPNS_12CostFunctionEPNS_12LossFunctionEPdS5_S5_S5_'/>
<fun r='_ZN5ceres7Problem16AddResidualBlockEPNS_12CostFunctionEPNS_12LossFunctionEPdS5_S5_S5_S5_'/>
<fun r='_ZN5ceres7Problem16AddResidualBlockEPNS_12CostFunctionEPNS_12LossFunctionEPdS5_S5_S5_S5_S5_'/>
<fun r='_ZN5ceres7Problem16AddResidualBlockEPNS_12CostFunctionEPNS_12LossFunctionEPdS5_S5_S5_S5_S5_S5_'/>
<fun r='_ZN5ceres7Problem16AddResidualBlockEPNS_12CostFunctionEPNS_12LossFunctionEPdS5_S5_S5_S5_S5_S5_S5_'/>
<fun r='_ZN5ceres7Problem16AddResidualBlockEPNS_12CostFunctionEPNS_12LossFunctionEPdS5_S5_S5_S5_S5_S5_S5_S5_'/>
<fun r='_ZN5ceres7Problem16AddResidualBlockEPNS_12CostFunctionEPNS_12LossFunctionEPdS5_S5_S5_S5_S5_S5_S5_S5_S5_'/>
<fun r='_ZN5ceres7Problem17AddParameterBlockEPdi'/>
<fun r='_ZN5ceres7Problem17AddParameterBlockEPdiPNS_21LocalParameterizationE'/>
<fun r='_ZN5ceres7Problem20RemoveParameterBlockEPd'/>
<fun r='_ZN5ceres7Problem19RemoveResidualBlockEPNS_8internal13ResidualBlockE'/>
<fun r='_ZN5ceres7Problem25SetParameterBlockConstantEPd'/>
<fun r='_ZN5ceres7Problem25SetParameterBlockVariableEPd'/>
<fun r='_ZNK5ceres7Problem24IsParameterBlockConstantEPd'/>
<fun r='_ZN5ceres7Problem19SetParameterizationEPdPNS_21LocalParameterizationE'/>
<fun r='_ZNK5ceres7Problem19GetParameterizationEPd'/>
<fun r='_ZN5ceres7Problem22SetParameterLowerBoundEPdid'/>
<fun r='_ZN5ceres7Problem22SetParameterUpperBoundEPdid'/>
<fun r='_ZNK5ceres7Problem18NumParameterBlocksEv'/>
<fun r='_ZNK5ceres7Problem13NumParametersEv'/>
<fun r='_ZNK5ceres7Problem17NumResidualBlocksEv'/>
<fun r='_ZNK5ceres7Problem12NumResidualsEv'/>
<fun r='_ZNK5ceres7Problem18ParameterBlockSizeEPKd'/>
<fun r='_ZNK5ceres7Problem23ParameterBlockLocalSizeEPKd'/>
<fun r='_ZNK5ceres7Problem17HasParameterBlockEPKd'/>
<fun r='_ZNK5ceres7Problem18GetParameterBlocksEPSt6vectorIPdSaIS2_EE'/>
<fun r='_ZNK5ceres7Problem17GetResidualBlocksEPSt6vectorIPNS_8internal13ResidualBlockESaIS4_EE'/>
<fun r='_ZNK5ceres7Problem34GetParameterBlocksForResidualBlockEPNS_8internal13ResidualBlockEPSt6vectorIPdSaIS5_EE'/>
<fun r='_ZNK5ceres7Problem31GetCostFunctionForResidualBlockEPNS_8internal13ResidualBlockE'/>
<fun r='_ZNK5ceres7Problem31GetLossFunctionForResidualBlockEPNS_8internal13ResidualBlockE'/>
<fun r='_ZNK5ceres7Problem34GetResidualBlocksForParameterBlockEPKdPSt6vectorIPNS_8internal13ResidualBlockESaIS6_EE'/>
<fun r='_ZN5ceres7Problem8EvaluateERKNS0_15EvaluateOptionsEPdPSt6vectorIdSaIdEES8_PNS_9CRSMatrixE'/>
<mbr r='ceres::Problem::problem_impl_' o='0' t='internal::scoped_ptr&lt;internal::ProblemImpl&gt;'/>
<fun r='_ZN5ceres7ProblemC1ERKS0_'/>
