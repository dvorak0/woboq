<def f='include/eigen3/Eigen/src/Core/util/BlasUtil.h' l='151' ll='171'/>
<def f='include/eigen3/Eigen/src/Core/util/BlasUtil.h' l='174' ll='188'/>
<def f='include/eigen3/Eigen/src/Core/util/BlasUtil.h' l='191' ll='201'/>
<def f='include/eigen3/Eigen/src/Core/util/BlasUtil.h' l='204' ll='214'/>
<def f='include/eigen3/Eigen/src/Core/util/BlasUtil.h' l='217' ll='235'/>
<def f='include/eigen3/Eigen/src/Core/util/BlasUtil.h' l='237' ll='240'/>
<doc f='include/eigen3/Eigen/src/Core/util/BlasUtil.h' l='148'>/* Helper class to analyze the factors of a Product expression.
 * In particular it allows to pop out operator-, scalar multiples,
 * and conjugate */</doc>
<doc f='include/eigen3/Eigen/src/Core/util/BlasUtil.h' l='173'>// pop conjugate</doc>
<doc f='include/eigen3/Eigen/src/Core/util/BlasUtil.h' l='190'>// pop scalar multiple</doc>
<doc f='include/eigen3/Eigen/src/Core/util/BlasUtil.h' l='203'>// pop opposite</doc>
<doc f='include/eigen3/Eigen/src/Core/util/BlasUtil.h' l='216'>// pop/push transpose</doc>
<fun r='_ZN5Eigen8internal11blas_traits7extractERKT_'/>
<fun r='_ZN5Eigen8internal11blas_traits19extractScalarFactorERKT_'/>
<fun r='_ZN5Eigen8internal11blas_traitsINS_12CwiseUnaryOpINS0_19scalar_conjugate_opIT_EET0_EEE7extractERKS7_'/>
<fun r='_ZN5Eigen8internal11blas_traitsINS_12CwiseUnaryOpINS0_19scalar_conjugate_opIT_EET0_EEE19extractScalarFactorERKS7_'/>
<fun r='_ZN5Eigen8internal11blas_traitsINS_12CwiseUnaryOpINS0_18scalar_multiple_opIT_EET0_EEE7extractERKS7_'/>
<fun r='_ZN5Eigen8internal11blas_traitsINS_12CwiseUnaryOpINS0_18scalar_multiple_opIT_EET0_EEE19extractScalarFactorERKS7_'/>
<fun r='_ZN5Eigen8internal11blas_traitsINS_12CwiseUnaryOpINS0_18scalar_opposite_opIT_EET0_EEE7extractERKS7_'/>
<fun r='_ZN5Eigen8internal11blas_traitsINS_12CwiseUnaryOpINS0_18scalar_opposite_opIT_EET0_EEE19extractScalarFactorERKS7_'/>
<fun r='_ZN5Eigen8internal11blas_traitsINS_9TransposeIT_EEE7extractERKS4_'/>
<fun r='_ZN5Eigen8internal11blas_traitsINS_9TransposeIT_EEE19extractScalarFactorERKS4_'/>
