<def f='include/eigen3/Eigen/src/Core/Block.h' l='147' ll='160'/>
<doc f='include/eigen3/Eigen/src/Core/Block.h' l='145'>// The generic default implementation for dense block simplu forward to the internal::BlockImpl_dense
// that must be specialized for direct and non-direct access...</doc>
<fun r='_ZN5Eigen9BlockImplIT_XT0_EXT1_EXT2_ENS_5DenseEEC1ERS1_NS1_5IndexE'/>
<fun r='_ZN5Eigen9BlockImplIT_XT0_EXT1_EXT2_ENS_5DenseEEC1ERS1_NS1_5IndexES5_'/>
<fun r='_ZN5Eigen9BlockImplIT_XT0_EXT1_EXT2_ENS_5DenseEEC1ERS1_NS1_5IndexES5_S5_S5_'/>
<def f='include/eigen3/Eigen/src/SparseCore/SparseBlock.h' l='15' ll='69'/>
<def f='include/eigen3/Eigen/src/SparseCore/SparseBlock.h' l='76' ll='244'/>
<inh f='include/eigen3/Eigen/src/Core/util/XprHelper.h' l='32' c='Eigen::internal::no_assignment_operator'/>
<def f='include/eigen3/Eigen/src/SparseCore/SparseBlock.h' l='289' ll='401'/>
<doc f='include/eigen3/Eigen/src/SparseCore/SparseBlock.h' l='72'>/***************************************************************************
* specialisation for SparseMatrix
***************************************************************************/</doc>
<doc f='include/eigen3/Eigen/src/SparseCore/SparseBlock.h' l='286'>/** Generic implementation of sparse Block expression.
  * Real-only. 
  */</doc>
<fun r='_ZN5Eigen9BlockImplIT_XT0_EXT1_ELb1ENS_6SparseEEC1ERKS1_i'/>
<fun r='_ZN5Eigen9BlockImplIT_XT0_EXT1_ELb1ENS_6SparseEEC1ERKS1_iiii'/>
<fun r='_ZNK5Eigen9BlockImplIT_XT0_EXT1_ELb1ENS_6SparseEE4rowsEv'/>
<fun r='_ZNK5Eigen9BlockImplIT_XT0_EXT1_ELb1ENS_6SparseEE4colsEv'/>
<mbr r='Eigen::BlockImpl::m_matrix' t='typename XprType::Nested'/>
<mbr r='Eigen::BlockImpl::m_outerStart' t='Index'/>
<mbr r='Eigen::BlockImpl::m_outerSize' t='const internal::variable_if_dynamic&lt;Index, OuterSize&gt;'/>
<fun r='_ZN5Eigen9BlockImplINS_12SparseMatrixIT_XT0_ET1_EEXT2_EXT3_ELb1ENS_6SparseEEC1ERKS4_i'/>
<fun r='_ZN5Eigen9BlockImplINS_12SparseMatrixIT_XT0_ET1_EEXT2_EXT3_ELb1ENS_6SparseEEC1ERKS4_iiii'/>
<fun r='_ZN5Eigen9BlockImplINS_12SparseMatrixIT_XT0_ET1_EEXT2_EXT3_ELb1ENS_6SparseEEaSERKNS_16SparseMatrixBaseIT_EE'/>
<fun r='_ZN5Eigen9BlockImplINS_12SparseMatrixIT_XT0_ET1_EEXT2_EXT3_ELb1ENS_6SparseEEaSERKNS_5BlockIS4_XT2_EXT3_ELb1EEE'/>
<fun r='_ZNK5Eigen9BlockImplINS_12SparseMatrixIT_XT0_ET1_EEXT2_EXT3_ELb1ENS_6SparseEE8valuePtrEv'/>
<fun r='_ZN5Eigen9BlockImplINS_12SparseMatrixIT_XT0_ET1_EEXT2_EXT3_ELb1ENS_6SparseEE8valuePtrEv'/>
<fun r='_ZNK5Eigen9BlockImplINS_12SparseMatrixIT_XT0_ET1_EEXT2_EXT3_ELb1ENS_6SparseEE13innerIndexPtrEv'/>
<fun r='_ZN5Eigen9BlockImplINS_12SparseMatrixIT_XT0_ET1_EEXT2_EXT3_ELb1ENS_6SparseEE13innerIndexPtrEv'/>
<fun r='_ZNK5Eigen9BlockImplINS_12SparseMatrixIT_XT0_ET1_EEXT2_EXT3_ELb1ENS_6SparseEE13outerIndexPtrEv'/>
<fun r='_ZN5Eigen9BlockImplINS_12SparseMatrixIT_XT0_ET1_EEXT2_EXT3_ELb1ENS_6SparseEE13outerIndexPtrEv'/>
<fun r='_ZNK5Eigen9BlockImplINS_12SparseMatrixIT_XT0_ET1_EEXT2_EXT3_ELb1ENS_6SparseEE8nonZerosEv'/>
<fun r='_ZNK5Eigen9BlockImplINS_12SparseMatrixIT_XT0_ET1_EEXT2_EXT3_ELb1ENS_6SparseEE9lastCoeffEv'/>
<fun r='_ZNK5Eigen9BlockImplINS_12SparseMatrixIT_XT0_ET1_EEXT2_EXT3_ELb1ENS_6SparseEE4rowsEv'/>
<fun r='_ZNK5Eigen9BlockImplINS_12SparseMatrixIT_XT0_ET1_EEXT2_EXT3_ELb1ENS_6SparseEE4colsEv'/>
<mbr r='Eigen::BlockImpl::m_matrix' t='typename SparseMatrixType::Nested'/>
<mbr r='Eigen::BlockImpl::m_outerStart' t='Index'/>
<mbr r='Eigen::BlockImpl::m_outerSize' t='const internal::variable_if_dynamic&lt;Index, OuterSize&gt;'/>
<fun r='_ZN5Eigen9BlockImplIT_XT0_EXT1_EXT2_ENS_6SparseEEC1ERKS1_i'/>
<fun r='_ZN5Eigen9BlockImplIT_XT0_EXT1_EXT2_ENS_6SparseEEC1ERKS1_iiii'/>
<fun r='_ZNK5Eigen9BlockImplIT_XT0_EXT1_EXT2_ENS_6SparseEE4rowsEv'/>
<fun r='_ZNK5Eigen9BlockImplIT_XT0_EXT1_EXT2_ENS_6SparseEE4colsEv'/>
<fun r='_ZN5Eigen9BlockImplIT_XT0_EXT1_EXT2_ENS_6SparseEE8coeffRefEii'/>
<fun r='_ZNK5Eigen9BlockImplIT_XT0_EXT1_EXT2_ENS_6SparseEE5coeffEii'/>
<fun r='_ZN5Eigen9BlockImplIT_XT0_EXT1_EXT2_ENS_6SparseEE8coeffRefEi'/>
<fun r='_ZNK5Eigen9BlockImplIT_XT0_EXT1_EXT2_ENS_6SparseEE5coeffEi'/>
<fun r='_ZNK5Eigen9BlockImplIT_XT0_EXT1_EXT2_ENS_6SparseEE16nestedExpressionEv'/>
<mbr r='Eigen::BlockImpl::m_matrix' t='typename XprType::Nested'/>
<mbr r='Eigen::BlockImpl::m_startRow' t='const internal::variable_if_dynamic&lt;Index, XprType::RowsAtCompileTime == 1 ? 0 : Dynamic&gt;'/>
<mbr r='Eigen::BlockImpl::m_startCol' t='const internal::variable_if_dynamic&lt;Index, XprType::ColsAtCompileTime == 1 ? 0 : Dynamic&gt;'/>
<mbr r='Eigen::BlockImpl::m_blockRows' t='const internal::variable_if_dynamic&lt;Index, RowsAtCompileTime&gt;'/>
<mbr r='Eigen::BlockImpl::m_blockCols' t='const internal::variable_if_dynamic&lt;Index, ColsAtCompileTime&gt;'/>
