<use f='ceres-solver/include/ceres/solver.h' l='129' u='w' c='_ZN5ceres6Solver7OptionsC1Ev'/>
<dec f='ceres-solver/include/ceres/solver.h' l='618' type='bool'/>
<use f='ceres-solver/examples/bundle_adjuster.cc' l='156' u='r' c='_ZN5ceres8examples11SetOrderingEPNS0_10BALProblemEPNS_6Solver7OptionsE'/>
<use f='ceres-solver/examples/bundle_adjuster.cc' l='241' u='w' c='_ZN5ceres8examples19SetMinimizerOptionsEPNS_6Solver7OptionsE'/>
<offset>2008</offset>
<doc f='ceres-solver/include/ceres/solver.h' l='560'>// Some non-linear least squares problems have additional
    // structure in the way the parameter blocks interact that it is
    // beneficial to modify the way the trust region step is computed.
    //
    // e.g., consider the following regression problem
    //
    //   y = a_1 exp(b_1 x) + a_2 exp(b_3 x^2 + c_1)
    //
    // Given a set of pairs{(x_i, y_i)}, the user wishes to estimate
    // a_1, a_2, b_1, b_2, and c_1.
    //
    // Notice here that the expression on the left is linear in a_1
    // and a_2, and given any value for b_1, b_2 and c_1, it is
    // possible to use linear regression to estimate the optimal
    // values of a_1 and a_2. Indeed, its possible to analytically
    // eliminate the variables a_1 and a_2 from the problem all
    // together. Problems like these are known as separable least
    // squares problem and the most famous algorithm for solving them
    // is the Variable Projection algorithm invented by Golub &amp;
    // Pereyra.
    //
    // Similar structure can be found in the matrix factorization with
    // missing data problem. There the corresponding algorithm is
    // known as Wiberg&apos;s algorithm.
    //
    // Ruhe &amp; Wedin (Algorithms for Separable Nonlinear Least Squares
    // Problems, SIAM Reviews, 22(3), 1980) present an analyis of
    // various algorithms for solving separable non-linear least
    // squares problems and refer to &quot;Variable Projection&quot; as
    // Algorithm I in their paper.
    //
    // Implementing Variable Projection is tedious and expensive, and
    // they present a simpler algorithm, which they refer to as
    // Algorithm II, where once the Newton/Trust Region step has been
    // computed for the whole problem (a_1, a_2, b_1, b_2, c_1) and
    // additional optimization step is performed to estimate a_1 and
    // a_2 exactly.
    //
    // This idea can be generalized to cases where the residual is not
    // linear in a_1 and a_2, i.e., Solve for the trust region step
    // for the full problem, and then use it as the starting point to
    // further optimize just a_1 and a_2. For the linear case, this
    // amounts to doing a single linear least squares solve. For
    // non-linear problems, any method for solving the a_1 and a_2
    // optimization problems will do. The only constraint on a_1 and
    // a_2 is that they do not co-occur in any residual block.
    //
    // This idea can be further generalized, by not just optimizing
    // (a_1, a_2), but decomposing the graph corresponding to the
    // Hessian matrix&apos;s sparsity structure in a collection of
    // non-overlapping independent sets and optimizing each of them.
    //
    // Setting &quot;use_inner_iterations&quot; to true enables the use of this
    // non-linear generalization of Ruhe &amp; Wedin&apos;s Algorithm II.  This
    // version of Ceres has a higher iteration complexity, but also
    // displays better convergence behaviour per iteration. Setting
    // Solver::Options::num_threads to the maximum number possible is
    // highly recommended.</doc>
<use f='ceres-solver/examples/libmv_bundle_adjuster.cc' l='763' u='w' c='_ZN12_GLOBAL__N_131EuclideanBundleCommonIntrinsicsERKSt6vectorINS_6MarkerESaIS1_EEiiPdPS0_INS_15EuclideanCameraESaIS7_EEPS0_INS_14EuclideanPointESaISB_EE'/>
<use f='ceres-solver/internal/ceres/solver.cc' l='121' u='r' c='_ZN5ceres12_GLOBAL__N_126TrustRegionOptionsAreValidERKNS_6Solver7OptionsEPSs'/>
<use f='ceres-solver/internal/ceres/solver.cc' l='361' u='r' c='_ZN5ceres12_GLOBAL__N_117PreSolveSummarizeERKNS_6Solver7OptionsEPKNS_8internal11ProblemImplEPNS1_7SummaryE'/>
<use f='ceres-solver/internal/ceres/trust_region_preprocessor.cc' l='251' u='r' c='_ZN5ceres8internal12_GLOBAL__N_128SetupInnerIterationMinimizerEPNS0_19PreprocessedProblemE'/>
<use f='ceres-solver/internal/ceres/trust_region_preprocessor_test.cc' l='322' u='w' c='_ZN5ceres8internal69TrustRegionPreprocessorTest_InnerIterationsWithOneParameterBlock_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/trust_region_preprocessor_test.cc' l='335' u='w' c='_ZN5ceres8internal79LinearSolverAndEvaluatorCreationTest_InnerIterationsWithTwoParameterBlocks_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/trust_region_preprocessor_test.cc' l='348' u='w' c='_ZN5ceres8internal72LinearSolverAndEvaluatorCreationTest_InvalidInnerIterationsOrdering_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/trust_region_preprocessor_test.cc' l='361' u='w' c='_ZN5ceres8internal70LinearSolverAndEvaluatorCreationTest_ValidInnerIterationsOrdering_Test8TestBodyEv'/>
