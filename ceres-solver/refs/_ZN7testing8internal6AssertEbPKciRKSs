<def f='ceres-solver/internal/ceres/gmock/gmock.h' l='793' ll='799' type='void testing::internal::Assert(bool condition, const char * file, int line, const string &amp; msg)'/>
<use f='ceres-solver/internal/ceres/gmock/gmock.h' l='801' u='c' c='_ZN7testing8internal6AssertEbPKci'/>
<use f='ceres-solver/internal/ceres/gmock/gmock.h' l='890' u='c' c='_ZN7testing8internal7InvalidEv'/>
<use f='ceres-solver/internal/ceres/gmock/gmock.h' l='1057' u='c' c='_ZN7testing8internal25BuiltInDefaultValueGetterIT_Lb0EE3GetEv'/>
<use f='ceres-solver/internal/ceres/gmock/gmock.h' l='9445' u='c' c='_ZNK7testing8internal21UntypedOnCallSpecBase18AssertSpecPropertyEbRKSs'/>
<use f='ceres-solver/internal/ceres/gmock/gmock.h' l='9920' u='c' c='_ZNK7testing8internal15ExpectationBase18AssertSpecPropertyEbRKSs'/>
<use f='ceres-solver/internal/ceres/gmock/gmock.h' l='10335' u='c' c='_ZNK7testing8internal16TypedExpectation16GetCurrentActionEPKNS0_18FunctionMockerBaseIT_EERKNS0_8FunctionIS3_E13ArgumentTupleE'/>
<use f='ceres-solver/internal/ceres/gmock_gtest_all.cc' l='11571' u='c' c='_ZNK7testing8internal25UntypedFunctionMockerBase10MockObjectEv'/>
<use f='ceres-solver/internal/ceres/gmock_gtest_all.cc' l='11588' u='c' c='_ZNK7testing8internal25UntypedFunctionMockerBase4NameEv'/>
<use f='ceres-solver/internal/ceres/gmock_gtest_all.cc' l='11719' u='c' c='_ZN7testing8internal25UntypedFunctionMockerBase11GetHandleOfEPNS0_15ExpectationBaseE'/>
<doc f='ceres-solver/internal/ceres/gmock/gmock.h' l='788'>// Asserts that condition is true; aborts the process with the given
// message if condition is false.  We cannot use LOG(FATAL) or CHECK()
// as Google Mock might be used to mock the log sink itself.  We
// inline this function to prevent it from showing up in the stack
// trace.</doc>
