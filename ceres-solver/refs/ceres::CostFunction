<def f='ceres-solver/include/ceres/cost_function.h' l='64' ll='141'/>
<ovr f='ceres-solver/include/ceres/sized_cost_function.h' l='50' c='ceres::SizedCostFunction'/>
<ovr f='ceres-solver/include/ceres/dynamic_cost_function.h' l='41' c='ceres::DynamicCostFunction'/>
<size>40</size>
<doc f='ceres-solver/include/ceres/cost_function.h' l='55'>// This class implements the computation of the cost (a.k.a. residual) terms as
// a function of the input (control) variables, and is the interface for users
// to describe their least squares problem to Ceres. In other words, this is the
// modelling layer between users and the Ceres optimizer. The signature of the
// function (number and sizes of input parameter blocks and number of outputs)
// is stored in parameter_block_sizes_ and num_residuals_ respectively. User
// code inheriting from this class is expected to set these two members with the
// corresponding accessors. This information will be verified by the Problem
// when added with AddResidualBlock().</doc>
<fun r='_ZN5ceres12CostFunctionC1Ev'/>
<fun r='_ZN5ceres12CostFunctionD1Ev'/>
<fun r='_ZNK5ceres12CostFunction8EvaluateEPKPKdPdPS5_'/>
<fun r='_ZNK5ceres12CostFunction21parameter_block_sizesEv'/>
<fun r='_ZNK5ceres12CostFunction13num_residualsEv'/>
<fun r='_ZN5ceres12CostFunction29mutable_parameter_block_sizesEv'/>
<fun r='_ZN5ceres12CostFunction17set_num_residualsEi'/>
<mbr r='ceres::CostFunction::parameter_block_sizes_' o='64' t='std::vector&lt;int32&gt;'/>
<mbr r='ceres::CostFunction::num_residuals_' o='256' t='int'/>
<fun r='_ZN5ceres12CostFunctionC1ERKS0_'/>
<ovr f='ceres-solver/examples/fields_of_experts.h' l='62' c='ceres::examples::FieldsOfExpertsCost'/>
<ovr f='ceres-solver/examples/ellipse_approximation.cc' l='272' c='PointToLineSegmentContourCostFunction'/>
<ovr f='ceres-solver/internal/ceres/c_api.cc' l='66' c='CallbackCostFunction'/>
<ovr f='ceres-solver/include/ceres/conditioned_cost_function.h' l='74' c='ceres::ConditionedCostFunction'/>
<ovr f='ceres-solver/include/ceres/normal_prior.h' l='60' c='ceres::NormalPrior'/>
<ovr f='ceres-solver/internal/ceres/conditioned_cost_function_test.cc' l='47' c='ceres::internal::LinearCostFunction'/>
<ovr f='ceres-solver/internal/ceres/covariance_test.cc' l='53' c='ceres::internal::UnaryCostFunction'/>
<ovr f='ceres-solver/internal/ceres/covariance_test.cc' l='86' c='ceres::internal::BinaryCostFunction'/>
<ovr f='ceres-solver/internal/ceres/gradient_checker_test.cc' l='59' c='ceres::internal::GoodTestTerm'/>
<ovr f='ceres-solver/internal/ceres/gradient_checker_test.cc' l='118' c='ceres::internal::BadTestTerm'/>
<ovr f='ceres-solver/internal/ceres/gradient_checker_test.cc' l='285' c='ceres::internal::LinearCostFunction'/>
<ovr f='ceres-solver/internal/ceres/gradient_checking_cost_function.cc' l='63' c='ceres::internal::{anonymousnamespace}::GradientCheckingCostFunction'/>
<ovr f='ceres-solver/internal/ceres/gradient_checking_cost_function_test.cc' l='67' c='ceres::internal::TestTerm'/>
<ovr f='ceres-solver/internal/ceres/gradient_checking_cost_function_test.cc' l='261' c='ceres::internal::UnaryCostFunction'/>
<ovr f='ceres-solver/internal/ceres/gradient_checking_cost_function_test.cc' l='280' c='ceres::internal::BinaryCostFunction'/>
<ovr f='ceres-solver/internal/ceres/gradient_checking_cost_function_test.cc' l='301' c='ceres::internal::TernaryCostFunction'/>
<ovr f='ceres-solver/internal/ceres/problem_test.cc' l='60' c='ceres::internal::UnaryCostFunction'/>
<ovr f='ceres-solver/internal/ceres/problem_test.cc' l='79' c='ceres::internal::BinaryCostFunction'/>
<ovr f='ceres-solver/internal/ceres/problem_test.cc' l='100' c='ceres::internal::TernaryCostFunction'/>
<ovr f='ceres-solver/internal/ceres/problem_test.cc' l='1062' c='ceres::internal::QuadraticCostFunction'/>
<ovr f='ceres-solver/internal/ceres/program_test.cc' l='333' c='ceres::internal::NumParameterBlocksCostFunction'/>
<ovr f='ceres-solver/internal/ceres/residual_block_test.cc' l='45' c='ceres::internal::TernaryCostFunction'/>
<ovr f='ceres-solver/internal/ceres/trust_region_minimizer_test.cc' l='306' c='ceres::internal::CurveCostFunction'/>
