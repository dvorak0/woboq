<dec f='ceres-solver/include/ceres/gradient_checker.h' l='135' type='bool ceres::GradientChecker::Probe(const double *const * parameters, double relative_precision, ceres::GradientChecker::ProbeResults * results) const'/>
<def f='ceres-solver/internal/ceres/gradient_checker.cc' l='147' ll='274' type='bool ceres::GradientChecker::Probe(const double *const * parameters, double relative_precision, ceres::GradientChecker::ProbeResults * results_param) const'/>
<doc f='ceres-solver/include/ceres/gradient_checker.h' l='117'>// Call the cost function, compute alternative Jacobians using finite
  // differencing and compare results. If local parameterizations are given,
  // the Jacobians will be multiplied by the local parameterization Jacobians
  // before performing the check, which effectively means that all errors along
  // the null space of the local parameterization will be ignored.
  // Returns false if the Jacobians don&apos;t match, the cost function return false,
  // or if the cost function returns different residual when called with a
  // Jacobian output argument vs. calling it without. Otherwise returns true.
  //
  // parameters: The parameter values at which to probe.
  // relative_precision: A threshold for the relative difference between the
  // Jacobians. If the Jacobians differ by more than this amount, then the
  // probe fails.
  // results: On return, the Jacobians (and other information) will be stored
  // here. May be NULL.
  //
  // Returns true if no problems are detected and the difference between the
  // Jacobians is less than error_tolerance.</doc>
<use f='ceres-solver/internal/ceres/gradient_checker_test.cc' l='222' u='c' c='_ZN5ceres8internal30GradientChecker_SmokeTest_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/gradient_checker_test.cc' l='224' u='c' c='_ZN5ceres8internal30GradientChecker_SmokeTest_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/gradient_checker_test.cc' l='236' u='c' c='_ZN5ceres8internal30GradientChecker_SmokeTest_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/gradient_checker_test.cc' l='238' u='c' c='_ZN5ceres8internal30GradientChecker_SmokeTest_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/gradient_checker_test.cc' l='255' u='c' c='_ZN5ceres8internal30GradientChecker_SmokeTest_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/gradient_checker_test.cc' l='257' u='c' c='_ZN5ceres8internal30GradientChecker_SmokeTest_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/gradient_checker_test.cc' l='267' u='c' c='_ZN5ceres8internal30GradientChecker_SmokeTest_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/gradient_checker_test.cc' l='470' u='c' c='_ZN5ceres8internal62GradientChecker_TestCorrectnessWithLocalParameterizations_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/gradient_checker_test.cc' l='471' u='c' c='_ZN5ceres8internal62GradientChecker_TestCorrectnessWithLocalParameterizations_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/gradient_checker_test.cc' l='509' u='c' c='_ZN5ceres8internal62GradientChecker_TestCorrectnessWithLocalParameterizations_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/gradient_checker_test.cc' l='510' u='c' c='_ZN5ceres8internal62GradientChecker_TestCorrectnessWithLocalParameterizations_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/gradient_checker_test.cc' l='549' u='c' c='_ZN5ceres8internal62GradientChecker_TestCorrectnessWithLocalParameterizations_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/gradient_checking_cost_function.cc' l='95' u='c' c='_ZNK5ceres8internal12_GLOBAL__N_128GradientCheckingCostFunction8EvaluateEPKPKdPdPS7_'/>
