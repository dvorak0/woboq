<dec f='include/eigen3/Eigen/src/Core/DenseBase.h' l='303' type='static const SequentialLinSpacedReturnType Eigen::DenseBase::LinSpaced(Eigen::Sequential_t , Index size, const Scalar &amp; low, const Scalar &amp; high)'/>
<def f='include/eigen3/Eigen/src/Core/CwiseNullaryOp.h' l='240' ll='246' type='static const typename DenseBase&lt;Derived&gt;::SequentialLinSpacedReturnType Eigen::DenseBase::LinSpaced(Eigen::Sequential_t , Index size, const Scalar &amp; low, const Scalar &amp; high)'/>
<doc f='include/eigen3/Eigen/src/Core/CwiseNullaryOp.h' l='223'>/**
  * \brief Sets a linearly space vector.
  *
  * The function generates &apos;size&apos; equally spaced values in the closed interval [low,high].
  * This particular version of LinSpaced() uses sequential access, i.e. vector access is
  * assumed to be a(0), a(1), ..., a(size). This assumption allows for better vectorization
  * and yields faster code than the random access version.
  *
  * When size is set to 1, a vector of length 1 containing &apos;high&apos; is returned.
  *
  * \only_for_vectors
  *
  * Example: \include DenseBase_LinSpaced_seq.cpp
  * Output: \verbinclude DenseBase_LinSpaced_seq.out
  *
  * \sa setLinSpaced(Index,const Scalar&amp;,const Scalar&amp;), LinSpaced(Index,Scalar,Scalar), CwiseNullaryOp
  */</doc>
