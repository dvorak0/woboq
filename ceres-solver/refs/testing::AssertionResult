<def f='ceres-solver/internal/ceres/gtest/gtest.h' l='18865' ll='18945'/>
<size>16</size>
<doc f='ceres-solver/internal/ceres/gtest/gtest.h' l='18786'>// A class for indicating whether an assertion was successful.  When
// the assertion wasn&apos;t successful, the AssertionResult object
// remembers a non-empty message that describes how it failed.
//
// To create an instance of this class, use one of the factory functions
// (AssertionSuccess() and AssertionFailure()).
//
// This class is useful for two purposes:
//   1. Defining predicate functions to be used with Boolean test assertions
//      EXPECT_TRUE/EXPECT_FALSE and their ASSERT_ counterparts
//   2. Defining predicate-format functions to be
//      used with predicate assertions (ASSERT_PRED_FORMAT*, etc).
//
// For example, if you define IsEven predicate:
//
//   testing::AssertionResult IsEven(int n) {
//     if ((n % 2) == 0)
//       return testing::AssertionSuccess();
//     else
//       return testing::AssertionFailure() &lt;&lt; n &lt;&lt; &quot; is odd&quot;;
//   }
//
// Then the failed expectation EXPECT_TRUE(IsEven(Fib(5)))
// will print the message
//
//   Value of: IsEven(Fib(5))
//     Actual: false (5 is odd)
//   Expected: true
//
// instead of a more opaque
//
//   Value of: IsEven(Fib(5))
//     Actual: false
//   Expected: true
//
// in case IsEven is a simple Boolean predicate.
//
// If you expect your predicate to be reused and want to support informative
// messages in EXPECT_FALSE and ASSERT_FALSE (negative assertions show up
// about half as often as positive ones in our tests), supply messages for
// both success and failure cases:
//
//   testing::AssertionResult IsEven(int n) {
//     if ((n % 2) == 0)
//       return testing::AssertionSuccess() &lt;&lt; n &lt;&lt; &quot; is even&quot;;
//     else
//       return testing::AssertionFailure() &lt;&lt; n &lt;&lt; &quot; is odd&quot;;
//   }
//
// Then a statement EXPECT_FALSE(IsEven(Fib(6))) will print
//
//   Value of: IsEven(Fib(6))
//     Actual: true (8 is even)
//   Expected: false
//
// NB: Predicates that support negative Boolean assertions have reduced
// performance in positive ones so be careful not to use them in tests
// that have lots (tens of thousands) of positive Boolean assertions.
//
// To use this class with EXPECT_PRED_FORMAT assertions such as:
//
//   // Verifies that Foo() returns an even number.
//   EXPECT_PRED_FORMAT1(IsEven, Foo());
//
// you need to define:
//
//   testing::AssertionResult IsEven(const char* expr, int n) {
//     if ((n % 2) == 0)
//       return testing::AssertionSuccess();
//     else
//       return testing::AssertionFailure()
//         &lt;&lt; &quot;Expected: &quot; &lt;&lt; expr &lt;&lt; &quot; is even\n  Actual: it&apos;s &quot; &lt;&lt; n;
//   }
//
// If Foo() returns 5, you will see the following message:
//
//   Expected: Foo() is even
//     Actual: it&apos;s 5
//</doc>
<fun r='_ZN7testing15AssertionResultC1ERKS0_'/>
<fun r='_ZN7testing15AssertionResultC1ERKT_PNS_8internal8EnableIfIXntsr8internal21ImplicitlyConvertibleIS1_S0_EE5valueEE4typeE'/>
<fun r='_ZN7testing15AssertionResultaSES0_'/>
<fun r='_ZNK7testing15AssertionResultcvbEv'/>
<fun r='_ZNK7testing15AssertionResultntEv'/>
<fun r='_ZNK7testing15AssertionResult7messageEv'/>
<fun r='_ZNK7testing15AssertionResult15failure_messageEv'/>
<fun r='_ZN7testing15AssertionResultlsERKT_'/>
<fun r='_ZN7testing15AssertionResultlsEPFRSoS1_E'/>
<fun r='_ZN7testing15AssertionResult13AppendMessageERKNS_7MessageE'/>
<fun r='_ZN7testing15AssertionResult4swapERS0_'/>
<mbr r='testing::AssertionResult::success_' o='0' t='bool'/>
<mbr r='testing::AssertionResult::message_' o='64' t='internal::scoped_ptr&lt; ::std::string&gt;'/>
