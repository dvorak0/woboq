<dec f='ceres-solver/internal/ceres/evaluator.h' l='95' type='static bool ceres::internal::Evaluator::Evaluate(ceres::internal::Program * program, int num_threads, double * cost, std::vector&lt;double&gt; * residuals, std::vector&lt;double&gt; * gradient, ceres::CRSMatrix * jacobian)'/>
<doc f='ceres-solver/internal/ceres/evaluator.h' l='77'>// This is used for computing the cost, residual and Jacobian for
  // returning to the user. For actually solving the optimization
  // problem, the optimization algorithm uses the ProgramEvaluator
  // objects directly.
  //
  // The residual, gradients and jacobian pointers can be NULL, in
  // which case they will not be evaluated. cost cannot be NULL.
  //
  // The parallelism of the evaluator is controlled by num_threads; it
  // should be at least 1.
  //
  // Note: That this function does not take a parameter vector as
  // input. The parameter blocks are evaluated on the values contained
  // in the arrays pointed to by their user_state pointers.
  //
  // Also worth noting is that this function mutates program by
  // calling Program::SetParameterOffsetsAndIndex() on it so that an
  // evaluator object can be constructed.</doc>
