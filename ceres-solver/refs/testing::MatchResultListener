<def f='ceres-solver/internal/ceres/gmock/gmock.h' l='4899' ll='4929'/>
<ovr f='ceres-solver/internal/ceres/gmock/gmock.h' l='5003' c='testing::StringMatchResultListener'/>
<ovr f='ceres-solver/internal/ceres/gmock/gmock.h' l='5047' c='testing::internal::DummyMatchResultListener'/>
<ovr f='ceres-solver/internal/ceres/gmock/gmock.h' l='5058' c='testing::internal::StreamMatchResultListener'/>
<size>16</size>
<doc f='ceres-solver/internal/ceres/gmock/gmock.h' l='4880'>// To implement a matcher Foo for type T, define:
//   1. a class FooMatcherImpl that implements the
//      MatcherInterface&lt;T&gt; interface, and
//   2. a factory function that creates a Matcher&lt;T&gt; object from a
//      FooMatcherImpl*.
//
// The two-level delegation design makes it possible to allow a user
// to write &quot;v&quot; instead of &quot;Eq(v)&quot; where a Matcher is expected, which
// is impossible if we pass matchers by pointers.  It also eases
// ownership management as Matcher objects can now be copied like
// plain values.

// MatchResultListener is an abstract class.  Its &lt;&lt; operator can be
// used by a matcher to explain why a value matches or doesn&apos;t match.
//
// TODO(wan@google.com): add method
//   bool InterestedInWhy(bool result) const;
// to indicate whether the listener is interested in why the match
// result is &apos;result&apos;.</doc>
<fun r='_ZN7testing19MatchResultListenerC1EPSo'/>
<fun r='_ZN7testing19MatchResultListenerD1Ev'/>
<fun r='_ZN7testing19MatchResultListenerlsERKT_'/>
<fun r='_ZN7testing19MatchResultListener6streamEv'/>
<fun r='_ZNK7testing19MatchResultListener12IsInterestedEv'/>
<mbr r='testing::MatchResultListener::stream_' o='64' t='::std::ostream *const'/>
<fun r='_ZN7testing19MatchResultListenerC1ERKS0_'/>
<fun r='_ZN7testing19MatchResultListenerD1Ev'/>
