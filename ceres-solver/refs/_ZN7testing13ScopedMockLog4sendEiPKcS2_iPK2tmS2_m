<inh f='include/glog/logging.h' l='1367' c='_ZN6google7LogSink4sendEiPKcS2_iPK2tmS2_m'/>
<def f='ceres-solver/internal/ceres/gmock/mock-log.h' l='115' ll='124' type='void testing::ScopedMockLog::send(google::LogSeverity severity, const char * full_filename, const char * base_filename, int line, const tm * tm_time, const char * message, size_t message_len)'/>
<doc f='ceres-solver/internal/ceres/gmock/mock-log.h' l='94'>// Implements the send() virtual function in class LogSink.
  // Whenever a LOG() statement is executed, this function will be
  // invoked with information presented in the LOG().
  //
  // The method argument list is long and carries much information a
  // test usually doesn&apos;t care about, so we trim the list before
  // forwarding the call to Log(), which is much easier to use in
  // tests.
  //
  // We still cannot call Log() directly, as it may invoke other LOG()
  // messages, either due to Invoke, or due to an error logged in
  // Google C++ Mocking Framework code, which would trigger a deadlock
  // since a lock is held during send().
  //
  // Hence, we save the message for WaitTillSent() which will be called after
  // the lock on send() is released, and we&apos;ll call Log() inside
  // WaitTillSent(). Since while a single send() call may be running at a
  // time, multiple WaitTillSent() calls (along with the one send() call) may
  // be running simultaneously, we ensure thread-safety of the exchange between
  // send() and WaitTillSent(), and that for each message, LOG(), send(),
  // WaitTillSent() and Log() are executed in the same thread.</doc>
