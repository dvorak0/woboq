<def f='ceres-solver/internal/ceres/gtest/gtest.h' l='9936' ll='9949' type='void testing::internal::linked_ptr_internal::join(const testing::internal::linked_ptr_internal * ptr)'/>
<use f='ceres-solver/internal/ceres/gtest/gtest.h' l='10044' u='c' c='_ZN7testing8internal10linked_ptr4copyEPKNS0_10linked_ptrIT_EE'/>
<doc f='ceres-solver/internal/ceres/gtest/gtest.h' l='9924'>// Many linked_ptr operations may change p.link_ for some linked_ptr
  // variable p in the same circle as this object.  Therefore we need
  // to prevent two such operations from occurring concurrently.
  //
  // Note that different types of linked_ptr objects can coexist in a
  // circle (e.g. linked_ptr&lt;Base&gt;, linked_ptr&lt;Derived1&gt;, and
  // linked_ptr&lt;Derived2&gt;).  Therefore we must use a single mutex to
  // protect all linked_ptr objects.  This can create serious
  // contention in production code, but is acceptable in a testing
  // framework.

  // Join an existing circle.</doc>
