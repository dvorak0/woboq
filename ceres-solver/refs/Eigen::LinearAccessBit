<def f='include/eigen3/Eigen/src/Core/util/Constants.h' l='117' type='const unsigned int'/>
<use f='include/eigen3/Eigen/src/Core/util/XprHelper.h' l='158' u='r'/>
<use f='include/eigen3/Eigen/src/Core/Assign.h' l='52' u='r'/>
<use f='include/eigen3/Eigen/src/Core/CwiseBinaryOp.h' l='78' u='r'/>
<use f='include/eigen3/Eigen/src/Core/CwiseUnaryOp.h' l='48' u='r'/>
<use f='include/eigen3/Eigen/src/Core/CwiseNullaryOp.h' l='40' u='r'/>
<use f='include/eigen3/Eigen/src/Core/CwiseUnaryView.h' l='40' u='r'/>
<use f='include/eigen3/Eigen/src/Core/MapBase.h' l='15' u='r' c='_ZNK5Eigen7MapBaseIT_Li0EE5coeffENS_8internal6traitsIS1_E5IndexE'/>
<use f='include/eigen3/Eigen/src/Core/MapBase.h' l='15' u='r' c='_ZNK5Eigen7MapBaseIT_Li0EE8coeffRefENS_8internal6traitsIS1_E5IndexE'/>
<use f='include/eigen3/Eigen/src/Core/MapBase.h' l='15' u='r' c='_ZNK5Eigen7MapBaseIT_Li0EE6packetENS_8internal6traitsIS1_E5IndexE'/>
<use f='include/eigen3/Eigen/src/Core/MapBase.h' l='15' u='r' c='_ZN5Eigen7MapBaseIT_Li1EE8coeffRefENS0_IS1_Li0EE5IndexE'/>
<use f='include/eigen3/Eigen/src/Core/MapBase.h' l='15' u='r' c='_ZN5Eigen7MapBaseIT_Li1EE11writePacketENS0_IS1_Li0EE5IndexERKNS3_12PacketScalarE'/>
<use f='include/eigen3/Eigen/src/Core/Map.h' l='95' u='r'/>
<use f='include/eigen3/Eigen/src/Core/Block.h' l='84' u='r'/>
<use f='include/eigen3/Eigen/src/Core/Diagonal.h' l='55' u='r'/>
<use f='include/eigen3/Eigen/src/Core/DiagonalProduct.h' l='35' u='r'/>
<use f='include/eigen3/Eigen/src/Core/Redux.h' l='40' u='r'/>
<use f='include/eigen3/Eigen/src/Core/TriangularMatrix.h' l='147' u='r'/>
<use f='include/eigen3/Eigen/src/Core/SelfAdjointView.h' l='42' u='r'/>
<use f='include/eigen3/Eigen/src/Core/Reverse.h' l='50' u='r'/>
<doc f='include/eigen3/Eigen/src/Core/util/Constants.h' l='97'>/** \ingroup flags
  *
  * Short version: means the expression can be seen as 1D vector.
  *
  * Long version: means that one can access the coefficients
  * of this expression by coeff(int), and coeffRef(int) in the case of a lvalue expression. These
  * index-based access methods are guaranteed
  * to not have to do any runtime computation of a (row, col)-pair from the index, so that it
  * is guaranteed that whenever it is available, index-based access is at least as fast as
  * (row,col)-based access. Expressions for which that isn&apos;t possible don&apos;t have the LinearAccessBit.
  *
  * If both PacketAccessBit and LinearAccessBit are set, then the
  * packets of this expression can be accessed by packet(int), and writePacket(int) in the case of a
  * lvalue expression.
  *
  * Typically, all vector expressions have the LinearAccessBit, but there is one exception:
  * Product expressions don&apos;t have it, because it would be troublesome for vectorization, even when the
  * Product is a vector expression. Thus, vector Product expressions allow index-based coefficient access but
  * not index-based packet access, so they don&apos;t have the LinearAccessBit.
  */</doc>
