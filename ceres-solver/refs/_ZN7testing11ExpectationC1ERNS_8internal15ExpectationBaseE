<dec f='ceres-solver/internal/ceres/gmock/gmock.h' l='9681' type='void testing::Expectation::Expectation(internal::ExpectationBase &amp; exp)'/>
<use f='ceres-solver/internal/ceres/gmock/gmock.h' l='9756' u='c' c='_ZN7testing14ExpectationSetC1ERNS_8internal15ExpectationBaseE'/>
<def f='ceres-solver/internal/ceres/gmock/gmock.h' l='11007' ll='11008' type='void testing::Expectation::Expectation(internal::ExpectationBase &amp; exp)'/>
<doc f='ceres-solver/internal/ceres/gmock/gmock.h' l='9672'>// This single-argument ctor must not be explicit, in order to support the
  //   Expectation e = EXPECT_CALL(...);
  // syntax.
  //
  // A TypedExpectation object stores its pre-requisites as
  // Expectation objects, and needs to call the non-const Retire()
  // method on the ExpectationBase objects they reference.  Therefore
  // Expectation must receive a *non-const* reference to the
  // ExpectationBase object.</doc>
<doc f='ceres-solver/internal/ceres/gmock/gmock.h' l='9681'>// NOLINT</doc>
<doc f='ceres-solver/internal/ceres/gmock/gmock.h' l='11006'>// Constructs an Expectation object that references and co-owns exp.</doc>
<doc f='ceres-solver/internal/ceres/gmock/gmock.h' l='11007'>// NOLINT</doc>
