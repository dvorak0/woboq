<dec f='include/eigen3/Eigen/src/Core/DenseBase.h' l='445' type='static const CwiseNullaryOp&lt;internal::scalar_random_op&lt;Scalar&gt;, Derived&gt; Eigen::DenseBase::Random(Index rows, Index cols)'/>
<def f='include/eigen3/Eigen/src/Core/Random.h' l='47' ll='52' type='static const CwiseNullaryOp&lt;internal::scalar_random_op&lt;typename internal::traits&lt;Derived&gt;::Scalar&gt;, Derived&gt; Eigen::DenseBase::Random(Index rows, Index cols)'/>
<doc f='include/eigen3/Eigen/src/Core/Random.h' l='29'>/** \returns a random matrix expression
  *
  * The parameters \a rows and \a cols are the number of rows and of columns of
  * the returned matrix. Must be compatible with this MatrixBase type.
  *
  * This variant is meant to be used for dynamic-size matrix types. For fixed-size types,
  * it is redundant to pass \a rows and \a cols as arguments, so Random() should be used
  * instead.
  *
  * Example: \include MatrixBase_random_int_int.cpp
  * Output: \verbinclude MatrixBase_random_int_int.out
  *
  * This expression has the &quot;evaluate before nesting&quot; flag so that it will be evaluated into
  * a temporary matrix whenever it is nested in a larger expression. This prevents unexpected
  * behavior with expressions involving random matrices.
  *
  * \sa MatrixBase::setRandom(), MatrixBase::Random(Index), MatrixBase::Random()
  */</doc>
<use f='ceres-solver/internal/ceres/local_parameterization_test.cc' l='288' u='c' c='_ZN5ceres8internal36QuaternionParameterizationTestHelperEPKdS2_S2_'/>
<use f='ceres-solver/internal/ceres/local_parameterization_test.cc' l='729' u='c' c='_ZN5ceres8internal48ProductParameterizationTest_ComputeJacobian_Test8TestBodyEv'/>
