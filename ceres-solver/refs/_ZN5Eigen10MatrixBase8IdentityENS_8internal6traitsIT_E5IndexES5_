<dec f='include/eigen3/Eigen/src/Core/MatrixBase.h' l='263' type='static const IdentityReturnType Eigen::MatrixBase::Identity(Index rows, Index cols)'/>
<def f='include/eigen3/Eigen/src/Core/CwiseNullaryOp.h' l='681' ll='686' type='static const typename MatrixBase&lt;Derived&gt;::IdentityReturnType Eigen::MatrixBase::Identity(Index nbRows, Index nbCols)'/>
<doc f='include/eigen3/Eigen/src/Core/CwiseNullaryOp.h' l='667'>/** \returns an expression of the identity matrix (not necessarily square).
  *
  * The parameters \a nbRows and \a nbCols are the number of rows and of columns of
  * the returned matrix. Must be compatible with this MatrixBase type.
  *
  * This variant is meant to be used for dynamic-size matrix types. For fixed-size types,
  * it is redundant to pass \a rows and \a cols as arguments, so Identity() should be used
  * instead.
  *
  * Example: \include MatrixBase_identity_int_int.cpp
  * Output: \verbinclude MatrixBase_identity_int_int.out
  *
  * \sa Identity(), setIdentity(), isIdentity()
  */</doc>
<use f='ceres-solver/internal/ceres/block_jacobi_preconditioner_test.cc' l='86' u='c' c='_ZN5ceres8internal29BlockJacobiPreconditionerTest20VerifyDiagonalBlocksEi'/>
<use f='ceres-solver/internal/ceres/block_random_access_diagonal_matrix.cc' l='133' u='c' c='_ZN5ceres8internal31BlockRandomAccessDiagonalMatrix6InvertEv'/>
<use f='ceres-solver/internal/ceres/block_random_access_diagonal_matrix_test.cc' l='88' u='c' c='_ZN5ceres8internal35BlockRandomAccessDiagonalMatrixTest5SetUpEv'/>
<use f='ceres-solver/internal/ceres/block_random_access_diagonal_matrix_test.cc' l='110' u='c' c='_ZN5ceres8internal55BlockRandomAccessDiagonalMatrixTest_MatrixContents_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/block_random_access_diagonal_matrix_test.cc' l='116' u='c' c='_ZN5ceres8internal55BlockRandomAccessDiagonalMatrixTest_MatrixContents_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/block_random_access_diagonal_matrix_test.cc' l='122' u='c' c='_ZN5ceres8internal55BlockRandomAccessDiagonalMatrixTest_MatrixContents_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/block_random_access_diagonal_matrix_test.cc' l='151' u='c' c='_ZN5ceres8internal47BlockRandomAccessDiagonalMatrixTest_Invert_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/dogleg_strategy.cc' l='698' u='c' c='_ZN5ceres8internal14DoglegStrategy20ComputeSubspaceModelEPNS0_12SparseMatrixE'/>
<use f='ceres-solver/internal/ceres/invert_psd_matrix.h' l='60' u='c' c='_ZN5ceres8internal15InvertPSDMatrixEbRKNS_10EigenTypesIXT_EXT_EE6MatrixE'/>
<use f='ceres-solver/internal/ceres/implicit_schur_complement.cc' l='162' u='c' c='_ZN5ceres8internal23ImplicitSchurComplement20AddDiagonalAndInvertEPKdPNS0_17BlockSparseMatrixE'/>
<use f='ceres-solver/internal/ceres/invert_psd_matrix_test.cc' l='54' u='c' c='_ZN5ceres8internal32InvertPSDMatrix_Identity3x3_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/invert_psd_matrix_test.cc' l='67' u='c' c='_ZN5ceres8internal32InvertPSDMatrix_FullRank5x5_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/invert_psd_matrix_test.cc' l='78' u='c' c='_ZN5ceres8internal37InvertPSDMatrix_RankDeficient5x5_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/line_search_direction.cc' l='161' u='c' c='_ZN5ceres8internal4BFGSC1Eib'/>
<use f='ceres-solver/internal/ceres/local_parameterization.cc' l='77' u='c' c='_ZNK5ceres24IdentityParameterization15ComputeJacobianEPKdPd'/>
<use f='ceres-solver/internal/ceres/schur_eliminator_test.cc' l='116' u='c' c='_ZN5ceres8internal19SchurEliminatorTest24ComputeReferenceSolutionERKN5Eigen6MatrixIdLin1ELi1ELi0ELin1ELi1EEE'/>
