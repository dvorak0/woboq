<dec f='ceres-solver/internal/ceres/implicit_schur_complement.h' l='116' type='void ceres::internal::ImplicitSchurComplement::RightMultiply(const double * x, double * y) const'/>
<use f='ceres-solver/internal/ceres/implicit_schur_complement.h' l='121' u='c' c='_ZNK5ceres8internal23ImplicitSchurComplement12LeftMultiplyEPKdPd'/>
<inh f='ceres-solver/internal/ceres/linear_operator.h' l='48' c='_ZNK5ceres8internal14LinearOperator13RightMultiplyEPKdPd'/>
<def f='ceres-solver/internal/ceres/implicit_schur_complement.cc' l='107' ll='137' type='void ceres::internal::ImplicitSchurComplement::RightMultiply(const double * x, double * y) const'/>
<doc f='ceres-solver/internal/ceres/implicit_schur_complement.cc' l='100'>// Evaluate the product
//
//   Sx = [F&apos;F - F&apos;E (E&apos;E)^-1 E&apos;F]x
//
// By breaking it down into individual matrix vector products
// involving the matrices E and F. This is implemented using a
// PartitionedMatrixView of the input matrix A.</doc>
<doc f='ceres-solver/internal/ceres/implicit_schur_complement.h' l='115'>// y += Sx, where S is the Schur complement.</doc>
<use f='ceres-solver/internal/ceres/implicit_schur_complement_test.cc' l='141' u='c' c='_ZN5ceres8internal27ImplicitSchurComplementTest27TestImplicitSchurComplementEPd'/>
