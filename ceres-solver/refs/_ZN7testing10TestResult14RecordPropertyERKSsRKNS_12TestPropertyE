<dec f='ceres-solver/internal/ceres/gtest/gtest.h' l='19201' type='void testing::TestResult::RecordProperty(const std::string &amp; xml_element, const testing::TestProperty &amp; test_property)'/>
<doc f='ceres-solver/internal/ceres/gtest/gtest.h' l='19195'>// Adds a test property to the list. The property is validated and may add
  // a non-fatal failure if invalid (e.g., if it conflicts with reserved
  // key names). If a property is already recorded for the same key, the
  // value will be updated, rather than storing multiple values for the same
  // key.  xml_element specifies the element for which the property is being
  // recorded and is used for validation.</doc>
<use f='ceres-solver/internal/ceres/gmock_gtest_all.cc' l='1426' u='c' c='_ZN7testing8internal18TestResultAccessor14RecordPropertyEPNS_10TestResultERKSsRKNS_12TestPropertyE'/>
<def f='ceres-solver/internal/ceres/gmock_gtest_all.cc' l='3505' ll='3519' type='void testing::TestResult::RecordProperty(const std::string &amp; xml_element, const testing::TestProperty &amp; test_property)'/>
<use f='ceres-solver/internal/ceres/gmock_gtest_all.cc' l='5834' u='c' c='_ZN7testing8internal12UnitTestImpl14RecordPropertyERKNS_12TestPropertyE'/>
<doc f='ceres-solver/internal/ceres/gmock_gtest_all.cc' l='3502'>// Adds a test property to the list. If a property with the same key as the
// supplied property is already represented, the value of this test_property
// replaces the old value for that key.</doc>
