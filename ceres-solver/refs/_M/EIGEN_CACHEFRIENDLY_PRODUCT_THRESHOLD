<dec f='include/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h' l='18'/>
<use f='include/eigen3/Eigen/src/Core/arch/Default/Settings.h' l='30' u='a'/>
<use f='include/eigen3/Eigen/src/Core/GeneralProduct.h' l='50' u='c'/>
<use f='include/eigen3/Eigen/src/Core/GeneralProduct.h' l='70' u='c'/>
<dec f='ceres-solver/internal/ceres/schur_eliminator_impl.h' l='46'/>
<doc f='ceres-solver/internal/ceres/schur_eliminator_impl.h' l='37'>// Eigen has an internal threshold switching between different matrix
// multiplication algorithms. In particular for matrices larger than
// EIGEN_CACHEFRIENDLY_PRODUCT_THRESHOLD it uses a cache friendly
// matrix matrix product algorithm that has a higher setup cost. For
// matrix sizes close to this threshold, especially when the matrices
// are thin and long, the default choice may not be optimal. This is
// the case for us, as the default choice causes a 30% performance
// regression when we moved from Eigen2 to Eigen3.</doc>
