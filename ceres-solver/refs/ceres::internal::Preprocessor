<def f='ceres-solver/internal/ceres/preprocessor.h' l='70' ll='78'/>
<ovr f='ceres-solver/internal/ceres/line_search_preprocessor.h' l='39' c='ceres::internal::LineSearchPreprocessor'/>
<size>8</size>
<doc f='ceres-solver/internal/ceres/preprocessor.h' l='54'>// Given a Problem object and a Solver::Options object indicating the
// configuration of the solver, the job of the Preprocessor is to
// analyze the Problem and perform the setup needed to solve it using
// the desired Minimization algorithm. The setup involves removing
// redundancies in the input problem (inactive parameter and residual
// blocks), finding fill reducing orderings as needed, configuring and
// creating various objects needed by the Minimizer to solve the
// problem such as an evaluator, a linear solver etc.
//
// Each Minimizer (LineSearchMinimizer and TrustRegionMinimizer) comes
// with a corresponding Preprocessor (LineSearchPreprocessor and
// TrustRegionPreprocessor) that knows about its needs and performs
// the preprocessing needed.
//
// The output of the Preprocessor is stored in a PreprocessedProblem
// object.</doc>
<fun r='_ZN5ceres8internal12Preprocessor6CreateENS_13MinimizerTypeE'/>
<fun r='_ZN5ceres8internal12PreprocessorD1Ev'/>
<fun r='_ZN5ceres8internal12Preprocessor10PreprocessERKNS_6Solver7OptionsEPNS0_11ProblemImplEPNS0_19PreprocessedProblemE'/>
<ovr f='ceres-solver/internal/ceres/trust_region_preprocessor.h' l='39' c='ceres::internal::TrustRegionPreprocessor'/>
<fun r='_ZN5ceres8internal12Preprocessor6CreateENS_13MinimizerTypeE'/>
<fun r='_ZN5ceres8internal12PreprocessorD1Ev'/>
