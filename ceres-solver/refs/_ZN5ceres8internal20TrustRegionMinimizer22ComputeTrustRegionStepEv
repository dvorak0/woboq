<dec f='ceres-solver/internal/ceres/trust_region_minimizer.h' l='64' type='bool ceres::internal::TrustRegionMinimizer::ComputeTrustRegionStep()'/>
<use f='ceres-solver/internal/ceres/trust_region_minimizer.cc' l='89' u='c' c='_ZN5ceres8internal20TrustRegionMinimizer8MinimizeERKNS0_9Minimizer7OptionsEPdPNS_6Solver7SummaryE'/>
<def f='ceres-solver/internal/ceres/trust_region_minimizer.cc' l='355' ll='424' type='bool ceres::internal::TrustRegionMinimizer::ComputeTrustRegionStep()'/>
<doc f='ceres-solver/internal/ceres/trust_region_minimizer.cc' l='337'>// Compute the trust region step using the TrustRegionStrategy chosen
// by the user.
//
// If the strategy returns with LINEAR_SOLVER_FATAL_ERROR, which
// indicates an unrecoverable error, return false. This is the only
// condition that returns false.
//
// If the strategy returns with LINEAR_SOLVER_FAILURE, which indicates
// a numerical failure that could be recovered from by retrying
// (e.g. by increasing the strength of the regularization), we set
// iteration_summary_.step_is_valid to false and return true.
//
// In all other cases, we compute the decrease in the trust region
// model problem. In exact arithmetic, this should always be
// positive, but due to numerical problems in the TrustRegionStrategy
// or round off error when computing the decrease it may be
// negative. In which case again, we set
// iteration_summary_.step_is_valid to false.</doc>
