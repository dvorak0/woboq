<dec f='include/eigen3/Eigen/src/Core/MatrixBase.h' l='181' type='const typename LazyProductReturnType&lt;Derived, OtherDerived&gt;::Type Eigen::MatrixBase::lazyProduct(const MatrixBase&lt;OtherDerived&gt; &amp; other) const'/>
<def f='include/eigen3/Eigen/src/Core/GeneralProduct.h' l='609' ll='631' type='const typename LazyProductReturnType&lt;Derived, OtherDerived&gt;::Type Eigen::MatrixBase::lazyProduct(const MatrixBase&lt;OtherDerived&gt; &amp; other) const'/>
<doc f='include/eigen3/Eigen/src/Core/GeneralProduct.h' l='598'>/** \returns an expression of the matrix product of \c *this and \a other without implicit evaluation.
  *
  * The returned product will behave like any other expressions: the coefficients of the product will be
  * computed once at a time as requested. This might be useful in some extremely rare cases when only
  * a small and no coherent fraction of the result&apos;s coefficients have to be computed.
  *
  * \warning This version of the matrix product can be much much slower. So use it only if you know
  * what you are doing and that you measured a true speed improvement.
  *
  * \sa operator*(const MatrixBase&amp;)
  */</doc>
