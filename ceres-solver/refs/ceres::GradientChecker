<def f='ceres-solver/include/ceres/gradient_checker.h' l='67' ll='145'/>
<size>40</size>
<doc f='ceres-solver/include/ceres/gradient_checker.h' l='51'>// GradientChecker compares the Jacobians returned by a cost function against
// derivatives estimated using finite differencing.
//
// The condition enforced is that
//
//    (J_actual(i, j) - J_numeric(i, j))
//   ------------------------------------  &lt;  relative_precision
//   max(J_actual(i, j), J_numeric(i, j))
//
// where J_actual(i, j) is the jacobian as computed by the supplied cost
// function (by the user) multiplied by the local parameterization Jacobian
// and J_numeric is the jacobian as computed by finite differences, multiplied
// by the local parameterization Jacobian as well.
//
// How to use: Fill in an array of pointers to parameter blocks for your
// CostFunction, and then call Probe(). Check that the return value is &apos;true&apos;.</doc>
<fun r='_ZN5ceres15GradientCheckerC1EPKNS_12CostFunctionEPKSt6vectorIPKNS_21LocalParameterizationESaIS7_EERKNS_18NumericDiffOptionsE'/>
<fun r='_ZNK5ceres15GradientChecker5ProbeEPKPKddPNS0_12ProbeResultsE'/>
<fun r='_ZN5ceres15GradientCheckerC1Ev'/>
<fun r='_ZN5ceres15GradientCheckerC1ERKS0_'/>
<mbr r='ceres::GradientChecker::local_parameterizations_' o='0' t='std::vector&lt;const LocalParameterization *&gt;'/>
<mbr r='ceres::GradientChecker::function_' o='192' t='const ceres::CostFunction *'/>
<mbr r='ceres::GradientChecker::finite_diff_cost_function_' o='256' t='internal::scoped_ptr&lt;CostFunction&gt;'/>
<fun r='_ZN5ceres15GradientCheckerC1EPKNS_12CostFunctionEPKSt6vectorIPKNS_21LocalParameterizationESaIS7_EERKNS_18NumericDiffOptionsE'/>
<fun r='_ZNK5ceres15GradientChecker5ProbeEPKPKddPNS0_12ProbeResultsE'/>
