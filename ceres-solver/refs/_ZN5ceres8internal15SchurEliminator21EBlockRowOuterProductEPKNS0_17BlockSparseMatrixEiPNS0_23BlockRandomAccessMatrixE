<dec f='ceres-solver/internal/ceres/schur_eliminator.h' l='304' type='void ceres::internal::SchurEliminator::EBlockRowOuterProduct(const ceres::internal::BlockSparseMatrix * A, int row_block_index, ceres::internal::BlockRandomAccessMatrix * lhs)'/>
<use f='ceres-solver/internal/ceres/schur_eliminator_impl.h' l='457' u='c' c='_ZN5ceres8internal15SchurEliminator29ChunkDiagonalBlockAndGradientERKNS1_5ChunkEPKNS0_17BlockSparseMatrixEPKdiPNS_10EigenTypesIXT0_EXT0_EE6MatrixEPdSE7014322'/>
<def f='ceres-solver/internal/ceres/schur_eliminator_impl.h' l='646' ll='694' type='void ceres::internal::SchurEliminator::EBlockRowOuterProduct(const ceres::internal::BlockSparseMatrix * A, int row_block_index, ceres::internal::BlockRandomAccessMatrix * lhs)'/>
<doc f='ceres-solver/internal/ceres/schur_eliminator_impl.h' l='643'>// For a row with an e_block, compute the contribition S += F&apos;F. This
// function has the same structure as NoEBlockRowOuterProduct, except
// that this function uses the template parameters.</doc>
