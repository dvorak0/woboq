<dec f='ceres-solver/internal/ceres/gmock_gtest_all.cc' l='7828' type='void testing::internal::StackLowerThanAddress(const void * ptr, bool * result)'/>
<def f='ceres-solver/internal/ceres/gmock_gtest_all.cc' l='7829' ll='7832' type='void testing::internal::StackLowerThanAddress(const void * ptr, bool * result)'/>
<use f='ceres-solver/internal/ceres/gmock_gtest_all.cc' l='7839' u='c' c='_ZN7testing8internal14StackGrowsDownEv'/>
<doc f='ceres-solver/internal/ceres/gmock_gtest_all.cc' l='7819'>// Two utility routines that together determine the direction the stack
// grows.
// This could be accomplished more elegantly by a single recursive
// function, but we want to guard against the unlikely possibility of
// a smart compiler optimizing the recursion away.
//
// GTEST_NO_INLINE_ is required to prevent GCC 4.6 from inlining
// StackLowerThanAddress into StackGrowsDown, which then doesn&apos;t give
// correct answer.</doc>
