<dec f='include/c++/4.8/tr1/hashtable.h' l='400' type='iterator std::tr1::_Hashtable::erase(iterator , iterator )'/>
<def f='include/c++/4.8/tr1/hashtable.h' l='1080' ll='1094' type='typename _Hashtable&lt;_Key, _Value, _Allocator, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, __chc, __cit, __uk&gt;::iterator std::tr1::_Hashtable::erase(iterator __first, iterator __last)'/>
<doc f='include/c++/4.8/tr1/hashtable.h' l='1077'>// ??? This could be optimized by taking advantage of the bucket
  // structure, but it&apos;s not clear that it&apos;s worth doing.  It probably
  // wouldn&apos;t even be an optimization unless the load factor is large.</doc>
