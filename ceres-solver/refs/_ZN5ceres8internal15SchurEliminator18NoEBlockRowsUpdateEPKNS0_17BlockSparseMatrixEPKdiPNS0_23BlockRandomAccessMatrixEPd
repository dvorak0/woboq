<dec f='ceres-solver/internal/ceres/schur_eliminator.h' l='309' type='void ceres::internal::SchurEliminator::NoEBlockRowsUpdate(const ceres::internal::BlockSparseMatrix * A, const double * b, int row_block_counter, ceres::internal::BlockRandomAccessMatrix * lhs, double * rhs)'/>
<use f='ceres-solver/internal/ceres/schur_eliminator_impl.h' l='297' u='c' c='_ZN5ceres8internal15SchurEliminator9EliminateEPKNS0_17BlockSparseMatrixEPKdS6_PNS0_23BlockRandomAccessMatrixEPd'/>
<def f='ceres-solver/internal/ceres/schur_eliminator_impl.h' l='553' ll='576' type='void ceres::internal::SchurEliminator::NoEBlockRowsUpdate(const ceres::internal::BlockSparseMatrix * A, const double * b, int row_block_counter, ceres::internal::BlockRandomAccessMatrix * lhs, double * rhs)'/>
<doc f='ceres-solver/internal/ceres/schur_eliminator_impl.h' l='550'>// For rows with no e_blocks, the schur complement update reduces to S
// += F&apos;F. This function iterates over the rows of A with no e_block,
// and calls NoEBlockRowOuterProduct on each row.</doc>
