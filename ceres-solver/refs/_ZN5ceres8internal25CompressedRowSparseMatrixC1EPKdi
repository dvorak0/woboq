<dec f='ceres-solver/internal/ceres/compressed_row_sparse_matrix.h' l='102' type='void ceres::internal::CompressedRowSparseMatrix::CompressedRowSparseMatrix(const double * diagonal, int num_rows)'/>
<doc f='ceres-solver/internal/ceres/compressed_row_sparse_matrix.h' l='98'>// Build a square sparse diagonal matrix with num_rows rows and
  // columns. The diagonal m(i,i) = diagonal(i);
  //
  // The storage type is set to UNSYMMETRIC</doc>
<def f='ceres-solver/internal/ceres/compressed_row_sparse_matrix.cc' l='222' ll='241' type='void ceres::internal::CompressedRowSparseMatrix::CompressedRowSparseMatrix(const double * diagonal, int num_rows)'/>
<use f='ceres-solver/internal/ceres/dynamic_sparse_normal_cholesky_solver.cc' l='78' u='c' c='_ZN5ceres8internal33DynamicSparseNormalCholeskySolver9SolveImplEPNS0_25CompressedRowSparseMatrixEPKdRKNS0_12LinearSolver15PerSolveOptionsEPd'/>
<use f='ceres-solver/internal/ceres/sparse_normal_cholesky_solver.cc' l='178' u='c' c='_ZN5ceres8internal26SparseNormalCholeskySolver9SolveImplEPNS0_25CompressedRowSparseMatrixEPKdRKNS0_12LinearSolver15PerSolveOptionsEPd'/>
