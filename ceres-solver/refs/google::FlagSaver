<def f='include/gflags/gflags.h' l='275' ll='285'/>
<size>8</size>
<doc f='include/gflags/gflags.h' l='247'>// --------------------------------------------------------------------
// Saves the states (value, default value, whether the user has set
// the flag, registered validators, etc) of all flags, and restores
// them when the FlagSaver is destroyed.  This is very useful in
// tests, say, when you want to let your tests change the flags, but
// make sure that they get reverted to the original states when your
// test is complete.
//
// Example usage:
//   void TestFoo() {
//     FlagSaver s1;
//     FLAG_foo = false;
//     FLAG_bar = &quot;some value&quot;;
//
//     // test happens here.  You can return at any time
//     // without worrying about restoring the FLAG values.
//   }
//
// Note: This class is marked with ATTRIBUTE_UNUSED because all the
// work is done in the constructor and destructor, so in the standard
// usage example above, the compiler would complain that it&apos;s an
// unused variable.
//
// This class is thread-safe.  However, its destructor writes to
// exactly the set of flags that have changed value during its
// lifetime, so concurrent _direct_ access to those flags
// (i.e. FLAGS_foo instead of {Get,Set}CommandLineOption()) is unsafe.</doc>
<fun r='_ZN6google9FlagSaverC1Ev'/>
<fun r='_ZN6google9FlagSaverD1Ev'/>
<mbr r='google::FlagSaver::impl_' o='0' t='class FlagSaverImpl *'/>
<fun r='_ZN6google9FlagSaverC1ERKS0_'/>
<fun r='_ZN6google9FlagSaveraSERKS0_'/>
