<dec f='include/eigen3/Eigen/src/QR/HouseholderQR.h' l='180' type='typename MatrixType::RealScalar Eigen::HouseholderQR::logAbsDeterminant() const'/>
<def f='include/eigen3/Eigen/src/QR/HouseholderQR.h' l='207' ll='213' type='typename MatrixType::RealScalar Eigen::HouseholderQR::logAbsDeterminant() const'/>
<doc f='include/eigen3/Eigen/src/QR/HouseholderQR.h' l='168'>/** \returns the natural log of the absolute value of the determinant of the matrix of which
      * *this is the QR decomposition. It has only linear complexity
      * (that is, O(n) where n is the dimension of the square matrix)
      * as the QR decomposition has already been computed.
      *
      * \note This is only for square matrices.
      *
      * \note This method is useful to work around the risk of overflow/underflow that&apos;s inherent
      * to determinant computation.
      *
      * \sa absDeterminant(), MatrixBase::determinant()
      */</doc>
