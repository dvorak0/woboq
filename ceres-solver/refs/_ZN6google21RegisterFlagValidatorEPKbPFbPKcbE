<dec f='include/gflags/gflags.h' l='124' type='bool google::RegisterFlagValidator(const bool * flag, bool (*)(const char *, bool) validate_fn)'/>
<doc f='include/gflags/gflags.h' l='95'>// --------------------------------------------------------------------
// To actually define a flag in a file, use DEFINE_bool,
// DEFINE_string, etc. at the bottom of this file.  You may also find
// it useful to register a validator with the flag.  This ensures that
// when the flag is parsed from the commandline, or is later set via
// SetCommandLineOption, we call the validation function. It is _not_
// called when you assign the value to the flag directly using the = operator.
//
// The validation function should return true if the flag value is valid, and
// false otherwise. If the function returns false for the new setting of the
// flag, the flag will retain its current value. If it returns false for the
// default value, ParseCommandLineFlags() will die.
//
// This function is safe to call at global construct time (as in the
// example below).
//
// Example use:
//    static bool ValidatePort(const char* flagname, int32 value) {
//       if (value &gt; 0 &amp;&amp; value &lt; 32768)   // value is ok
//         return true;
//       printf(&quot;Invalid value for --%s: %d\n&quot;, flagname, (int)value);
//       return false;
//    }
//    DEFINE_int32(port, 0, &quot;What port to listen on&quot;);
//    static bool dummy = RegisterFlagValidator(&amp;FLAGS_port, &amp;ValidatePort);

// Returns true if successfully registered, false if not (because the
// first argument doesn&apos;t point to a command-line flag, or because a
// validator is already registered for this flag).</doc>
