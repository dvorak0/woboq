<inh f='ceres-solver/include/ceres/loss_function.h' l='86' c='ceres::LossFunction'/>
<def f='ceres-solver/include/ceres/loss_function.h' l='327' ll='347'/>
<size>32</size>
<doc f='ceres-solver/include/ceres/loss_function.h' l='310'>// The discussion above has to do with length scaling: it affects the space
// in which s is measured. Sometimes you want to simply scale the output
// value of the robustifier. For example, you might want to weight
// different error terms differently (e.g., weight pixel reprojection
// errors differently from terrain errors).
//
// If rho is the wrapped robustifier, then this simply outputs
// s -&gt; a * rho(s)
//
// The first and second derivatives are, not surprisingly
// s -&gt; a * rho&apos;(s)
// s -&gt; a * rho&apos;&apos;(s)
//
// Since we treat the a NULL Loss function as the Identity loss
// function, rho = NULL is a valid input and will result in the input
// being scaled by a. This provides a simple way of implementing a
// scaled ResidualBlock.</doc>
<fun r='_ZN5ceres10ScaledLossC1EPKNS_12LossFunctionEdNS_9OwnershipE'/>
<fun r='_ZN5ceres10ScaledLossD1Ev'/>
<fun r='_ZNK5ceres10ScaledLoss8EvaluateEdPd'/>
<mbr r='ceres::ScaledLoss::rho_' o='64' t='internal::scoped_ptr&lt;const LossFunction&gt;'/>
<mbr r='ceres::ScaledLoss::a_' o='128' t='const double'/>
<mbr r='ceres::ScaledLoss::ownership_' o='192' t='const ceres::Ownership'/>
<fun r='_ZN5ceres10ScaledLossC1ERKS0_'/>
