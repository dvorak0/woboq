<dec f='ceres-solver/internal/ceres/visibility.h' l='77' type='WeightedGraph&lt;int&gt; * ceres::internal::CreateSchurComplementGraph(const std::vector&lt;std::set&lt;int&gt; &gt; &amp; visibility)'/>
<def f='ceres-solver/internal/ceres/visibility.cc' l='85' ll='161' type='WeightedGraph&lt;int&gt; * ceres::internal::CreateSchurComplementGraph(const vector&lt;set&lt;int&gt; &gt; &amp; visibility)'/>
<doc f='ceres-solver/internal/ceres/visibility.h' l='64'>// Given f_block visibility as computed by the ComputeVisibility
// function above, construct and return a graph whose vertices are
// f_blocks and an edge connects two vertices if they have atleast one
// e_block in common. The weight of this edge is normalized dot
// product between the visibility vectors of the two
// vertices/f_blocks.
//
// This graph reflects the sparsity structure of reduced camera
// matrix/Schur complement matrix obtained by eliminating the e_blocks
// from the normal equations.
//
// Caller acquires ownership of the returned WeightedGraph pointer
// (heap-allocated).</doc>
<use f='ceres-solver/internal/ceres/visibility_based_preconditioner.cc' l='199' u='c' c='_ZN5ceres8internal29VisibilityBasedPreconditioner14ClusterCamerasERKSt6vectorISt3setIiSt4lessIiESaIiEESaIS7_EE'/>
<use f='ceres-solver/internal/ceres/visibility_test.cc' l='114' u='c' c='_ZN5ceres8internal32VisibilityTest_SimpleMatrix_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/visibility_test.cc' l='190' u='c' c='_ZN5ceres8internal29VisibilityTest_NoEBlocks_Test8TestBodyEv'/>
