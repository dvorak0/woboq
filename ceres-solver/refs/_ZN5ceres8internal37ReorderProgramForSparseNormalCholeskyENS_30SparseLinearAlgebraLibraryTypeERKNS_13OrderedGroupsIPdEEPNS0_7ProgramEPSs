<dec f='ceres-solver/internal/ceres/reorder_program.h' l='92' type='bool ceres::internal::ReorderProgramForSparseNormalCholesky(ceres::SparseLinearAlgebraLibraryType sparse_linear_algebra_library_type, const ParameterBlockOrdering &amp; parameter_block_ordering, ceres::internal::Program * program, std::string * error)'/>
<def f='ceres-solver/internal/ceres/reorder_program.cc' l='543' ll='598' type='bool ceres::internal::ReorderProgramForSparseNormalCholesky(const ceres::SparseLinearAlgebraLibraryType sparse_linear_algebra_library_type, const ParameterBlockOrdering &amp; parameter_block_ordering, ceres::internal::Program * program, string * error)'/>
<doc f='ceres-solver/internal/ceres/reorder_program.h' l='82'>// Sparse cholesky factorization routines when doing the sparse
// cholesky factorization of the Jacobian matrix, reorders its
// columns to reduce the fill-in. Compute this permutation and
// re-order the parameter blocks.
//
// When using SuiteSparse, if the parameter_block_ordering contains
// more than one elimination group and support for constrained
// fill-reducing ordering is available in the sparse linear algebra
// library (SuiteSparse version &gt;= 4.2.0) then the fill reducing
// ordering will take it into account, otherwise it will be ignored.</doc>
<use f='ceres-solver/internal/ceres/reorder_program_test.cc' l='192' u='c' c='_ZN5ceres8internal57ReorderProgramForSparseNormalCholeskyUsingSuiteSparseTest26ComputeAndValidateOrderingERKNS_13OrderedGroupsIPdEE'/>
<use f='ceres-solver/internal/ceres/trust_region_preprocessor.cc' l='126' u='c' c='_ZN5ceres8internal12_GLOBAL__N_114ReorderProgramEPNS0_19PreprocessedProblemE'/>
