<def f='ceres-solver/internal/ceres/gmock/gmock.h' l='10540' ll='10546'/>
<ovr f='ceres-solver/internal/ceres/gmock/gmock.h' l='10550' c='testing::internal::ActionResultHolder'/>
<ovr f='ceres-solver/internal/ceres/gmock/gmock.h' l='10598' c='testing::internal::ActionResultHolder'/>
<size>8</size>
<doc f='ceres-solver/internal/ceres/gmock/gmock.h' l='10531'>// C++ treats the void type specially.  For example, you cannot define
// a void-typed variable or pass a void value to a function.
// ActionResultHolder&lt;T&gt; holds a value of type T, where T must be a
// copyable type or void (T doesn&apos;t need to be default-constructable).
// It hides the syntactic difference between void and other types, and
// is used to unify the code for invoking both void-returning and
// non-void-returning mock functions.

// Untyped base class for ActionResultHolder&lt;T&gt;.</doc>
<fun r='_ZN7testing8internal29UntypedActionResultHolderBaseD1Ev'/>
<fun r='_ZNK7testing8internal29UntypedActionResultHolderBase19PrintAsActionResultEPSo'/>
