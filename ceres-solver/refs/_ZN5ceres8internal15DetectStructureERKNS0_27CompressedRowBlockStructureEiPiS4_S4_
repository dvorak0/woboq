<dec f='ceres-solver/internal/ceres/detect_structure.h' l='58' type='void ceres::internal::DetectStructure(const ceres::internal::CompressedRowBlockStructure &amp; bs, const int num_eliminate_blocks, int * row_block_size, int * e_block_size, int * f_block_size)'/>
<def f='ceres-solver/internal/ceres/detect_structure.cc' l='38' ll='117' type='void ceres::internal::DetectStructure(const ceres::internal::CompressedRowBlockStructure &amp; bs, const int num_eliminate_blocks, int * row_block_size, int * e_block_size, int * f_block_size)'/>
<doc f='ceres-solver/internal/ceres/detect_structure.h' l='39'>// Detect static blocks in the problem sparsity. For rows containing
// e_blocks, we are interested in detecting if the size of the row
// blocks, e_blocks and the f_blocks remain constant. If they do, then
// we can use template specialization to improve the performance of
// the block level linear algebra operations used by the
// SchurEliminator.
//
// If a block size is not constant, we return Eigen::Dynamic as the
// value. This just means that the eliminator uses dynamically sized
// linear algebra operations rather than static operations whose size
// is known as compile time.
//
// For more details about e_blocks and f_blocks, see
// schur_eliminator.h. This information is used to initialized an
// appropriate template specialization of SchurEliminator.
//
// Note: The structure of rows without any e-blocks has no effect on
// the values returned by this function. It is entirely possible that
// the f_block_size and row_blocks_size is not constant in such rows.</doc>
<use f='ceres-solver/internal/ceres/detect_structure_test.cc' l='81' u='c' c='_ZN5ceres8internal37DetectStructure_EverythingStatic_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/detect_structure_test.cc' l='133' u='c' c='_ZN5ceres8internal31DetectStructure_DynamicRow_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/detect_structure_test.cc' l='186' u='c' c='_ZN5ceres8internal47DetectStructure_DynamicFBlockDifferentRows_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/detect_structure_test.cc' l='238' u='c' c='_ZN5ceres8internal34DetectStructure_DynamicEBlock_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/detect_structure_test.cc' l='282' u='c' c='_ZN5ceres8internal41DetectStructure_DynamicFBlockSameRow_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/iterative_schur_complement_solver.cc' l='76' u='c' c='_ZN5ceres8internal30IterativeSchurComplementSolver9SolveImplEPNS0_17BlockSparseMatrixEPKdRKNS0_12LinearSolver15PerSolveOptionsEPd'/>
<use f='ceres-solver/internal/ceres/schur_complement_solver.cc' l='132' u='c' c='_ZN5ceres8internal21SchurComplementSolver9SolveImplEPNS0_17BlockSparseMatrixEPKdRKNS0_12LinearSolver15PerSolveOptionsEPd'/>
<use f='ceres-solver/internal/ceres/schur_complement_solver_test.cc' l='105' u='c' c='_ZN5ceres8internal25SchurComplementSolverTest26ComputeAndCompareSolutionsEibNS_16LinearSolverTypeENS_29DenseLinearAlgebraLibraryTypeENS_30SparseLinearAlgebraLibraryTypeEb'/>
<use f='ceres-solver/internal/ceres/schur_eliminator_test.cc' l='147' u='c' c='_ZN5ceres8internal19SchurEliminatorTest24EliminateSolveAndCompareERKN5Eigen3MapINS2_6MatrixIdLin1ELi1ELi0ELin1ELi1EEELi0ENS2_6StrideILi0ELi0EEEEEbd'/>
<use f='ceres-solver/internal/ceres/solver.cc' l='554' u='c' c='_ZN5ceres6Solver5SolveERKNS0_7OptionsEPNS_7ProblemEPNS0_7SummaryE'/>
