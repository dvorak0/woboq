<dec f='ceres-solver/internal/ceres/compressed_row_jacobian_writer.h' l='83' type='static void ceres::internal::CompressedRowJacobianWriter::GetOrderedParameterBlocks(const ceres::internal::Program * program, int residual_id, std::vector&lt;std::pair&lt;int, int&gt; &gt; * evaluated_jacobian_blocks)'/>
<def f='ceres-solver/internal/ceres/compressed_row_jacobian_writer.cc' l='71' ll='88' type='static void ceres::internal::CompressedRowJacobianWriter::GetOrderedParameterBlocks(const ceres::internal::Program * program, int residual_id, vector&lt;pair&lt;int, int&gt; &gt; * evaluated_jacobian_blocks)'/>
<use f='ceres-solver/internal/ceres/compressed_row_jacobian_writer.cc' l='223' u='c' c='_ZN5ceres8internal27CompressedRowJacobianWriter5WriteEiiPPdPNS0_12SparseMatrixE'/>
<doc f='ceres-solver/internal/ceres/compressed_row_jacobian_writer.h' l='70'>// It is necessary to determine the order of the jacobian blocks
  // before copying them into a CompressedRowSparseMatrix (or derived
  // type).  Just because a cost function uses parameter blocks 1
  // after 2 in its arguments does not mean that the block 1 occurs
  // before block 2 in the column layout of the jacobian. Thus,
  // GetOrderedParameterBlocks determines the order by sorting the
  // jacobian blocks by their position in the state vector.
  //
  // This function is static so that it is available to other jacobian
  // writers which use CompressedRowSparseMatrix (or derived types).
  // (Jacobian writers do not fall under any type hierarchy; they only
  // have to provide an interface as specified in
  // program_evaluator.h).</doc>
<use f='ceres-solver/internal/ceres/dynamic_compressed_row_jacobian_writer.cc' l='86' u='c' c='_ZN5ceres8internal34DynamicCompressedRowJacobianWriter5WriteEiiPPdPNS0_12SparseMatrixE'/>
