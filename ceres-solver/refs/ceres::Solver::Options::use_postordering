<use f='ceres-solver/include/ceres/solver.h' l='123' u='w' c='_ZN5ceres6Solver7OptionsC1Ev'/>
<dec f='ceres-solver/include/ceres/solver.h' l='543' type='bool'/>
<offset>1992</offset>
<doc f='ceres-solver/include/ceres/solver.h' l='524'>// Sparse Cholesky factorization algorithms use a fill-reducing
    // ordering to permute the columns of the Jacobian matrix. There
    // are two ways of doing this.

    // 1. Compute the Jacobian matrix in some order and then have the
    //    factorization algorithm permute the columns of the Jacobian.

    // 2. Compute the Jacobian with its columns already permuted.

    // The first option incurs a significant memory penalty. The
    // factorization algorithm has to make a copy of the permuted
    // Jacobian matrix, thus Ceres pre-permutes the columns of the
    // Jacobian matrix and generally speaking, there is no performance
    // penalty for doing so.

    // In some rare cases, it is worth using a more complicated
    // reordering algorithm which has slightly better runtime
    // performance at the expense of an extra copy of the Jacobian
    // matrix. Setting use_postordering to true enables this tradeoff.</doc>
<use f='ceres-solver/internal/ceres/trust_region_preprocessor.cc' l='200' u='r' c='_ZN5ceres8internal12_GLOBAL__N_117SetupLinearSolverEPNS0_19PreprocessedProblemE'/>
