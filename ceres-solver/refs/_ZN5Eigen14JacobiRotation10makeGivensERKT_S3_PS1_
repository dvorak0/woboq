<dec f='include/eigen3/Eigen/src/Jacobi/Jacobi.h' l='68' type='void Eigen::JacobiRotation::makeGivens(const Scalar &amp; p, const Scalar &amp; q, Scalar * z = 0)'/>
<def f='include/eigen3/Eigen/src/Jacobi/Jacobi.h' l='147' ll='151' type='void Eigen::JacobiRotation::makeGivens(const Scalar &amp; p, const Scalar &amp; q, Scalar * z = 0)'/>
<doc f='include/eigen3/Eigen/src/Jacobi/Jacobi.h' l='131'>/** Makes \c *this as a Givens rotation \c G such that applying \f$ G^* \f$ to the left of the vector
  * \f$ V = \left ( \begin{array}{c} p \\ q \end{array} \right )\f$ yields:
  * \f$ G^* V = \left ( \begin{array}{c} r \\ 0 \end{array} \right )\f$.
  *
  * The value of \a z is returned if \a z is not null (the default is null).
  * Also note that G is built such that the cosine is always real.
  *
  * Example: \include Jacobi_makeGivens.cpp
  * Output: \verbinclude Jacobi_makeGivens.out
  *
  * This function implements the continuous Givens rotation generation algorithm
  * found in Anderson (2000), Discontinuous Plane Rotations and the Symmetric Eigenvalue Problem.
  * LAPACK Working Note 150, University of Tennessee, UT-CS-00-454, December 4, 2000.
  *
  * \sa MatrixBase::applyOnTheLeft(), MatrixBase::applyOnTheRight()
  */</doc>
