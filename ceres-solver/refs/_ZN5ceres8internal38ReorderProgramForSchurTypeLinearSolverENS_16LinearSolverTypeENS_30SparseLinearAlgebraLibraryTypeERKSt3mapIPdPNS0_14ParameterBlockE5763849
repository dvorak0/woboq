<dec f='ceres-solver/internal/ceres/reorder_program.h' l='74' type='bool ceres::internal::ReorderProgramForSchurTypeLinearSolver(ceres::LinearSolverType linear_solver_type, ceres::SparseLinearAlgebraLibraryType sparse_linear_algebra_library_type, const ProblemImpl::ParameterMap &amp; parameter_map, ParameterBlockOrdering * parameter_block_ordering, ceres::internal::Program * program, std::string * error)'/>
<def f='ceres-solver/internal/ceres/reorder_program.cc' l='446' ll='541' type='bool ceres::internal::ReorderProgramForSchurTypeLinearSolver(const ceres::LinearSolverType linear_solver_type, const ceres::SparseLinearAlgebraLibraryType sparse_linear_algebra_library_type, const ProblemImpl::ParameterMap &amp; parameter_map, ParameterBlockOrdering * parameter_block_ordering, ceres::internal::Program * program, string * error)'/>
<doc f='ceres-solver/internal/ceres/reorder_program.h' l='58'>// Schur type solvers require that all parameter blocks eliminated
// by the Schur eliminator occur before others and the residuals be
// sorted in lexicographic order of their parameter blocks.
//
// If the parameter_block_ordering only contains one elimination
// group then a maximal independent set is computed and used as the
// first elimination group, otherwise the user&apos;s ordering is used.
//
// If the linear solver type is SPARSE_SCHUR and support for
// constrained fill-reducing ordering is available in the sparse
// linear algebra library (SuiteSparse version &gt;= 4.2.0) then
// columns of the schur complement matrix are ordered to reduce the
// fill-in the Cholesky factorization.
//
// Upon return, ordering contains the parameter block ordering that
// was used to order the program.</doc>
<use f='ceres-solver/internal/ceres/trust_region_preprocessor.cc' l='115' u='c' c='_ZN5ceres8internal12_GLOBAL__N_114ReorderProgramEPNS0_19PreprocessedProblemE'/>
