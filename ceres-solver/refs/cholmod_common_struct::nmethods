<dec f='include/suitesparse/cholmod_core.h' l='617' type='int'/>
<offset>1408</offset>
<doc f='include/suitesparse/cholmod_core.h' l='561'>/* The cholmod_analyze routine can try many different orderings and select
     * the best one.  It can also try one ordering method multiple times, with
     * different parameter settings.  The default is to use three orderings,
     * the user&apos;s permutation (if provided), AMD which is the fastest ordering
     * and generally gives good fill-in, and METIS.  CHOLMOD&apos;s nested dissection
     * (METIS with a constrained AMD) usually gives a better ordering than METIS
     * alone (by about 5% to 10%) but it takes more time.
     *
     * If you know the method that is best for your matrix, set Common-&gt;nmethods
     * to 1 and set Common-&gt;method [0] to the set of parameters for that method.
     * If you set it to 1 and do not provide a permutation, then only AMD will
     * be called.
     *
     * If METIS is not available, the default # of methods tried is 2 (the user
     * permutation, if any, and AMD).
     *
     * To try other methods, set Common-&gt;nmethods to the number of methods you
     * want to try.  The suite of default methods and their parameters is
     * described in the cholmod_defaults routine, and summarized here:
     *
     *	    Common-&gt;method [i]:
     *	    i = 0: user-provided ordering (cholmod_analyze_p only)
     *	    i = 1: AMD (for both A and A*A&apos;)
     *	    i = 2: METIS
     *	    i = 3: CHOLMOD&apos;s nested dissection (NESDIS), default parameters
     *	    i = 4: natural
     *	    i = 5: NESDIS with nd_small = 20000
     *	    i = 6: NESDIS with nd_small = 4, no constrained minimum degree
     *	    i = 7: NESDIS with no dense node removal
     *	    i = 8: AMD for A, COLAMD for A*A&apos;
     *
     * You can modify the suite of methods you wish to try by modifying
     * Common.method [...] after calling cholmod_start or cholmod_defaults.
     *
     * For example, to use AMD, followed by a weighted postordering:
     *
     *	    Common-&gt;nmethods = 1 ;
     *	    Common-&gt;method [0].ordering = CHOLMOD_AMD ;
     *	    Common-&gt;postorder = TRUE ;
     *
     * To use the natural ordering (with no postordering):
     *
     *	    Common-&gt;nmethods = 1 ;
     *	    Common-&gt;method [0].ordering = CHOLMOD_NATURAL ;
     *	    Common-&gt;postorder = FALSE ;
     *
     * If you are going to factorize hundreds or more matrices with the same
     * nonzero pattern, you may wish to spend a great deal of time finding a
     * good permutation.  In this case, try setting Common-&gt;nmethods to 9.
     * The time spent in cholmod_analysis will be very high, but you need to
     * call it only once.
     *
     * cholmod_analyze sets Common-&gt;current to a value between 0 and nmethods-1.
     * Each ordering method uses the set of options defined by this parameter.
     */</doc>
<doc f='include/suitesparse/cholmod_core.h' l='617'>/* The number of ordering methods to try.  Default: 0.
			 * nmethods = 0 is a special case.  cholmod_analyze
	* will try the user-provided ordering (if given) and AMD.  Let fl and
	* lnz be the flop count and nonzeros in L from AMD&apos;s ordering.  Let
	* anz be the number of nonzeros in the upper or lower triangular part
	* of the symmetric matrix A.  If fl/lnz &lt; 500 or lnz/anz &lt; 5, then this
	* is a good ordering, and METIS is not attempted.  Otherwise, METIS is
	* tried.   The best ordering found is used.  If nmethods &gt; 0, the
	* methods used are given in the method[ ] array, below.  The first
	* three methods in the default suite of orderings is (1) use the given
	* permutation (if provided), (2) use AMD, and (3) use METIS.  Maximum
	* allowed value is CHOLMOD_MAXMETHODS.  */</doc>
<use f='ceres-solver/internal/ceres/suitesparse.cc' l='144' u='w' c='_ZN5ceres8internal11SuiteSparse15AnalyzeCholeskyEP21cholmod_sparse_structPSs'/>
<use f='ceres-solver/internal/ceres/suitesparse.cc' l='180' u='w' c='_ZN5ceres8internal11SuiteSparse31AnalyzeCholeskyWithUserOrderingEP21cholmod_sparse_structRKSt6vectorIiSaIiEEPSs'/>
<use f='ceres-solver/internal/ceres/suitesparse.cc' l='200' u='w' c='_ZN5ceres8internal11SuiteSparse34AnalyzeCholeskyWithNaturalOrderingEP21cholmod_sparse_structPSs'/>
