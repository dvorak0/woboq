<dec f='ceres-solver/internal/ceres/mutex.h' l='167' type='void ceres::internal::Mutex::ReaderLock()'/>
<def f='ceres-solver/internal/ceres/mutex.h' l='245' type='void ceres::internal::Mutex::ReaderLock()'/>
<use f='ceres-solver/internal/ceres/mutex.h' l='298' u='c' c='_ZN5ceres8internal20CeresReaderMutexLockC1EPNS0_5MutexE'/>
<doc f='ceres-solver/internal/ceres/mutex.h' l='163'>// Note that on systems that don&apos;t support read-write locks, these may
  // be implemented as synonyms to Lock() and Unlock().  So you can use
  // these for efficiency, but don&apos;t use them anyplace where being able
  // to do shared reads is necessary to avoid deadlock.</doc>
<doc f='ceres-solver/internal/ceres/mutex.h' l='167'>// Block until free or shared then acquire a share</doc>
