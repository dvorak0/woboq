<dec f='ceres-solver/internal/ceres/linear_least_squares_problems.h' l='71' type='ceres::internal::LinearLeastSquaresProblem * ceres::internal::LinearLeastSquaresProblem4()'/>
<use f='ceres-solver/internal/ceres/linear_least_squares_problems.cc' l='62' u='c' c='_ZN5ceres8internal37CreateLinearLeastSquaresProblemFromIdEi'/>
<def f='ceres-solver/internal/ceres/linear_least_squares_problems.cc' l='530' ll='608' type='ceres::internal::LinearLeastSquaresProblem * ceres::internal::LinearLeastSquaresProblem4()'/>
<doc f='ceres-solver/internal/ceres/linear_least_squares_problems.cc' l='510'>/*
      A = [1 2 0 0 0 1 1
           1 4 0 0 0 5 6
           0 0 9 0 0 3 1]

      b = [0
           1
           2]
*/
// BlockSparseMatrix version
//
// This problem has the unique property that it has two different
// sized f-blocks, but only one of them occurs in the rows involving
// the one e-block. So performing Schur elimination on this problem
// tests the Schur Eliminator&apos;s ability to handle non-e-block rows
// correctly when their structure does not conform to the static
// structure determined by DetectStructure.
//
// NOTE: This problem is too small and rank deficient to be solved without
// the diagonal regularization.</doc>
