<dec f='include/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h' l='208' type='SelfAdjointEigenSolver&lt;_MatrixType&gt; &amp; Eigen::SelfAdjointEigenSolver::computeDirect(const MatrixType &amp; matrix, int options = ComputeEigenvectors)'/>
<def f='include/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h' l='730' ll='736' type='SelfAdjointEigenSolver&lt;MatrixType&gt; &amp; Eigen::SelfAdjointEigenSolver::computeDirect(const MatrixType &amp; matrix, int options = ComputeEigenvectors)'/>
<doc f='include/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h' l='194'>/** \brief Computes eigendecomposition of given matrix using a direct algorithm
      *
      * This is a variant of compute(const MatrixType&amp;, int options) which
      * directly solves the underlying polynomial equation.
      * 
      * Currently only 3x3 matrices for which the sizes are known at compile time are supported (e.g., Matrix3d).
      * 
      * This method is usually significantly faster than the QR algorithm
      * but it might also be less accurate. It is also worth noting that
      * for 3x3 matrices it involves trigonometric operations which are
      * not necessarily available for all scalar types.
      *
      * \sa compute(const MatrixType&amp;, int options)
      */</doc>
