<def f='ceres-solver/include/ceres/iteration_callback.h' l='215' ll='219'/>
<size>8</size>
<doc f='ceres-solver/include/ceres/iteration_callback.h' l='157'>// Interface for specifying callbacks that are executed at the end of
// each iteration of the Minimizer. The solver uses the return value
// of operator() to decide whether to continue solving or to
// terminate. The user can return three values.
//
// SOLVER_ABORT indicates that the callback detected an abnormal
// situation. The solver returns without updating the parameter blocks
// (unless Solver::Options::update_state_every_iteration is set
// true). Solver returns with Solver::Summary::termination_type set to
// USER_ABORT.
//
// SOLVER_TERMINATE_SUCCESSFULLY indicates that there is no need to
// optimize anymore (some user specified termination criterion has
// been met). Solver returns with Solver::Summary::termination_type
// set to USER_SUCCESS.
//
// SOLVER_CONTINUE indicates that the solver should continue
// optimizing.
//
// For example, the following Callback is used internally by Ceres to
// log the progress of the optimization.
//
// Callback for logging the state of the minimizer to STDERR or STDOUT
// depending on the user&apos;s preferences and logging level.
//
//   class LoggingCallback : public IterationCallback {
//    public:
//     explicit LoggingCallback(bool log_to_stdout)
//         : log_to_stdout_(log_to_stdout) {}
//
//     ~LoggingCallback() {}
//
//     CallbackReturnType operator()(const IterationSummary&amp; summary) {
//       const char* kReportRowFormat =
//           &quot;% 4d: f:% 8e d:% 3.2e g:% 3.2e h:% 3.2e &quot;
//           &quot;rho:% 3.2e mu:% 3.2e eta:% 3.2e li:% 3d&quot;;
//       string output = StringPrintf(kReportRowFormat,
//                                    summary.iteration,
//                                    summary.cost,
//                                    summary.cost_change,
//                                    summary.gradient_max_norm,
//                                    summary.step_norm,
//                                    summary.relative_decrease,
//                                    summary.trust_region_radius,
//                                    summary.eta,
//                                    summary.linear_solver_iterations);
//       if (log_to_stdout_) {
//         cout &lt;&lt; output &lt;&lt; endl;
//       } else {
//         VLOG(1) &lt;&lt; output;
//       }
//       return SOLVER_CONTINUE;
//     }
//
//    private:
//     const bool log_to_stdout_;
//   };
//</doc>
<fun r='_ZN5ceres17IterationCallbackD1Ev'/>
<fun r='_ZN5ceres17IterationCallbackclERKNS_16IterationSummaryE'/>
<ovr f='ceres-solver/examples/libmv_homography.cc' l='279' c='{anonymousnamespace}::TerminationCheckingCallback'/>
<ovr f='ceres-solver/internal/ceres/callbacks.h' l='45' c='ceres::internal::StateUpdatingCallback'/>
<ovr f='ceres-solver/internal/ceres/callbacks.h' l='57' c='ceres::internal::LoggingCallback'/>
<ovr f='ceres-solver/internal/ceres/gradient_checking_cost_function.h' l='49' c='ceres::internal::GradientCheckingIterationCallback'/>
<ovr f='ceres-solver/internal/ceres/minimizer_test.cc' l='39' c='ceres::internal::FakeIterationCallback'/>
<ovr f='ceres-solver/internal/ceres/minimizer_test.cc' l='62' c='ceres::internal::AbortingIterationCallback'/>
<ovr f='ceres-solver/internal/ceres/minimizer_test.cc' l='80' c='ceres::internal::SucceedingIterationCallback'/>
<ovr f='ceres-solver/internal/ceres/solver_test.cc' l='75' c='ceres::internal::RememberingCallback'/>
