<dec f='ceres-solver/internal/ceres/compressed_row_jacobian_writer.h' l='66' type='static void ceres::internal::CompressedRowJacobianWriter::PopulateJacobianRowAndColumnBlockVectors(const ceres::internal::Program * program, ceres::internal::CompressedRowSparseMatrix * jacobian)'/>
<def f='ceres-solver/internal/ceres/compressed_row_jacobian_writer.cc' l='52' ll='69' type='static void ceres::internal::CompressedRowJacobianWriter::PopulateJacobianRowAndColumnBlockVectors(const ceres::internal::Program * program, ceres::internal::CompressedRowSparseMatrix * jacobian)'/>
<use f='ceres-solver/internal/ceres/compressed_row_jacobian_writer.cc' l='203' u='c' c='_ZNK5ceres8internal27CompressedRowJacobianWriter14CreateJacobianEv'/>
<doc f='ceres-solver/internal/ceres/compressed_row_jacobian_writer.h' l='56'>// PopulateJacobianRowAndColumnBlockVectors sets col_blocks and
  // row_blocks for a CompressedRowSparseMatrix, based on the
  // parameter block sizes and residual sizes respectively from the
  // program. This is useful when Solver::Options::use_block_amd =
  // true;
  //
  // This function is static so that it is available to other jacobian
  // writers which use CompressedRowSparseMatrix (or derived types).
  // (Jacobian writers do not fall under any type hierarchy; they only
  // have to provide an interface as specified in program_evaluator.h).</doc>
