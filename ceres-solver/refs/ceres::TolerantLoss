<inh f='ceres-solver/include/ceres/loss_function.h' l='86' c='ceres::LossFunction'/>
<def f='ceres-solver/include/ceres/loss_function.h' l='268' ll='275'/>
<size>32</size>
<doc f='ceres-solver/include/ceres/loss_function.h' l='240'>// Loss function that maps to approximately zero cost in a range around the
// origin, and reverts to linear in error (quadratic in cost) beyond this range.
// The tolerance parameter &apos;a&apos; sets the nominal point at which the
// transition occurs, and the transition size parameter &apos;b&apos; sets the nominal
// distance over which most of the transition occurs. Both a and b must be
// greater than zero, and typically b will be set to a fraction of a.
// The slope rho&apos;[s] varies smoothly from about 0 at s &lt;= a - b to
// about 1 at s &gt;= a + b.
//
// The term is computed as:
//
//   rho(s) = b log(1 + exp((s - a) / b)) - c0.
//
// where c0 is chosen so that rho(0) == 0
//
//   c0 = b log(1 + exp(-a / b)
//
// This has the following useful properties:
//
//   rho(s) == 0               for s = 0
//   rho&apos;(s) ~= 0              for s &lt;&lt; a - b
//   rho&apos;(s) ~= 1              for s &gt;&gt; a + b
//   rho&apos;&apos;(s) &gt; 0              for all s
//
// In addition, all derivatives are continuous, and the curvature is
// concentrated in the range a - b to a + b.
//
// At s = 0: rho = [0, ~0, ~0].</doc>
<fun r='_ZN5ceres12TolerantLossC1Edd'/>
<fun r='_ZNK5ceres12TolerantLoss8EvaluateEdPd'/>
<mbr r='ceres::TolerantLoss::a_' o='64' t='const double'/>
<mbr r='ceres::TolerantLoss::b_' o='128' t='const double'/>
<mbr r='ceres::TolerantLoss::c_' o='192' t='const double'/>
