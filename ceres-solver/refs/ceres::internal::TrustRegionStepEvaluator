<def f='ceres-solver/internal/ceres/trust_region_step_evaluator.h' l='77' ll='117'/>
<size>64</size>
<doc f='ceres-solver/internal/ceres/trust_region_step_evaluator.h' l='37'>// The job of the TrustRegionStepEvaluator is to evaluate the quality
// of a step, i.e., how the cost of a step compares with the reduction
// in the objective of the trust region problem.
//
// Classic trust region methods are descent methods, in that they only
// accept a point if it strictly reduces the value of the objective
// function. They do this by measuring the quality of a step as
//
//   cost_change / model_cost_change.
//
// Relaxing the monotonic descent requirement allows the algorithm to
// be more efficient in the long term at the cost of some local
// increase in the value of the objective function.
//
// This is because allowing for non-decreasing objective function
// values in a principled manner allows the algorithm to &quot;jump over
// boulders&quot; as the method is not restricted to move into narrow
// valleys while preserving its convergence properties.
//
// The parameter max_consecutive_nonmonotonic_steps controls the
// window size used by the step selection algorithm to accept
// non-monotonic steps. Setting this parameter to zero, recovers the
// classic montonic descent algorithm.
//
// Based on algorithm 10.1.2 (page 357) of &quot;Trust Region
// Methods&quot; by Conn Gould &amp; Toint, or equations 33-40 of
// &quot;Non-monotone trust-region algorithms for nonlinear
// optimization subject to convex constraints&quot; by Phil Toint,
// Mathematical Programming, 77, 1997.
//
// Example usage:
//
// TrustRegionStepEvaluator* step_evaluator = ...
//
// cost = ... // Compute the non-linear objective function value.
// model_cost_change = ... // Change in the value of the trust region objective.
// if (step_evaluator-&gt;StepQuality(cost, model_cost_change) &gt; threshold) {
//   x = x + delta;
//   step_evaluator-&gt;StepAccepted(cost, model_cost_change);
// }</doc>
<fun r='_ZN5ceres8internal24TrustRegionStepEvaluatorC1Edi'/>
<fun r='_ZNK5ceres8internal24TrustRegionStepEvaluator11StepQualityEdd'/>
<fun r='_ZN5ceres8internal24TrustRegionStepEvaluator12StepAcceptedEdd'/>
<mbr r='ceres::internal::TrustRegionStepEvaluator::max_consecutive_nonmonotonic_steps_' o='0' t='const int'/>
<mbr r='ceres::internal::TrustRegionStepEvaluator::minimum_cost_' o='64' t='double'/>
<mbr r='ceres::internal::TrustRegionStepEvaluator::current_cost_' o='128' t='double'/>
<mbr r='ceres::internal::TrustRegionStepEvaluator::reference_cost_' o='192' t='double'/>
<mbr r='ceres::internal::TrustRegionStepEvaluator::candidate_cost_' o='256' t='double'/>
<mbr r='ceres::internal::TrustRegionStepEvaluator::accumulated_reference_model_cost_change_' o='320' t='double'/>
<mbr r='ceres::internal::TrustRegionStepEvaluator::accumulated_candidate_model_cost_change_' o='384' t='double'/>
<mbr r='ceres::internal::TrustRegionStepEvaluator::num_consecutive_nonmonotonic_steps_' o='448' t='int'/>
