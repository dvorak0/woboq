<dec f='include/c++/4.8/tr1/hashtable.h' l='359' type='iterator std::tr1::_Hashtable::_M_insert_bucket(const value_type &amp; , size_type , typename _Hashtable&lt;_Key, _Value, _Allocator, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, __cache_hash_code, __constant_iterators, __unique_keys&gt;::_Hash_code_type )'/>
<def f='include/c++/4.8/tr1/hashtable.h' l='836' ll='876' type='typename _Hashtable&lt;_Key, _Value, _Allocator, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, __chc, __cit, __uk&gt;::iterator std::tr1::_Hashtable::_M_insert_bucket(const value_type &amp; __v, size_type __n, typename _Hashtable&lt;_Key, _Value, _Allocator, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, __cache_hash_code, __constant_iterators, __unique_keys&gt;::_Hash_code_type __code)'/>
<use f='include/c++/4.8/tr1/hashtable.h' l='897' u='c' c='_ZNSt3tr110_Hashtable9_M_insertERKT0_NS_17integral_constantIbLb1EEE'/>
<doc f='include/c++/4.8/tr1/hashtable.h' l='835'>// Insert v in bucket n (assumes no element with its key already present).</doc>
