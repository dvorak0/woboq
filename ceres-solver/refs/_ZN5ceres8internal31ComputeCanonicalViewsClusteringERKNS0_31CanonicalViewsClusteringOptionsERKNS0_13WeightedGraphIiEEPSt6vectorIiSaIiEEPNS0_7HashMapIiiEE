<dec f='ceres-solver/internal/ceres/canonical_views_clustering.h' l='102' type='void ceres::internal::ComputeCanonicalViewsClustering(const ceres::internal::CanonicalViewsClusteringOptions &amp; options, const WeightedGraph&lt;int&gt; &amp; graph, std::vector&lt;int&gt; * centers, HashMap&lt;int, int&gt; * membership)'/>
<def f='ceres-solver/internal/ceres/canonical_views_clustering.cc' l='88' ll='98' type='void ceres::internal::ComputeCanonicalViewsClustering(const ceres::internal::CanonicalViewsClusteringOptions &amp; options, const WeightedGraph&lt;int&gt; &amp; graph, vector&lt;int&gt; * centers, IntMap * membership)'/>
<doc f='ceres-solver/internal/ceres/canonical_views_clustering.h' l='59'>// Compute a partitioning of the vertices of the graph using the
// canonical views clustering algorithm.
//
// In the following we will use the terms vertices and views
// interchangably.  Given a weighted Graph G(V,E), the canonical views
// of G are the the set of vertices that best &quot;summarize&quot; the content
// of the graph. If w_ij i s the weight connecting the vertex i to
// vertex j, and C is the set of canonical views. Then the objective
// of the canonical views algorithm is
//
//   E[C] = sum_[i in V] max_[j in C] w_ij
//          - size_penalty_weight * |C|
//          - similarity_penalty_weight * sum_[i in C, j in C, j &gt; i] w_ij
//
// alpha is the size penalty that penalizes large number of canonical
// views.
//
// beta is the similarity penalty that penalizes canonical views that
// are too similar to other canonical views.
//
// Thus the canonical views algorithm tries to find a canonical view
// for each vertex in the graph which best explains it, while trying
// to minimize the number of canonical views and the overlap between
// them.
//
// We further augment the above objective function by allowing for per
// vertex weights, higher weights indicating a higher preference for
// being chosen as a canonical view. Thus if w_i is the vertex weight
// for vertex i, the objective function is then
//
//   E[C] = sum_[i in V] max_[j in C] w_ij
//          - size_penalty_weight * |C|
//          - similarity_penalty_weight * sum_[i in C, j in C, j &gt; i] w_ij
//          + view_score_weight * sum_[i in C] w_i
//
// centers will contain the vertices that are the identified
// as the canonical views/cluster centers, and membership is a map
// from vertices to cluster_ids. The i^th cluster center corresponds
// to the i^th cluster.
//
// It is possible depending on the configuration of the clustering
// algorithm that some of the vertices may not be assigned to any
// cluster. In this case they are assigned to a cluster with id = -1;</doc>
<use f='ceres-solver/internal/ceres/canonical_views_clustering_test.cc' l='75' u='c' c='_ZN5ceres8internal18CanonicalViewsTest17ComputeClusteringEv'/>
<use f='ceres-solver/internal/ceres/visibility_based_preconditioner.cc' l='210' u='c' c='_ZN5ceres8internal29VisibilityBasedPreconditioner14ClusterCamerasERKSt6vectorISt3setIiSt4lessIiESaIiEESaIS7_EE'/>
