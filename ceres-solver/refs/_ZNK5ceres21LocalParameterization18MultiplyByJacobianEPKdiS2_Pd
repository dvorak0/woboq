<dec f='ceres-solver/include/ceres/local_parameterization.h' l='138' type='bool ceres::LocalParameterization::MultiplyByJacobian(const double * x, const int num_rows, const double * global_matrix, double * local_matrix) const'/>
<doc f='ceres-solver/include/ceres/local_parameterization.h' l='130'>// local_matrix = global_matrix * jacobian
  //
  // global_matrix is a num_rows x GlobalSize  row major matrix.
  // local_matrix is a num_rows x LocalSize row major matrix.
  // jacobian(x) is the matrix returned by ComputeJacobian at x.
  //
  // This is only used by GradientProblem. For most normal uses, it is
  // okay to use the default implementation.</doc>
<use f='ceres-solver/internal/ceres/gradient_problem.cc' l='69' u='c' c='_ZNK5ceres15GradientProblem8EvaluateEPKdPdS3_'/>
<def f='ceres-solver/internal/ceres/local_parameterization.cc' l='48' ll='60' type='bool ceres::LocalParameterization::MultiplyByJacobian(const double * x, const int num_rows, const double * global_matrix, double * local_matrix) const'/>
<ovr f='ceres-solver/internal/ceres/local_parameterization.cc' l='81' c='_ZNK5ceres24IdentityParameterization18MultiplyByJacobianEPKdiS2_Pd'/>
<ovr f='ceres-solver/internal/ceres/local_parameterization.cc' l='137' c='_ZNK5ceres22SubsetParameterization18MultiplyByJacobianEPKdiS2_Pd'/>
