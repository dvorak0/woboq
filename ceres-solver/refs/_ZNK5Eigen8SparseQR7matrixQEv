<def f='include/eigen3/Eigen/src/SparseQR/SparseQR.h' l='132' ll='133' type='SparseQRMatrixQReturnType&lt;SparseQR&lt;MatrixType, OrderingType&gt; &gt; Eigen::SparseQR::matrixQ() const'/>
<doc f='include/eigen3/Eigen/src/SparseQR/SparseQR.h' l='114'>/** \returns an expression of the matrix Q as products of sparse Householder reflectors.
    * The common usage of this function is to apply it to a dense matrix or vector
    * \code
    * VectorXd B1, B2;
    * // Initialize B1
    * B2 = matrixQ() * B1;
    * \endcode
    *
    * To get a plain SparseMatrix representation of Q:
    * \code
    * SparseMatrix&lt;double&gt; Q;
    * Q = SparseQR&lt;SparseMatrix&lt;double&gt; &gt;(A).matrixQ();
    * \endcode
    * Internally, this call simply performs a sparse product between the matrix Q
    * and a sparse identity matrix. However, due to the fact that the sparse
    * reflectors are stored unsorted, two transpositions are needed to sort
    * them before performing the product.
    */</doc>
