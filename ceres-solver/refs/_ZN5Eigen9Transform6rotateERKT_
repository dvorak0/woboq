<dec f='include/eigen3/Eigen/src/Geometry/Transform.h' l='519' type='Transform&lt;Scalar, Dim, Mode, _Options&gt; &amp; Eigen::Transform::rotate(const RotationType &amp; rotation)'/>
<def f='include/eigen3/Eigen/src/Geometry/Transform.h' l='879' ll='886' type='Transform&lt;Scalar, Dim, Mode, Options&gt; &amp; Eigen::Transform::rotate(const RotationType &amp; rotation)'/>
<doc f='include/eigen3/Eigen/src/Geometry/Transform.h' l='862'>/** Applies on the right the rotation represented by the rotation \a rotation
  * to \c *this and returns a reference to \c *this.
  *
  * The template parameter \a RotationType is the type of the rotation which
  * must be known by internal::toRotationMatrix&lt;&gt;.
  *
  * Natively supported types includes:
  *   - any scalar (2D),
  *   - a Dim x Dim matrix expression,
  *   - a Quaternion (3D),
  *   - a AngleAxis (3D)
  *
  * This mechanism is easily extendable to support user types such as Euler angles,
  * or a pair of Quaternion for 4D rotations.
  *
  * \sa rotate(Scalar), class Quaternion, class AngleAxis, prerotate(RotationType)
  */</doc>
