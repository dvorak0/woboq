<dec f='ceres-solver/internal/ceres/array_utils.h' l='82' type='void ceres::internal::MapValuesToContiguousRange(int size, int * array)'/>
<def f='ceres-solver/internal/ceres/array_utils.cc' l='93' ll='105' type='void ceres::internal::MapValuesToContiguousRange(const int size, int * array)'/>
<doc f='ceres-solver/internal/ceres/array_utils.h' l='69'>// This routine takes an array of integer values, sorts and uniques
// them and then maps each value in the array to its position in the
// sorted+uniqued array. By doing this, if there are are k unique
// values in the array, each value is replaced by an integer in the
// range [0, k-1], while preserving their relative order.
//
// For example
//
// [1 0 3 5 0 1 5]
//
// gets mapped to
//
// [1 0 2 3 0 1 3]</doc>
<use f='ceres-solver/internal/ceres/array_utils_test.cc' l='82' u='c' c='_ZN5ceres8internal49MapValuesToContiguousRange_ContiguousEntries_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/array_utils_test.cc' l='89' u='c' c='_ZN5ceres8internal49MapValuesToContiguousRange_ContiguousEntries_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/array_utils_test.cc' l='100' u='c' c='_ZN5ceres8internal52MapValuesToContiguousRange_NonContiguousEntries_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/array_utils_test.cc' l='119' u='c' c='_ZN5ceres8internal61MapValuesToContiguousRange_NonContiguousRepeatingEntries_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/reorder_program.cc' l='139' u='c' c='_ZN5ceres8internal12_GLOBAL__N_147OrderingForSparseNormalCholeskyUsingSuiteSparseERKNS0_19TripletSparseMatrixERKSt6vectorIPNS0_14ParameterBlockESaIS7_10447557'/>
<use f='ceres-solver/internal/ceres/reorder_program.cc' l='364' u='c' c='_ZN5ceres8internal50MaybeReorderSchurComplementColumnsUsingSuiteSparseERKNS_13OrderedGroupsIPdEEPNS0_7ProgramE'/>
