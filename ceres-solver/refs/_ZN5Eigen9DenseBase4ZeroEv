<dec f='include/eigen3/Eigen/src/Core/DenseBase.h' l='323' type='static const ConstantReturnType Eigen::DenseBase::Zero()'/>
<def f='include/eigen3/Eigen/src/Core/CwiseNullaryOp.h' l='466' ll='471' type='static const typename DenseBase&lt;Derived&gt;::ConstantReturnType Eigen::DenseBase::Zero()'/>
<doc f='include/eigen3/Eigen/src/Core/CwiseNullaryOp.h' l='456'>/** \returns an expression of a fixed-size zero matrix or vector.
  *
  * This variant is only for fixed-size MatrixBase types. For dynamic-size types, you
  * need to use the variants taking size arguments.
  *
  * Example: \include MatrixBase_zero.cpp
  * Output: \verbinclude MatrixBase_zero.out
  *
  * \sa Zero(Index), Zero(Index,Index)
  */</doc>
<use f='ceres-solver/internal/ceres/cubic_interpolation_test.cc' l='382' u='c' c='_ZN5ceres8internal41BiCubicInterpolatorTest_ZeroFunction_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/cubic_interpolation_test.cc' l='389' u='c' c='_ZN5ceres8internal45BiCubicInterpolatorTest_Degree00Function_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/cubic_interpolation_test.cc' l='397' u='c' c='_ZN5ceres8internal45BiCubicInterpolatorTest_Degree01Function_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/cubic_interpolation_test.cc' l='407' u='c' c='_ZN5ceres8internal45BiCubicInterpolatorTest_Degree10Function_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/cubic_interpolation_test.cc' l='417' u='c' c='_ZN5ceres8internal45BiCubicInterpolatorTest_Degree11Function_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/cubic_interpolation_test.cc' l='429' u='c' c='_ZN5ceres8internal45BiCubicInterpolatorTest_Degree12Function_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/cubic_interpolation_test.cc' l='442' u='c' c='_ZN5ceres8internal45BiCubicInterpolatorTest_Degree21Function_Test8TestBodyEv'/>
<use f='ceres-solver/internal/ceres/cubic_interpolation_test.cc' l='455' u='c' c='_ZN5ceres8internal45BiCubicInterpolatorTest_Degree22Function_Test8TestBodyEv'/>
