<def f='ceres-solver/internal/ceres/wall_time.h' l='73' ll='83'/>
<size>24</size>
<doc f='ceres-solver/internal/ceres/wall_time.h' l='49'>// Log a series of events, recording for each event the time elapsed
// since the last event and since the creation of the object.
//
// The information is output to VLOG(3) upon destruction. A
// name::Total event is added as the final event right before
// destruction.
//
// Example usage:
//
//  void Foo() {
//    EventLogger event_logger(&quot;Foo&quot;);
//    Bar1();
//    event_logger.AddEvent(&quot;Bar1&quot;)
//    Bar2();
//    event_logger.AddEvent(&quot;Bar2&quot;)
//    Bar3();
//  }
//
// Will produce output that looks like
//
//  Foo
//      Bar1:  time1  time1
//      Bar2:  time2  time1 + time2;
//     Total:  time3  time1 + time2 + time3;</doc>
<fun r='_ZN5ceres8internal11EventLoggerC1ERKSs'/>
<fun r='_ZN5ceres8internal11EventLoggerD1Ev'/>
<fun r='_ZN5ceres8internal11EventLogger8AddEventERKSs'/>
<mbr r='ceres::internal::EventLogger::start_time_' o='0' t='const double'/>
<mbr r='ceres::internal::EventLogger::last_event_time_' o='64' t='double'/>
<mbr r='ceres::internal::EventLogger::events_' o='128' t='std::string'/>
