<inh f='include/glog/logging.h' l='1360' c='google::LogSink'/>
<def f='ceres-solver/internal/ceres/gmock/mock-log.h' l='67' ll='149'/>
<size>184</size>
<doc f='ceres-solver/internal/ceres/gmock/mock-log.h' l='49'>// A ScopedMockLog object intercepts LOG() messages issued during its
// lifespan.  Using this together with Google C++ Mocking Framework,
// it&apos;s very easy to test how a piece of code calls LOG().  The
// typical usage:
//
//   TEST(FooTest, LogsCorrectly) {
//     ScopedMockLog log;
//
//     // We expect the WARNING &quot;Something bad!&quot; exactly twice.
//     EXPECT_CALL(log, Log(WARNING, _, &quot;Something bad!&quot;))
//         .Times(2);
//
//     // We allow foo.cc to call LOG(INFO) any number of times.
//     EXPECT_CALL(log, Log(INFO, HasSubstr(&quot;/foo.cc&quot;), _))
//         .Times(AnyNumber());
//
//     Foo();  // Exercises the code under test.
//   }</doc>
<fun r='_ZN7testing13ScopedMockLogC1Ev'/>
<fun r='_ZN7testing13ScopedMockLogD1Ev'/>
<fun r='_ZN7testing13ScopedMockLog3LogEiRKSsS2_'/>
<fun r='_ZN7testing13ScopedMockLog9gmock_LogERKNS_7MatcherIiEERKNS1_IRKSsEES9_'/>
<mbr r='testing::ScopedMockLog::gmock3_Log_91' o='64' t='::testing::FunctionMocker&lt;void (google::LogSeverity, const std::string &amp;, const std::string &amp;)&gt;'/>
<fun r='_ZN7testing13ScopedMockLog4sendEiPKcS2_iPK2tmS2_m'/>
<fun r='_ZN7testing13ScopedMockLog12WaitTillSentEv'/>
<mbr r='testing::ScopedMockLog::message_info_' o='1280' t='testing::ScopedMockLog::MessageInfo'/>
